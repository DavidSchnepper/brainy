<?php
/**
 * Brainy Internal Plugin Templateparser
 *
 * This is the template parser.
 * It is generated from the Parser.y file
 * @package Brainy
 * @subpackage Compiler
 * @author Uwe Tews
 * @author Matt Basta
 */

namespace Box\Brainy\Compiler;


class BrainySafeLookupWrapper
{
    private $unsafeVersion;
    private $safeVersion;

    /**
     * @param string $unsafe
     * @param string $safe
     */
    public function __construct($unsafe, $safe) {
        $this->unsafeVersion = $unsafe;
        $this->safeVersion = $safe;
    }

    /**
     * @return string
     */
    public function getUnsafe() {
        return $this->unsafeVersion;
    }

    /**
     * The __toString() method should always return the safe version.
     * @return string
     */
    public function __toString() {
        return $this->safeVersion;
    }
}

class BrainyStaticWrapper
{
    private $code;

    /**
     * @param string $code
     */
    public function __construct($code) {
        $this->code = $code;
    }

    /**
     * The __toString() method un-statics the contents
     * @return string
     */
    public function __toString() {
        return $this->code;
    }

    /**
     * Combine two values which may be static wrappers. The output is only a
     * static wrapper if both the left and the right are static wrappers.
     * @param string|BrainyStaticWrapper $left
     * @param string|BrainyStaticWrapper $right
     * @return string|BrainyStaticWrapper
     */
    public static function concat($left, $right) {
        if ($left instanceof BrainyStaticWrapper && $right instanceof BrainyStaticWrapper) {
            return new BrainyStaticWrapper($left . $right);
        }
        return $left . $right;
    }

    /**
     * Combine two values which may be static wrappers. The output is a static
     * wrapper if either the left or the right are static wrappers. This is
     * only to be used in cases where the left or the right is known not to
     * affect whether the result is a static wrapper.
     * @param string|BrainyStaticWrapper $left
     * @param string|BrainyStaticWrapper $right
     * @return string|BrainyStaticWrapper
     */
    public static function static_concat($left, $right) {
        if ($left instanceof BrainyStaticWrapper || $right instanceof BrainyStaticWrapper) {
            return new BrainyStaticWrapper($left . $right);
        }
        return $left . $right;
    }

    /**
     * If all of the values in $conditions are static wrappers, the result is a
     * static wrapper of $code. Otherwise, $code is returned.
     * @param string $code
     * @param array $conditions
     * @return string|BrainyStaticWrapper
     */
    public static function static_if_all($code, $conditions) {
        foreach ($conditions as $cond) {
            if (!($cond instanceof BrainyStaticWrapper)) {
                return $code;
            }
        }
        return new BrainyStaticWrapper($code);
    }
}

class TP_yyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};


#line 17 "Parser.y"
class Parser#line 112 "Parser.php"
{
#line 19 "Parser.y"

    const Err1 = "Security error: Call to private object member not allowed";
    const Err2 = "Security error: Call to dynamic object member not allowed";
    // states whether the parse was successful or not
    public $successful = true;
    public $retvalue = 0;
    public static $prefix_number = 0;
    private $lex;
    private $internalError = false;
    private $strip = 0;

    private $safe_lookups = 0;
    private $strict_mode = false;

    public function __construct($lex, $compiler) {
        $this->lex = $lex;
        $this->compiler = $compiler;
        $this->smarty = $this->compiler->smarty;
        $this->template = $this->compiler->template;
        $this->compiler->has_variable_string = false;
        $this->compiler->prefix_code = array();
        $this->security = isset($this->smarty->security_policy);
        $this->block_nesting_level = 0;
        $this->current_buffer = $this->root_buffer = new Helpers\TemplateBuffer($this);

        $this->safe_lookups = $this->smarty->safe_lookups;
    }

    /**
     * Strips whitespace from a string
     * @param string $string
     * @return string
     */
    protected static function stripString($string) {
        // Replaces whitespace followed by a `<` with null.
        // `     \n     <foo>` -> `<foo>`
        // `     \n     &nbsp;` -> `&nbsp;`
        $string = preg_replace('/\s+(?=<)/ims', '', $string);
        $string = preg_replace('/\s+(?=&)/ims', ' ', $string);
        // Replaces `>` followed by whitespace with `>`
        // `<div>\n  foo` -> `<div>foo`
        $string = preg_replace('/>\s+(?=\S)/ims', '>', $string);
        // Replaces whitespace followed by anything else with a space.
        // `            data-hello="` -> ` data-hello="`
        $string = preg_replace('/\s+(?=\w)/ims', ' ', $string);

        // Is there work to be done at the end of the string?
        if ($string !== rtrim($string)) {
            $string = rtrim($string);
            // If the last non-whitespace character is not a `>`, add a space.
            if (substr($string, -1) !== '>') {
                $string .= ' ';
            }
        }
        return $string;
    }

    /**
     * @return bool
     */
    public function isStrictMode() {
        return $this->strict_mode;
    }

    /**
     * @param string $variable The name of the variable to look up
     * @param string|void $value The member of the SmartyVariable to access
     * @return string|BrainySafeLookupWrapper
     */
    public function compileVariable($variable, $value = 'value')
    {
        $unsafe = '$_smarty_tpl->tpl_vars[' . $variable . ']->' . $value;
        if ($this->safe_lookups === 0) { // Unsafe lookups
            return $unsafe;
        }
        $safe = 'smarty_safe_var_lookup($_smarty_tpl->tpl_vars, '. $variable .', ' . $this->safe_lookups . ')->' . $value;
        return new BrainySafeLookupWrapper($unsafe, $safe);
    }

    /**
     * @param string $base
     * @param string $variable
     * @return string|BrainySafeLookupWrapper
     */
    public function compileSafeLookupWithBase($base, $variable)
    {
        $unsafe = $base . '[' . $variable . ']';
        if ($this->safe_lookups === 0) { // Unsafe lookups
            return $unsafe;
        }
        $safe = 'smarty_safe_array_lookup(' . $base . ', '. $variable .', ' . $this->safe_lookups . ')';
        return new BrainySafeLookupWrapper($unsafe, $safe);
    }
#line 209 "Parser.php"

    const TP_VERT                           =  1;
    const TP_COLON                          =  2;
    const TP_SETSTRICT                      =  3;
    const TP_RDEL                           =  4;
    const TP_COMMENT                        =  5;
    const TP_TEXT                           =  6;
    const TP_STRIPON                        =  7;
    const TP_STRIPOFF                       =  8;
    const TP_BLOCKSOURCE                    =  9;
    const TP_LITERALSTART                   = 10;
    const TP_LITERALEND                     = 11;
    const TP_LITERAL                        = 12;
    const TP_LDEL                           = 13;
    const TP_EQUAL                          = 14;
    const TP_DOLLAR                         = 15;
    const TP_ID                             = 16;
    const TP_LDELIF                         = 17;
    const TP_LDELFOR                        = 18;
    const TP_SEMICOLON                      = 19;
    const TP_INCDEC                         = 20;
    const TP_TO                             = 21;
    const TP_STEP                           = 22;
    const TP_LDELFOREACH                    = 23;
    const TP_SPACE                          = 24;
    const TP_AS                             = 25;
    const TP_APTR                           = 26;
    const TP_LDELSETFILTER                  = 27;
    const TP_SMARTYBLOCKCHILDPARENT         = 28;
    const TP_LDELSLASH                      = 29;
    const TP_ATTR                           = 30;
    const TP_INTEGER                        = 31;
    const TP_COMMA                          = 32;
    const TP_OPENP                          = 33;
    const TP_CLOSEP                         = 34;
    const TP_MATH                           = 35;
    const TP_UNIMATH                        = 36;
    const TP_ANDSYM                         = 37;
    const TP_ISIN                           = 38;
    const TP_ISDIVBY                        = 39;
    const TP_ISNOTDIVBY                     = 40;
    const TP_ISEVEN                         = 41;
    const TP_ISNOTEVEN                      = 42;
    const TP_ISEVENBY                       = 43;
    const TP_ISNOTEVENBY                    = 44;
    const TP_ISODD                          = 45;
    const TP_ISNOTODD                       = 46;
    const TP_ISODDBY                        = 47;
    const TP_ISNOTODDBY                     = 48;
    const TP_INSTANCEOF                     = 49;
    const TP_QMARK                          = 50;
    const TP_NOT                            = 51;
    const TP_TYPECAST                       = 52;
    const TP_DOT                            = 53;
    const TP_SINGLEQUOTESTRING              = 54;
    const TP_AT                             = 55;
    const TP_OPENB                          = 56;
    const TP_CLOSEB                         = 57;
    const TP_PTR                            = 58;
    const TP_EQUALS                         = 59;
    const TP_NOTEQUALS                      = 60;
    const TP_GREATERTHAN                    = 61;
    const TP_LESSTHAN                       = 62;
    const TP_GREATEREQUAL                   = 63;
    const TP_LESSEQUAL                      = 64;
    const TP_IDENTITY                       = 65;
    const TP_NONEIDENTITY                   = 66;
    const TP_MOD                            = 67;
    const TP_LAND                           = 68;
    const TP_LOR                            = 69;
    const TP_LXOR                           = 70;
    const TP_QUOTE                          = 71;
    const TP_DOLLARID                       = 72;
    const YY_NO_ACTION = 480;
    const YY_ACCEPT_ACTION = 479;
    const YY_ERROR_ACTION = 478;

    const YY_SZ_ACTTAB = 2222;
static public $yy_action = array(
 /*     0 */   186,  161,   31,  285,  113,  267,  255,  251,  252,  253,
 /*    10 */   258,  163,  186,  167,    8,   32,   27,  271,   25,  101,
 /*    20 */   268,   39,  172,   39,  115,  170,  125,   13,  202,   13,
 /*    30 */   205,  163,  265,  263,   45,   50,   47,   43,   28,   35,
 /*    40 */   293,  291,   37,   22,  232,  290,   11,    9,  148,  186,
 /*    50 */   186,  186,    4,  186,  360,  164,  354,  261,  287,  288,
 /*    60 */   289,  294,  295,  301,  302,  300,  299,  296,  297,  298,
 /*    70 */    41,  172,   39,   39,  360,  195,   39,  283,   13,   13,
 /*    80 */   360,  249,   13,   45,   50,   47,   43,   28,   35,  293,
 /*    90 */   291,   37,   22,  232,  290,   11,    9,  186,  186,   44,
 /*   100 */   169,  333,   92,  231,  194,  254,  168,  287,  288,  289,
 /*   110 */   294,  295,  301,  302,  300,  299,  296,  297,  298,  102,
 /*   120 */    39,   39,   18,   15,  170,  250,   13,   13,   30,  226,
 /*   130 */     5,   45,   50,   47,   43,   28,   35,  293,  291,   37,
 /*   140 */    22,  232,  290,   11,    9,  186,  247,  186,  228,  186,
 /*   150 */   357,   19,  360,  116,  177,  287,  288,  289,  294,  295,
 /*   160 */   301,  302,  300,  299,  296,  297,  298,  212,   18,   40,
 /*   170 */   357,  250,  360,   33,   18,  217,  357,  250,  360,   45,
 /*   180 */    50,   47,   43,   28,   35,  293,  291,   37,   22,  232,
 /*   190 */   290,   11,    9,  186,   20,   44,  174,   44,  165,    7,
 /*   200 */    26,  141,  162,  287,  288,  289,  294,  295,  301,  302,
 /*   210 */   300,  299,  296,  297,  298,  188,  192,  256,  194,  254,
 /*   220 */     3,   18,  170,  249,  250,  239,  170,   45,   50,   47,
 /*   230 */    43,   28,   35,  293,  291,   37,   22,  232,  290,   11,
 /*   240 */     9,  186,  186,  186,  281,  323,  329,  186,  103,  277,
 /*   250 */   186,  287,  288,  289,  294,  295,  301,  302,  300,  299,
 /*   260 */   296,  297,  298,  198,  207,   39,  178,   33,   17,  220,
 /*   270 */   209,   13,   29,  215,  237,   45,   50,   47,   43,   28,
 /*   280 */    35,  293,  291,   37,   22,  232,  290,   11,    9,  186,
 /*   290 */    44,   44,    5,  121,   33,   44,  223,  127,   44,  287,
 /*   300 */   288,  289,  294,  295,  301,  302,  300,  299,  296,  297,
 /*   310 */   298,   36,  196,  200,  174,  123,  279,    7,    5,   18,
 /*   320 */   248,  246,  250,   45,   50,   47,   43,   28,   35,  293,
 /*   330 */   291,   37,   22,  232,  290,   11,    9,  186,  238,  264,
 /*   340 */   218,  266,   18,  134,   97,  203,  126,  287,  288,  289,
 /*   350 */   294,  295,  301,  302,  300,  299,  296,  297,  298,  242,
 /*   360 */   262,   18,   18,  222,  191,  190,  215,  479,   89,  186,
 /*   370 */    42,   45,   50,   47,   43,   28,   35,  293,  291,   37,
 /*   380 */    22,  232,  290,   11,    9,  149,   16,  204,   23,  188,
 /*   390 */   215,  229,   13,   34,  261,  287,  288,  289,  294,  295,
 /*   400 */   301,  302,  300,  299,  296,  297,  298,  186,  172,  237,
 /*   410 */   187,   98,  147,   18,  120,   21,  250,   76,  208,   94,
 /*   420 */   212,  261,  153,  269,   39,  166,  155,  235,  286,   10,
 /*   430 */    13,  234,  241,  111,  242,  170,  236,  242,  182,  233,
 /*   440 */   119,   45,   50,   47,   43,   28,   35,  293,  291,   37,
 /*   450 */    22,  232,  290,   11,    9,  186,  171,    5,  280,  257,
 /*   460 */   244,    2,  140,  107,   12,  287,  288,  289,  294,  295,
 /*   470 */   301,  302,  300,  299,  296,  297,  298,  242,  242,  154,
 /*   480 */   112,  260,  193,  122,  221,  159,  262,  117,  261,   45,
 /*   490 */    50,   47,   43,   28,   35,  293,  291,   37,   22,  232,
 /*   500 */   290,   11,    9,  186,  227,  245,  224,  230,   42,  225,
 /*   510 */   259,  278,  139,  287,  288,  289,  294,  295,  301,  302,
 /*   520 */   300,  299,  296,  297,  298,  108,  160,  242,  243,  189,
 /*   530 */   289,   14,  289,  289,  289,  261,  289,   45,   50,   47,
 /*   540 */    43,   28,   35,  293,  291,   37,   22,  232,  290,   11,
 /*   550 */     9,  186,  289,  289,  289,  289,  289,  289,   99,   95,
 /*   560 */   138,  287,  288,  289,  294,  295,  301,  302,  300,  299,
 /*   570 */   296,  297,  298,  242,  242,  242,  289,  289,  289,  289,
 /*   580 */   289,  289,  289,  289,  219,   45,   50,   47,   43,   28,
 /*   590 */    35,  293,  291,   37,   22,  232,  290,   11,    9,  186,
 /*   600 */   289,  289,  289,  289,  289,  289,  289,  289,  289,  287,
 /*   610 */   288,  289,  294,  295,  301,  302,  300,  299,  296,  297,
 /*   620 */   298,  289,  289,  289,  289,  289,  289,  289,  289,  289,
 /*   630 */   289,  289,  206,   45,   50,   47,   43,   28,   35,  293,
 /*   640 */   291,   37,   22,  232,  290,   11,    9,  186,  289,  289,
 /*   650 */   289,  289,  289,  289,  289,  289,  289,  287,  288,  289,
 /*   660 */   294,  295,  301,  302,  300,  299,  296,  297,  298,  289,
 /*   670 */   289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
 /*   680 */   289,   45,   50,   47,   43,   28,   35,  293,  291,   37,
 /*   690 */    22,  232,  290,   11,    9,  289,  289,  289,  289,  289,
 /*   700 */   289,  289,  289,  289,  289,  287,  288,  289,  294,  295,
 /*   710 */   301,  302,  300,  299,  296,  297,  298,   45,   50,   47,
 /*   720 */    43,   28,   35,  293,  291,   37,   22,  232,  290,   11,
 /*   730 */     9,  289,  289,  289,  289,  289,  289,  289,  289,  289,
 /*   740 */   289,  287,  288,  289,  294,  295,  301,  302,  300,  299,
 /*   750 */   296,  297,  298,  289,  358,    8,  274,  114,   90,   25,
 /*   760 */   101,  289,  289,  289,  197,  115,   17,  289,  289,  202,
 /*   770 */   275,  205,  237,  213,  358,   24,  100,  143,   46,  150,
 /*   780 */   358,  289,  289,    5,  289,  289,  261,    8,  261,  124,
 /*   790 */   176,   25,  101,   49,   48,  211,  240,  115,    1,  262,
 /*   800 */   170,  202,  289,  205,  289,  213,  289,   24,  289,  289,
 /*   810 */    46,  152,  289,   93,  289,  289,  289,  289,  289,    8,
 /*   820 */   261,  124,  201,   25,  101,   49,   48,  211,  240,  115,
 /*   830 */     1,  303,  144,  202,  172,  205,  289,  213,  289,   24,
 /*   840 */   289,  261,   46,  289,  289,   93,  289,  289,  289,  289,
 /*   850 */   289,    8,  262,  124,  173,   25,  101,   49,   48,  211,
 /*   860 */   240,  115,    1,  289,  145,  202,  289,  205,  289,  184,
 /*   870 */   289,   24,  289,  261,   46,  289,  289,   93,  289,  289,
 /*   880 */   289,  289,  289,    8,  262,  124,  201,   25,  101,   49,
 /*   890 */    48,  211,  240,  115,    1,  289,  289,  202,  289,  205,
 /*   900 */   289,  213,  289,   38,  289,  289,   46,  157,  289,   93,
 /*   910 */   289,  289,  289,  289,  289,    8,  261,  124,  179,   25,
 /*   920 */   101,   49,   48,  211,  240,  115,    1,  262,  289,  202,
 /*   930 */   289,  205,  289,  213,  289,   24,  289,  289,   46,  289,
 /*   940 */   289,   93,  289,  289,  289,  289,  289,    8,  289,  118,
 /*   950 */   201,   25,  101,   49,   48,  211,  240,  115,    1,  289,
 /*   960 */   289,  202,  289,  205,  289,  213,  289,   24,  289,  289,
 /*   970 */    46,  289,  289,   93,  289,  289,  289,  289,  289,    8,
 /*   980 */   289,  124,  201,   25,  101,   49,   48,  211,  240,  115,
 /*   990 */     1,  289,  289,  202,  289,  205,  289,  213,  289,   38,
 /*  1000 */   289,  289,   46,  289,  289,   93,  289,  289,  289,  289,
 /*  1010 */   289,    8,  289,  124,  199,   25,  101,   49,   48,  211,
 /*  1020 */   240,  115,  289,  289,  289,  202,  289,  205,  289,  213,
 /*  1030 */   289,   38,  289,  289,   46,  289,  289,   93,  289,  289,
 /*  1040 */   187,  289,  289,  289,  109,  289,  289,   70,  208,   49,
 /*  1050 */    48,  211,  240,  289,  289,  289,  155,  235,  286,  289,
 /*  1060 */   187,  234,  241,  111,  120,  289,  289,   76,  208,   93,
 /*  1070 */   289,  181,  282,  289,  289,  289,  155,  235,  286,  289,
 /*  1080 */   289,  234,  241,  111,  289,  289,  289,  289,  185,  289,
 /*  1090 */   187,  289,   18,  289,  109,  250,  289,   70,  208,  289,
 /*  1100 */   289,  289,  289,   39,  289,  214,  155,  235,  286,   13,
 /*  1110 */   187,  234,  241,  111,  120,  289,  289,   76,  208,  289,
 /*  1120 */   289,  289,  284,  289,  289,  289,  155,  235,  286,  289,
 /*  1130 */   289,  234,  241,  111,  289,  187,  289,  289,  180,  120,
 /*  1140 */   289,  289,   87,  208,  289,  289,  289,  289,  289,  289,
 /*  1150 */   289,  155,  235,  286,  289,  187,  234,  241,  111,  120,
 /*  1160 */   289,  289,   84,  208,  289,  289,  289,  289,  289,  289,
 /*  1170 */   289,  155,  235,  286,  289,  289,  234,  241,  111,  289,
 /*  1180 */   289,  289,  289,  289,  289,  187,  289,   18,  289,  120,
 /*  1190 */   250,  289,   74,  208,  289,  289,  289,  289,   39,  289,
 /*  1200 */   210,  155,  235,  286,   13,  187,  234,  241,  111,  120,
 /*  1210 */   289,  289,   59,  208,  289,  289,  289,  289,  289,  289,
 /*  1220 */   289,  155,  235,  286,  289,  289,  234,  241,  111,  289,
 /*  1230 */   187,  289,  289,  289,  104,  289,  289,   62,  208,  289,
 /*  1240 */   289,  289,  289,  289,  289,  289,  155,  235,  286,  289,
 /*  1250 */   187,  234,  241,  111,  120,  289,  289,   58,  208,  289,
 /*  1260 */   289,  289,  289,  289,  289,  289,  155,  235,  286,  289,
 /*  1270 */   289,  234,  241,  111,  289,  289,  289,  289,  289,  289,
 /*  1280 */   187,  289,  289,  289,   91,  289,  289,   55,  183,  289,
 /*  1290 */   289,  289,  289,  289,  289,  289,  155,  235,  286,  289,
 /*  1300 */   187,  234,  241,  111,  105,  289,  289,   80,  208,  289,
 /*  1310 */   289,  289,  289,  289,  289,  289,  155,  235,  286,  289,
 /*  1320 */   289,  234,  241,  111,  289,  187,  289,  289,  289,   91,
 /*  1330 */   289,  289,   51,  175,  289,  289,  289,  289,  289,  289,
 /*  1340 */   289,  155,  235,  286,  289,  187,  234,  241,  111,  120,
 /*  1350 */   289,  289,   73,  208,  289,  289,  289,  289,  289,  289,
 /*  1360 */   289,  155,  235,  286,  289,  289,  234,  241,  111,  289,
 /*  1370 */   289,  289,  289,  289,  289,  187,  289,  289,  289,  120,
 /*  1380 */   289,  289,   85,  208,  289,  289,  289,  289,  289,  289,
 /*  1390 */   289,  155,  235,  286,  289,  187,  234,  241,  111,  120,
 /*  1400 */   289,  289,   53,  208,  289,  289,  289,  289,  289,  289,
 /*  1410 */   289,  155,  235,  286,  289,  289,  234,  241,  111,  289,
 /*  1420 */   187,  289,  289,  289,  120,  289,  289,   56,  208,  289,
 /*  1430 */   289,  289,  289,  289,  289,  289,  155,  235,  286,  289,
 /*  1440 */   187,  234,  241,  111,  120,  289,  289,   57,  208,  289,
 /*  1450 */   289,  289,  289,  289,  289,  289,  155,  235,  286,  289,
 /*  1460 */   289,  234,  241,  111,  289,  289,  289,  289,  289,  289,
 /*  1470 */   187,  289,  289,  289,  120,  289,  289,   65,  208,  289,
 /*  1480 */   289,  289,  289,  289,  289,  289,  155,  235,  286,  289,
 /*  1490 */   187,  234,  241,  111,  120,  289,  289,   79,  208,  289,
 /*  1500 */   289,  289,  289,  289,  289,  289,  155,  235,  286,  289,
 /*  1510 */   289,  234,  241,  111,  289,  187,  289,  289,  289,  120,
 /*  1520 */   289,  289,   86,  208,  289,  289,  289,  289,  289,  289,
 /*  1530 */   289,  155,  235,  286,  289,  187,  234,  241,  111,  120,
 /*  1540 */   289,  289,   64,  208,  289,  289,  289,  289,  289,  289,
 /*  1550 */   289,  155,  235,  286,  289,  289,  234,  241,  111,  289,
 /*  1560 */   289,  289,  289,  289,  289,  187,  289,  289,  289,  120,
 /*  1570 */   289,  289,   72,  208,  289,  289,  289,  289,  289,  289,
 /*  1580 */   289,  155,  235,  286,  289,  187,  234,  241,  111,  120,
 /*  1590 */   289,  289,   63,  208,  289,  289,  289,  289,  289,  289,
 /*  1600 */   289,  155,  235,  286,  289,  289,  234,  241,  111,  289,
 /*  1610 */   187,  289,  289,  289,  120,  289,  289,   61,  208,  289,
 /*  1620 */   289,  289,  289,  289,  289,  289,  155,  235,  286,  289,
 /*  1630 */   187,  234,  241,  111,  120,  289,  289,   88,  208,  289,
 /*  1640 */   289,  289,  289,  289,  289,  289,  155,  235,  286,  289,
 /*  1650 */   289,  234,  241,  111,  289,  289,  289,  289,  289,  289,
 /*  1660 */   187,  289,  289,  289,  120,  289,  289,   52,  208,  289,
 /*  1670 */   289,  289,  289,  289,  289,  289,  155,  235,  286,  289,
 /*  1680 */   187,  234,  241,  111,  120,  289,  289,   69,  208,  289,
 /*  1690 */   289,  289,  289,  289,  289,  289,  155,  235,  286,  289,
 /*  1700 */   289,  234,  241,  111,  289,  187,  289,  289,  289,  120,
 /*  1710 */   289,  289,   81,  208,  289,  289,  289,  289,  289,  289,
 /*  1720 */   289,  155,  235,  286,  289,  187,  234,  241,  111,  120,
 /*  1730 */   289,  289,   68,  208,  289,  289,  289,  289,  289,  289,
 /*  1740 */   289,  155,  235,  286,  289,  289,  234,  241,  111,  289,
 /*  1750 */   289,  289,  289,  289,  289,  187,  289,  289,  289,  120,
 /*  1760 */   289,  289,   60,  208,  289,  289,  289,  289,  289,  289,
 /*  1770 */   289,  155,  235,  286,  289,  187,  234,  241,  111,  106,
 /*  1780 */   289,  289,   67,  208,  289,  289,  289,  289,  289,  289,
 /*  1790 */   289,  155,  235,  286,  289,  289,  234,  241,  111,  289,
 /*  1800 */   187,  289,  289,  289,  120,  289,  289,   82,  208,  289,
 /*  1810 */   289,  289,  289,  289,  289,  289,  155,  235,  286,  289,
 /*  1820 */   187,  234,  241,  111,  120,  289,  289,   78,  208,  289,
 /*  1830 */   289,  289,  289,  289,  289,  289,  155,  235,  286,  289,
 /*  1840 */   289,  234,  241,  111,  289,  289,  289,  289,  289,  289,
 /*  1850 */   187,  289,  289,  289,  120,  289,  289,   75,  208,  289,
 /*  1860 */   289,  289,  289,  289,  289,  289,  155,  235,  286,  289,
 /*  1870 */   187,  234,  241,  111,  120,  289,  289,   66,  208,  289,
 /*  1880 */   289,  289,  289,  289,  289,  289,  155,  235,  286,  289,
 /*  1890 */   289,  234,  241,  111,  289,  187,  289,  289,  289,  120,
 /*  1900 */   289,  289,   71,  208,  289,  289,  289,  289,  289,  289,
 /*  1910 */   289,  155,  235,  286,  289,  187,  234,  241,  111,  120,
 /*  1920 */   289,  289,   83,  208,  289,  289,  289,  289,  289,  289,
 /*  1930 */   289,  155,  235,  286,  289,  289,  234,  241,  111,  289,
 /*  1940 */   289,  289,  289,  289,  289,  187,  289,  289,  289,  120,
 /*  1950 */   289,  289,   77,  208,  289,  289,  289,  289,  289,  289,
 /*  1960 */   289,  155,  235,  286,  289,  187,  234,  241,  111,  110,
 /*  1970 */   289,  289,   54,  208,  289,  289,  289,  289,  289,  289,
 /*  1980 */   289,  155,  235,  286,  289,  289,  234,  241,  111,  276,
 /*  1990 */   289,  289,  289,  289,  289,  289,    6,  289,  289,  289,
 /*  2000 */    25,  101,  289,  289,  289,  289,  115,  276,  289,  289,
 /*  2010 */   202,  289,  205,  289,    6,  289,  289,  187,   25,  101,
 /*  2020 */   289,  128,  289,  289,  115,  208,  289,  289,  202,  289,
 /*  2030 */   205,  289,  289,  155,  289,  292,  289,  289,  234,  241,
 /*  2040 */   111,  187,  289,  289,  187,  137,  289,  289,  130,  208,
 /*  2050 */   289,  289,  208,  289,  272,  270,  289,  155,  289,  216,
 /*  2060 */   155,  289,  234,  241,  111,  234,  241,  111,  289,  289,
 /*  2070 */   289,  289,  273,  270,  289,  187,  289,  289,  289,  135,
 /*  2080 */   289,  289,  289,  208,  289,  187,  289,  289,  289,  129,
 /*  2090 */   289,  155,  289,  208,  289,  289,  234,  241,  111,  289,
 /*  2100 */   289,  155,  289,  289,  289,  289,  234,  241,  111,  187,
 /*  2110 */   289,  289,  187,  133,  289,  289,  132,  208,  289,  289,
 /*  2120 */   208,  289,  289,  289,  289,  155,  289,  289,  155,  289,
 /*  2130 */   234,  241,  111,  234,  241,  111,  187,  289,  289,  187,
 /*  2140 */   136,  289,  289,  131,  208,  289,  289,  208,  289,  289,
 /*  2150 */   289,  289,  155,  289,  289,  155,  289,  234,  241,  111,
 /*  2160 */   234,  241,  111,   96,  146,  289,  289,  289,  289,  161,
 /*  2170 */   156,  289,  289,  261,  289,  161,  158,   32,   27,  261,
 /*  2180 */   289,  161,  142,   32,   27,  261,  289,  170,  289,   32,
 /*  2190 */    27,  261,  289,  170,  289,   32,   27,  161,  151,  170,
 /*  2200 */   289,  289,  289,  289,  289,  170,  289,  261,  289,  289,
 /*  2210 */   289,   32,   27,  289,  289,  289,  289,  289,  289,  289,
 /*  2220 */   289,  170,
    );
    static public $yy_lookahead = array(
 /*     0 */     1,   83,   13,    4,   15,   16,    5,    6,    7,    8,
 /*    10 */     9,   10,    1,   19,   13,   97,   98,    4,   17,   18,
 /*    20 */    31,   24,  107,   24,   23,  107,   32,   30,   27,   30,
 /*    30 */    29,   10,   11,   12,   35,   36,   37,   38,   39,   40,
 /*    40 */    41,   42,   43,   44,   45,   46,   47,   48,   84,    1,
 /*    50 */     1,    1,   32,    1,    4,   92,    4,   93,   59,   60,
 /*    60 */    61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
 /*    70 */    22,  107,   24,   24,   24,   25,   24,   57,   30,   30,
 /*    80 */    30,  108,   30,   35,   36,   37,   38,   39,   40,   41,
 /*    90 */    42,   43,   44,   45,   46,   47,   48,    1,    1,   49,
 /*   100 */    83,    4,   76,   77,   78,   79,   92,   59,   60,   61,
 /*   110 */    62,   63,   64,   65,   66,   67,   68,   69,   70,   92,
 /*   120 */    24,   24,   13,   14,  107,   16,   30,   30,   14,   20,
 /*   130 */    33,   35,   36,   37,   38,   39,   40,   41,   42,   43,
 /*   140 */    44,   45,   46,   47,   48,    1,    4,    1,    4,    1,
 /*   150 */     4,   13,    4,   15,   16,   59,   60,   61,   62,   63,
 /*   160 */    64,   65,   66,   67,   68,   69,   70,   53,   13,   14,
 /*   170 */    24,   16,   24,   32,   13,   34,   30,   16,   30,   35,
 /*   180 */    36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
 /*   190 */    46,   47,   48,    1,    2,   49,   53,   49,   83,   56,
 /*   200 */    13,   58,   83,   59,   60,   61,   62,   63,   64,   65,
 /*   210 */    66,   67,   68,   69,   70,   78,   55,   77,   78,   79,
 /*   220 */    33,   13,  107,  108,   16,   16,  107,   35,   36,   37,
 /*   230 */    38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
 /*   240 */    48,    1,    1,    1,    4,    4,    4,    1,  111,  112,
 /*   250 */     1,   59,   60,   61,   62,   63,   64,   65,   66,   67,
 /*   260 */    68,   69,   70,   55,   55,   24,   87,   32,   14,   34,
 /*   270 */    91,   30,   26,   94,   20,   35,   36,   37,   38,   39,
 /*   280 */    40,   41,   42,   43,   44,   45,   46,   47,   48,    1,
 /*   290 */    49,   49,   33,   15,   32,   49,   34,   15,   49,   59,
 /*   300 */    60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
 /*   310 */    70,   26,   53,   25,   53,   33,   57,   56,   33,   13,
 /*   320 */   102,  103,   16,   35,   36,   37,   38,   39,   40,   41,
 /*   330 */    42,   43,   44,   45,   46,   47,   48,    1,   16,   79,
 /*   340 */     4,   81,   13,   16,   89,   16,   90,   59,   60,   61,
 /*   350 */    62,   63,   64,   65,   66,   67,   68,   69,   70,  104,
 /*   360 */   104,   13,   13,   91,   16,   16,   94,   74,   75,    1,
 /*   370 */     2,   35,   36,   37,   38,   39,   40,   41,   42,   43,
 /*   380 */    44,   45,   46,   47,   48,   84,   24,   91,   50,   78,
 /*   390 */    94,   34,   30,   14,   93,   59,   60,   61,   62,   63,
 /*   400 */    64,   65,   66,   67,   68,   69,   70,    1,  107,   20,
 /*   410 */    78,   83,   84,   13,   82,   21,   16,   85,   86,   89,
 /*   420 */    53,   93,   89,  112,   24,   19,   94,   95,   96,   14,
 /*   430 */    30,   99,  100,  101,  104,  107,   31,  104,  106,   31,
 /*   440 */    15,   35,   36,   37,   38,   39,   40,   41,   42,   43,
 /*   450 */    44,   45,   46,   47,   48,    1,   16,   33,   57,    4,
 /*   460 */    16,   33,   89,   89,    2,   59,   60,   61,   62,   63,
 /*   470 */    64,   65,   66,   67,   68,   69,   70,  104,  104,   84,
 /*   480 */    15,   93,   16,   15,    3,  102,  104,   15,   93,   35,
 /*   490 */    36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
 /*   500 */    46,   47,   48,    1,  105,   16,    4,   16,    2,   24,
 /*   510 */    11,   57,   89,   59,   60,   61,   62,   63,   64,   65,
 /*   520 */    66,   67,   68,   69,   70,   80,   84,  104,  102,   88,
 /*   530 */   113,   88,  113,  113,  113,   93,  113,   35,   36,   37,
 /*   540 */    38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
 /*   550 */    48,    1,  113,  113,  113,  113,  113,  113,   89,   89,
 /*   560 */    89,   59,   60,   61,   62,   63,   64,   65,   66,   67,
 /*   570 */    68,   69,   70,  104,  104,  104,  113,  113,  113,  113,
 /*   580 */   113,  113,  113,  113,   34,   35,   36,   37,   38,   39,
 /*   590 */    40,   41,   42,   43,   44,   45,   46,   47,   48,    1,
 /*   600 */   113,  113,  113,  113,  113,  113,  113,  113,  113,   59,
 /*   610 */    60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
 /*   620 */    70,  113,  113,  113,  113,  113,  113,  113,  113,  113,
 /*   630 */   113,  113,   34,   35,   36,   37,   38,   39,   40,   41,
 /*   640 */    42,   43,   44,   45,   46,   47,   48,    1,  113,  113,
 /*   650 */   113,  113,  113,  113,  113,  113,  113,   59,   60,   61,
 /*   660 */    62,   63,   64,   65,   66,   67,   68,   69,   70,  113,
 /*   670 */   113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
 /*   680 */   113,   35,   36,   37,   38,   39,   40,   41,   42,   43,
 /*   690 */    44,   45,   46,   47,   48,  113,  113,  113,  113,  113,
 /*   700 */   113,  113,  113,  113,  113,   59,   60,   61,   62,   63,
 /*   710 */    64,   65,   66,   67,   68,   69,   70,   35,   36,   37,
 /*   720 */    38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
 /*   730 */    48,  113,  113,  113,  113,  113,  113,  113,  113,  113,
 /*   740 */   113,   59,   60,   61,   62,   63,   64,   65,   66,   67,
 /*   750 */    68,   69,   70,  113,    4,   13,    4,   15,   16,   17,
 /*   760 */    18,  113,  113,  113,   14,   23,   14,  113,  113,   27,
 /*   770 */    28,   29,   20,   31,   24,   33,   83,   84,   36,   84,
 /*   780 */    30,  113,  113,   33,  113,  113,   93,   13,   93,   15,
 /*   790 */    16,   17,   18,   51,   52,   53,   54,   23,   56,  104,
 /*   800 */   107,   27,  113,   29,  113,   31,  113,   33,  113,  113,
 /*   810 */    36,   84,  113,   71,  113,  113,  113,  113,  113,   13,
 /*   820 */    93,   15,   16,   17,   18,   51,   52,   53,   54,   23,
 /*   830 */    56,   57,   84,   27,  107,   29,  113,   31,  113,   33,
 /*   840 */   113,   93,   36,  113,  113,   71,  113,  113,  113,  113,
 /*   850 */   113,   13,  104,   15,   16,   17,   18,   51,   52,   53,
 /*   860 */    54,   23,   56,  113,   84,   27,  113,   29,  113,   31,
 /*   870 */   113,   33,  113,   93,   36,  113,  113,   71,  113,  113,
 /*   880 */   113,  113,  113,   13,  104,   15,   16,   17,   18,   51,
 /*   890 */    52,   53,   54,   23,   56,  113,  113,   27,  113,   29,
 /*   900 */   113,   31,  113,   33,  113,  113,   36,   84,  113,   71,
 /*   910 */   113,  113,  113,  113,  113,   13,   93,   15,   16,   17,
 /*   920 */    18,   51,   52,   53,   54,   23,   56,  104,  113,   27,
 /*   930 */   113,   29,  113,   31,  113,   33,  113,  113,   36,  113,
 /*   940 */   113,   71,  113,  113,  113,  113,  113,   13,  113,   15,
 /*   950 */    16,   17,   18,   51,   52,   53,   54,   23,   56,  113,
 /*   960 */   113,   27,  113,   29,  113,   31,  113,   33,  113,  113,
 /*   970 */    36,  113,  113,   71,  113,  113,  113,  113,  113,   13,
 /*   980 */   113,   15,   16,   17,   18,   51,   52,   53,   54,   23,
 /*   990 */    56,  113,  113,   27,  113,   29,  113,   31,  113,   33,
 /*  1000 */   113,  113,   36,  113,  113,   71,  113,  113,  113,  113,
 /*  1010 */   113,   13,  113,   15,   16,   17,   18,   51,   52,   53,
 /*  1020 */    54,   23,  113,  113,  113,   27,  113,   29,  113,   31,
 /*  1030 */   113,   33,  113,  113,   36,  113,  113,   71,  113,  113,
 /*  1040 */    78,  113,  113,  113,   82,  113,  113,   85,   86,   51,
 /*  1050 */    52,   53,   54,  113,  113,  113,   94,   95,   96,  113,
 /*  1060 */    78,   99,  100,  101,   82,  113,  113,   85,   86,   71,
 /*  1070 */   113,  109,  110,  113,  113,  113,   94,   95,   96,  113,
 /*  1080 */   113,   99,  100,  101,  113,  113,  113,  113,  106,  113,
 /*  1090 */    78,  113,   13,  113,   82,   16,  113,   85,   86,  113,
 /*  1100 */   113,  113,  113,   24,  113,   26,   94,   95,   96,   30,
 /*  1110 */    78,   99,  100,  101,   82,  113,  113,   85,   86,  113,
 /*  1120 */   113,  113,  110,  113,  113,  113,   94,   95,   96,  113,
 /*  1130 */   113,   99,  100,  101,  113,   78,  113,  113,  106,   82,
 /*  1140 */   113,  113,   85,   86,  113,  113,  113,  113,  113,  113,
 /*  1150 */   113,   94,   95,   96,  113,   78,   99,  100,  101,   82,
 /*  1160 */   113,  113,   85,   86,  113,  113,  113,  113,  113,  113,
 /*  1170 */   113,   94,   95,   96,  113,  113,   99,  100,  101,  113,
 /*  1180 */   113,  113,  113,  113,  113,   78,  113,   13,  113,   82,
 /*  1190 */    16,  113,   85,   86,  113,  113,  113,  113,   24,  113,
 /*  1200 */    26,   94,   95,   96,   30,   78,   99,  100,  101,   82,
 /*  1210 */   113,  113,   85,   86,  113,  113,  113,  113,  113,  113,
 /*  1220 */   113,   94,   95,   96,  113,  113,   99,  100,  101,  113,
 /*  1230 */    78,  113,  113,  113,   82,  113,  113,   85,   86,  113,
 /*  1240 */   113,  113,  113,  113,  113,  113,   94,   95,   96,  113,
 /*  1250 */    78,   99,  100,  101,   82,  113,  113,   85,   86,  113,
 /*  1260 */   113,  113,  113,  113,  113,  113,   94,   95,   96,  113,
 /*  1270 */   113,   99,  100,  101,  113,  113,  113,  113,  113,  113,
 /*  1280 */    78,  113,  113,  113,   82,  113,  113,   85,   86,  113,
 /*  1290 */   113,  113,  113,  113,  113,  113,   94,   95,   96,  113,
 /*  1300 */    78,   99,  100,  101,   82,  113,  113,   85,   86,  113,
 /*  1310 */   113,  113,  113,  113,  113,  113,   94,   95,   96,  113,
 /*  1320 */   113,   99,  100,  101,  113,   78,  113,  113,  113,   82,
 /*  1330 */   113,  113,   85,   86,  113,  113,  113,  113,  113,  113,
 /*  1340 */   113,   94,   95,   96,  113,   78,   99,  100,  101,   82,
 /*  1350 */   113,  113,   85,   86,  113,  113,  113,  113,  113,  113,
 /*  1360 */   113,   94,   95,   96,  113,  113,   99,  100,  101,  113,
 /*  1370 */   113,  113,  113,  113,  113,   78,  113,  113,  113,   82,
 /*  1380 */   113,  113,   85,   86,  113,  113,  113,  113,  113,  113,
 /*  1390 */   113,   94,   95,   96,  113,   78,   99,  100,  101,   82,
 /*  1400 */   113,  113,   85,   86,  113,  113,  113,  113,  113,  113,
 /*  1410 */   113,   94,   95,   96,  113,  113,   99,  100,  101,  113,
 /*  1420 */    78,  113,  113,  113,   82,  113,  113,   85,   86,  113,
 /*  1430 */   113,  113,  113,  113,  113,  113,   94,   95,   96,  113,
 /*  1440 */    78,   99,  100,  101,   82,  113,  113,   85,   86,  113,
 /*  1450 */   113,  113,  113,  113,  113,  113,   94,   95,   96,  113,
 /*  1460 */   113,   99,  100,  101,  113,  113,  113,  113,  113,  113,
 /*  1470 */    78,  113,  113,  113,   82,  113,  113,   85,   86,  113,
 /*  1480 */   113,  113,  113,  113,  113,  113,   94,   95,   96,  113,
 /*  1490 */    78,   99,  100,  101,   82,  113,  113,   85,   86,  113,
 /*  1500 */   113,  113,  113,  113,  113,  113,   94,   95,   96,  113,
 /*  1510 */   113,   99,  100,  101,  113,   78,  113,  113,  113,   82,
 /*  1520 */   113,  113,   85,   86,  113,  113,  113,  113,  113,  113,
 /*  1530 */   113,   94,   95,   96,  113,   78,   99,  100,  101,   82,
 /*  1540 */   113,  113,   85,   86,  113,  113,  113,  113,  113,  113,
 /*  1550 */   113,   94,   95,   96,  113,  113,   99,  100,  101,  113,
 /*  1560 */   113,  113,  113,  113,  113,   78,  113,  113,  113,   82,
 /*  1570 */   113,  113,   85,   86,  113,  113,  113,  113,  113,  113,
 /*  1580 */   113,   94,   95,   96,  113,   78,   99,  100,  101,   82,
 /*  1590 */   113,  113,   85,   86,  113,  113,  113,  113,  113,  113,
 /*  1600 */   113,   94,   95,   96,  113,  113,   99,  100,  101,  113,
 /*  1610 */    78,  113,  113,  113,   82,  113,  113,   85,   86,  113,
 /*  1620 */   113,  113,  113,  113,  113,  113,   94,   95,   96,  113,
 /*  1630 */    78,   99,  100,  101,   82,  113,  113,   85,   86,  113,
 /*  1640 */   113,  113,  113,  113,  113,  113,   94,   95,   96,  113,
 /*  1650 */   113,   99,  100,  101,  113,  113,  113,  113,  113,  113,
 /*  1660 */    78,  113,  113,  113,   82,  113,  113,   85,   86,  113,
 /*  1670 */   113,  113,  113,  113,  113,  113,   94,   95,   96,  113,
 /*  1680 */    78,   99,  100,  101,   82,  113,  113,   85,   86,  113,
 /*  1690 */   113,  113,  113,  113,  113,  113,   94,   95,   96,  113,
 /*  1700 */   113,   99,  100,  101,  113,   78,  113,  113,  113,   82,
 /*  1710 */   113,  113,   85,   86,  113,  113,  113,  113,  113,  113,
 /*  1720 */   113,   94,   95,   96,  113,   78,   99,  100,  101,   82,
 /*  1730 */   113,  113,   85,   86,  113,  113,  113,  113,  113,  113,
 /*  1740 */   113,   94,   95,   96,  113,  113,   99,  100,  101,  113,
 /*  1750 */   113,  113,  113,  113,  113,   78,  113,  113,  113,   82,
 /*  1760 */   113,  113,   85,   86,  113,  113,  113,  113,  113,  113,
 /*  1770 */   113,   94,   95,   96,  113,   78,   99,  100,  101,   82,
 /*  1780 */   113,  113,   85,   86,  113,  113,  113,  113,  113,  113,
 /*  1790 */   113,   94,   95,   96,  113,  113,   99,  100,  101,  113,
 /*  1800 */    78,  113,  113,  113,   82,  113,  113,   85,   86,  113,
 /*  1810 */   113,  113,  113,  113,  113,  113,   94,   95,   96,  113,
 /*  1820 */    78,   99,  100,  101,   82,  113,  113,   85,   86,  113,
 /*  1830 */   113,  113,  113,  113,  113,  113,   94,   95,   96,  113,
 /*  1840 */   113,   99,  100,  101,  113,  113,  113,  113,  113,  113,
 /*  1850 */    78,  113,  113,  113,   82,  113,  113,   85,   86,  113,
 /*  1860 */   113,  113,  113,  113,  113,  113,   94,   95,   96,  113,
 /*  1870 */    78,   99,  100,  101,   82,  113,  113,   85,   86,  113,
 /*  1880 */   113,  113,  113,  113,  113,  113,   94,   95,   96,  113,
 /*  1890 */   113,   99,  100,  101,  113,   78,  113,  113,  113,   82,
 /*  1900 */   113,  113,   85,   86,  113,  113,  113,  113,  113,  113,
 /*  1910 */   113,   94,   95,   96,  113,   78,   99,  100,  101,   82,
 /*  1920 */   113,  113,   85,   86,  113,  113,  113,  113,  113,  113,
 /*  1930 */   113,   94,   95,   96,  113,  113,   99,  100,  101,  113,
 /*  1940 */   113,  113,  113,  113,  113,   78,  113,  113,  113,   82,
 /*  1950 */   113,  113,   85,   86,  113,  113,  113,  113,  113,  113,
 /*  1960 */   113,   94,   95,   96,  113,   78,   99,  100,  101,   82,
 /*  1970 */   113,  113,   85,   86,  113,  113,  113,  113,  113,  113,
 /*  1980 */   113,   94,   95,   96,  113,  113,   99,  100,  101,    6,
 /*  1990 */   113,  113,  113,  113,  113,  113,   13,  113,  113,  113,
 /*  2000 */    17,   18,  113,  113,  113,  113,   23,    6,  113,  113,
 /*  2010 */    27,  113,   29,  113,   13,  113,  113,   78,   17,   18,
 /*  2020 */   113,   82,  113,  113,   23,   86,  113,  113,   27,  113,
 /*  2030 */    29,  113,  113,   94,  113,   96,  113,  113,   99,  100,
 /*  2040 */   101,   78,  113,  113,   78,   82,  113,  113,   82,   86,
 /*  2050 */   113,  113,   86,  113,   71,   72,  113,   94,  113,   96,
 /*  2060 */    94,  113,   99,  100,  101,   99,  100,  101,  113,  113,
 /*  2070 */   113,  113,   71,   72,  113,   78,  113,  113,  113,   82,
 /*  2080 */   113,  113,  113,   86,  113,   78,  113,  113,  113,   82,
 /*  2090 */   113,   94,  113,   86,  113,  113,   99,  100,  101,  113,
 /*  2100 */   113,   94,  113,  113,  113,  113,   99,  100,  101,   78,
 /*  2110 */   113,  113,   78,   82,  113,  113,   82,   86,  113,  113,
 /*  2120 */    86,  113,  113,  113,  113,   94,  113,  113,   94,  113,
 /*  2130 */    99,  100,  101,   99,  100,  101,   78,  113,  113,   78,
 /*  2140 */    82,  113,  113,   82,   86,  113,  113,   86,  113,  113,
 /*  2150 */   113,  113,   94,  113,  113,   94,  113,   99,  100,  101,
 /*  2160 */    99,  100,  101,   83,   84,  113,  113,  113,  113,   83,
 /*  2170 */    84,  113,  113,   93,  113,   83,   84,   97,   98,   93,
 /*  2180 */   113,   83,   84,   97,   98,   93,  113,  107,  113,   97,
 /*  2190 */    98,   93,  113,  107,  113,   97,   98,   83,   84,  107,
 /*  2200 */   113,  113,  113,  113,  113,  107,  113,   93,  113,  113,
 /*  2210 */   113,   97,   98,  113,  113,  113,  113,  113,  113,  113,
 /*  2220 */   113,  107,
);
    const YY_SHIFT_USE_DFLT = -12;
    const YY_SHIFT_MAX = 215;
    static public $yy_shift_ofst = array(
 /*     0 */   481,  902,  806,  806,  902,  806,  742,  774,  742,  806,
 /*    10 */   806,  806,  806,  806,  806,  806,  838,  806,  806,  806,
 /*    20 */   806,  806,  806,  934,  806,  806,  806,  806,  806,  806,
 /*    30 */   806,  806,  806,  806,  806,  806,  806,  806,  806,  838,
 /*    40 */   806,  806,  870,  870,  998,  966,  966,  966,  966,  966,
 /*    50 */   966,   -1,   48,   96,   96,   96,   96,  598,  454,  406,
 /*    60 */   550,  502,  288,  144,  192,  336,  240,  646,  646,  646,
 /*    70 */   646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
 /*    80 */   646,  646,  646,  646,  646,  646,  646,  682,  682,    1,
 /*    90 */    97,  241,    1, 2001, 1079, 1174,   52,  400,   52,  400,
 /*   100 */    49,  282,  368, 1983,   50,  146,  148,  109,   21,  246,
 /*   110 */   242,  143,  306,  306,  329,  362,  348,  306,  349,  306,
 /*   120 */   249,  306,  306,  282,  306,  282,   -3,  306,   11,   11,
 /*   130 */    11,   11,   11,   11,   11,   11,   11,  -12,  155,  161,
 /*   140 */   208,  138,   -3,   -3,   -3,   -3,   -3,   -3,   -3,   -3,
 /*   150 */    -3,   -3,   -3,  306,   -3,  261,   -3,   -3,   -3,  261,
 /*   160 */    -3,   11,   11,  499,  506,   11,  485,  485,  506,   11,
 /*   170 */   -12,  -12,  -12,  750,  -11,  752,  259,  187,   -6,  285,
 /*   180 */   141,   20,  235,  254,  114,  262,  209,  142,   13,  472,
 /*   190 */   462,  428,  444,  401,  455,  278,  466,  491,  489,  424,
 /*   200 */   468,  424,  440,  379,  357,  327,  338,  322,  389,  394,
 /*   210 */   425,  408,  405,  367,  465,  415,
);
    const YY_REDUCE_USE_DFLT = -86;
    const YY_REDUCE_MAX = 172;
    static public $yy_reduce_ofst = array(
 /*     0 */   293,  962, 1032,  982, 1012,  332, 1247, 1172, 1202, 1107,
 /*    10 */  1077, 1267, 1057, 1222, 1127, 1297, 1152, 1867, 1507, 1532,
 /*    20 */  1552, 1582, 1487, 1457, 1362, 1342, 1392, 1412, 1437, 1602,
 /*    30 */  1627, 1792, 1817, 1837, 1887, 1772, 1742, 1647, 1677, 1697,
 /*    40 */  1722, 1317, 1963, 1939, 2061, 2007, 2031, 1997, 1966, 2034,
 /*    50 */  2058, 2080, 2092, 2114, 2098, 2080, 2086,  -82,  -82,  -82,
 /*    60 */   -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82,
 /*    70 */   -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82,
 /*    80 */   -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82,   26,
 /*    90 */   693,  328,  140,  137,  748,  695,  -36,  823,  301,  780,
 /*   100 */   727,  179,  115,  311,   17,   17,   17,  256,  260,   17,
 /*   110 */    17,  218,  469,  423,  373,  395,  333,  374,  373,  255,
 /*   120 */    17,  330,  470,  296,  373,  272,  442,  471,   17,   17,
 /*   130 */    17,   17,   17,   17,  119,   17,   17,   17,  382,  382,
 /*   140 */   382,  399,  388,  388,  388,  388,  388,  388,  388,  388,
 /*   150 */   388,  388,  388,  382,  388,  383,  388,  388,  388,  426,
 /*   160 */   388,  -85,  -85,  445,  -27,  -85,  441,  443,  -27,  -85,
 /*   170 */   -37,   27,   14,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(3, ),
        /* 1 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 2 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 3 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 4 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 5 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 6 */ array(13, 15, 16, 17, 18, 23, 27, 28, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 7 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 71, ),
        /* 8 */ array(13, 15, 16, 17, 18, 23, 27, 28, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 9 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 10 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 11 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 12 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 13 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 14 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 15 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 16 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 17 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 18 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 19 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 20 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 21 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 22 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 23 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 24 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 25 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 26 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 27 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 28 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 29 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 30 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 31 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 32 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 33 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 34 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 35 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 36 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 37 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 38 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 39 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 40 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 41 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 42 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 43 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 71, ),
        /* 44 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 71, ),
        /* 45 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 71, ),
        /* 46 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 71, ),
        /* 47 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 71, ),
        /* 48 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 71, ),
        /* 49 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 71, ),
        /* 50 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 71, ),
        /* 51 */ array(1, 4, 24, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 52 */ array(1, 22, 24, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 53 */ array(1, 24, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 54 */ array(1, 24, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 55 */ array(1, 24, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 56 */ array(1, 24, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 57 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 58 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 59 */ array(1, 19, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 60 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 61 */ array(1, 4, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 62 */ array(1, 25, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 63 */ array(1, 4, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 64 */ array(1, 2, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 65 */ array(1, 4, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 66 */ array(1, 4, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 67 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 68 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 69 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 70 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 71 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 72 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 73 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 74 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 75 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 76 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 77 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 78 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 79 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 80 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 81 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 82 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 83 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 84 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 85 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 86 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 87 */ array(35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 88 */ array(35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, ),
        /* 89 */ array(5, 6, 7, 8, 9, 10, 13, 17, 18, 23, 27, 29, ),
        /* 90 */ array(1, 4, 24, 30, 33, ),
        /* 91 */ array(1, 4, 24, 30, 49, ),
        /* 92 */ array(5, 6, 7, 8, 9, 10, 13, 17, 18, 23, 27, 29, ),
        /* 93 */ array(6, 13, 17, 18, 23, 27, 29, 71, 72, ),
        /* 94 */ array(13, 16, 24, 26, 30, ),
        /* 95 */ array(13, 16, 24, 26, 30, ),
        /* 96 */ array(1, 4, 24, 30, ),
        /* 97 */ array(13, 16, 24, 30, ),
        /* 98 */ array(1, 4, 24, 30, ),
        /* 99 */ array(13, 16, 24, 30, ),
        /* 100 */ array(1, 24, 30, ),
        /* 101 */ array(15, 33, ),
        /* 102 */ array(1, 2, ),
        /* 103 */ array(6, 13, 17, 18, 23, 27, 29, 71, 72, ),
        /* 104 */ array(1, 4, 24, 25, 30, 49, ),
        /* 105 */ array(1, 4, 24, 30, 49, ),
        /* 106 */ array(1, 4, 24, 30, 49, ),
        /* 107 */ array(13, 14, 16, 20, ),
        /* 108 */ array(10, 11, 12, ),
        /* 109 */ array(1, 26, 49, ),
        /* 110 */ array(1, 4, 49, ),
        /* 111 */ array(53, 56, 58, ),
        /* 112 */ array(13, 16, ),
        /* 113 */ array(13, 16, ),
        /* 114 */ array(13, 16, ),
        /* 115 */ array(24, 30, ),
        /* 116 */ array(13, 16, ),
        /* 117 */ array(13, 16, ),
        /* 118 */ array(13, 16, ),
        /* 119 */ array(13, 16, ),
        /* 120 */ array(1, 49, ),
        /* 121 */ array(13, 16, ),
        /* 122 */ array(13, 16, ),
        /* 123 */ array(15, 33, ),
        /* 124 */ array(13, 16, ),
        /* 125 */ array(15, 33, ),
        /* 126 */ array(24, 30, ),
        /* 127 */ array(13, 16, ),
        /* 128 */ array(1, ),
        /* 129 */ array(1, ),
        /* 130 */ array(1, ),
        /* 131 */ array(1, ),
        /* 132 */ array(1, ),
        /* 133 */ array(1, ),
        /* 134 */ array(1, ),
        /* 135 */ array(1, ),
        /* 136 */ array(1, ),
        /* 137 */ array(),
        /* 138 */ array(13, 14, 16, ),
        /* 139 */ array(13, 16, 55, ),
        /* 140 */ array(13, 16, 55, ),
        /* 141 */ array(13, 15, 16, ),
        /* 142 */ array(24, 30, ),
        /* 143 */ array(24, 30, ),
        /* 144 */ array(24, 30, ),
        /* 145 */ array(24, 30, ),
        /* 146 */ array(24, 30, ),
        /* 147 */ array(24, 30, ),
        /* 148 */ array(24, 30, ),
        /* 149 */ array(24, 30, ),
        /* 150 */ array(24, 30, ),
        /* 151 */ array(24, 30, ),
        /* 152 */ array(24, 30, ),
        /* 153 */ array(13, 16, ),
        /* 154 */ array(24, 30, ),
        /* 155 */ array(53, 56, ),
        /* 156 */ array(24, 30, ),
        /* 157 */ array(24, 30, ),
        /* 158 */ array(24, 30, ),
        /* 159 */ array(53, 56, ),
        /* 160 */ array(24, 30, ),
        /* 161 */ array(1, ),
        /* 162 */ array(1, ),
        /* 163 */ array(11, ),
        /* 164 */ array(2, ),
        /* 165 */ array(1, ),
        /* 166 */ array(24, ),
        /* 167 */ array(24, ),
        /* 168 */ array(2, ),
        /* 169 */ array(1, ),
        /* 170 */ array(),
        /* 171 */ array(),
        /* 172 */ array(),
        /* 173 */ array(4, 14, 24, 30, 33, ),
        /* 174 */ array(13, 15, 16, 31, ),
        /* 175 */ array(4, 14, 20, ),
        /* 176 */ array(33, 53, 57, ),
        /* 177 */ array(13, 33, ),
        /* 178 */ array(19, 32, ),
        /* 179 */ array(26, 33, ),
        /* 180 */ array(32, 34, ),
        /* 181 */ array(32, 57, ),
        /* 182 */ array(32, 34, ),
        /* 183 */ array(14, 20, ),
        /* 184 */ array(14, 53, ),
        /* 185 */ array(32, 34, ),
        /* 186 */ array(16, 55, ),
        /* 187 */ array(4, ),
        /* 188 */ array(4, ),
        /* 189 */ array(15, ),
        /* 190 */ array(2, ),
        /* 191 */ array(33, ),
        /* 192 */ array(16, ),
        /* 193 */ array(57, ),
        /* 194 */ array(4, ),
        /* 195 */ array(15, ),
        /* 196 */ array(16, ),
        /* 197 */ array(16, ),
        /* 198 */ array(16, ),
        /* 199 */ array(33, ),
        /* 200 */ array(15, ),
        /* 201 */ array(33, ),
        /* 202 */ array(16, ),
        /* 203 */ array(14, ),
        /* 204 */ array(34, ),
        /* 205 */ array(16, ),
        /* 206 */ array(50, ),
        /* 207 */ array(16, ),
        /* 208 */ array(20, ),
        /* 209 */ array(21, ),
        /* 210 */ array(15, ),
        /* 211 */ array(31, ),
        /* 212 */ array(31, ),
        /* 213 */ array(53, ),
        /* 214 */ array(15, ),
        /* 215 */ array(14, ),
        /* 216 */ array(),
        /* 217 */ array(),
        /* 218 */ array(),
        /* 219 */ array(),
        /* 220 */ array(),
        /* 221 */ array(),
        /* 222 */ array(),
        /* 223 */ array(),
        /* 224 */ array(),
        /* 225 */ array(),
        /* 226 */ array(),
        /* 227 */ array(),
        /* 228 */ array(),
        /* 229 */ array(),
        /* 230 */ array(),
        /* 231 */ array(),
        /* 232 */ array(),
        /* 233 */ array(),
        /* 234 */ array(),
        /* 235 */ array(),
        /* 236 */ array(),
        /* 237 */ array(),
        /* 238 */ array(),
        /* 239 */ array(),
        /* 240 */ array(),
        /* 241 */ array(),
        /* 242 */ array(),
        /* 243 */ array(),
        /* 244 */ array(),
        /* 245 */ array(),
        /* 246 */ array(),
        /* 247 */ array(),
        /* 248 */ array(),
        /* 249 */ array(),
        /* 250 */ array(),
        /* 251 */ array(),
        /* 252 */ array(),
        /* 253 */ array(),
        /* 254 */ array(),
        /* 255 */ array(),
        /* 256 */ array(),
        /* 257 */ array(),
        /* 258 */ array(),
        /* 259 */ array(),
        /* 260 */ array(),
        /* 261 */ array(),
        /* 262 */ array(),
        /* 263 */ array(),
        /* 264 */ array(),
        /* 265 */ array(),
        /* 266 */ array(),
        /* 267 */ array(),
        /* 268 */ array(),
        /* 269 */ array(),
        /* 270 */ array(),
        /* 271 */ array(),
        /* 272 */ array(),
        /* 273 */ array(),
        /* 274 */ array(),
        /* 275 */ array(),
        /* 276 */ array(),
        /* 277 */ array(),
        /* 278 */ array(),
        /* 279 */ array(),
        /* 280 */ array(),
        /* 281 */ array(),
        /* 282 */ array(),
        /* 283 */ array(),
        /* 284 */ array(),
        /* 285 */ array(),
        /* 286 */ array(),
        /* 287 */ array(),
        /* 288 */ array(),
        /* 289 */ array(),
        /* 290 */ array(),
        /* 291 */ array(),
        /* 292 */ array(),
        /* 293 */ array(),
        /* 294 */ array(),
        /* 295 */ array(),
        /* 296 */ array(),
        /* 297 */ array(),
        /* 298 */ array(),
        /* 299 */ array(),
        /* 300 */ array(),
        /* 301 */ array(),
        /* 302 */ array(),
        /* 303 */ array(),
);
    static public $yy_default = array(
 /*     0 */   306,  463,  439,  439,  478,  439,  478,  478,  478,  478,
 /*    10 */   478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
 /*    20 */   478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
 /*    30 */   478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
 /*    40 */   478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
 /*    50 */   478,  478,  354,  354,  330,  354,  335,  478,  478,  478,
 /*    60 */   478,  478,  359,  478,  478,  478,  478,  359,  382,  464,
 /*    70 */   466,  374,  383,  386,  387,  379,  438,  328,  465,  377,
 /*    80 */   356,  361,  364,  437,  365,  338,  378,  390,  391,  309,
 /*    90 */   401,  367,  304,  478,  354,  354,  373,  354,  407,  354,
 /*   100 */   354,  478,  347,  478,  367,  367,  367,  478,  478,  367,
 /*   110 */   367,  408,  478,  478,  478,  354,  478,  478,  478,  478,
 /*   120 */   367,  478,  478,  478,  478,  478,  354,  478,  376,  369,
 /*   130 */   395,  389,  394,  393,  350,  371,  370,  446,  478,  417,
 /*   140 */   409,  478,  331,  332,  343,  344,  327,  325,  326,  324,
 /*   150 */   345,  341,  334,  430,  342,  413,  336,  346,  340,  412,
 /*   160 */   337,  373,  351,  320,  441,  348,  477,  477,  440,  407,
 /*   170 */   445,  445,  445,  401,  478,  392,  401,  429,  478,  401,
 /*   180 */   478,  478,  478,  392,  397,  478,  478,  478,  478,  478,
 /*   190 */   427,  427,  478,  478,  478,  478,  478,  478,  478,  388,
 /*   200 */   478,  401,  478,  427,  478,  478,  403,  478,  392,  362,
 /*   210 */   478,  478,  399,  397,  478,  478,  447,  436,  432,  403,
 /*   220 */   434,  305,  363,  435,  431,  476,  339,  433,  428,  366,
 /*   230 */   355,  307,  384,  400,  402,  368,  398,  396,  442,  443,
 /*   240 */   404,  405,  425,  411,  418,  415,  414,  406,  410,  444,
 /*   250 */   427,  313,  314,  315,  312,  311,  308,  310,  316,  317,
 /*   260 */   352,  353,  426,  322,  321,  318,  319,  419,  420,  469,
 /*   270 */   471,  474,  468,  467,  472,  349,  475,  470,  424,  422,
 /*   280 */   423,  421,  461,  460,  462,  473,  372,  448,  449,  450,
 /*   290 */   385,  381,  375,  380,  451,  452,  457,  458,  459,  456,
 /*   300 */   455,  453,  454,  416,
);
    const YYNOCODE = 114;
    const YYSTACKDEPTH = 500;
    const YYNSTATE = 304;
    const YYNRULE = 174;
    const YYERRORSYMBOL = 73;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    public static $yyFallback = array(
    );

    public $yyTraceFILE;
    public $yyTracePrompt;
    public $yyidx;                    /* Index of top element in stack */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    public $yystack = array();  /* The parser's stack */

    public $yyTokenName = array(
  '$',             'VERT',          'COLON',         'SETSTRICT',   
  'RDEL',          'COMMENT',       'TEXT',          'STRIPON',     
  'STRIPOFF',      'BLOCKSOURCE',   'LITERALSTART',  'LITERALEND',  
  'LITERAL',       'LDEL',          'EQUAL',         'DOLLAR',      
  'ID',            'LDELIF',        'LDELFOR',       'SEMICOLON',   
  'INCDEC',        'TO',            'STEP',          'LDELFOREACH', 
  'SPACE',         'AS',            'APTR',          'LDELSETFILTER',
  'SMARTYBLOCKCHILDPARENT',  'LDELSLASH',     'ATTR',          'INTEGER',     
  'COMMA',         'OPENP',         'CLOSEP',        'MATH',        
  'UNIMATH',       'ANDSYM',        'ISIN',          'ISDIVBY',     
  'ISNOTDIVBY',    'ISEVEN',        'ISNOTEVEN',     'ISEVENBY',    
  'ISNOTEVENBY',   'ISODD',         'ISNOTODD',      'ISODDBY',     
  'ISNOTODDBY',    'INSTANCEOF',    'QMARK',         'NOT',         
  'TYPECAST',      'DOT',           'SINGLEQUOTESTRING',  'AT',          
  'OPENB',         'CLOSEB',        'PTR',           'EQUALS',      
  'NOTEQUALS',     'GREATERTHAN',   'LESSTHAN',      'GREATEREQUAL',
  'LESSEQUAL',     'IDENTITY',      'NONEIDENTITY',  'MOD',         
  'LAND',          'LOR',           'LXOR',          'QUOTE',       
  'DOLLARID',      'error',         'start',         'strictmode',  
  'template',      'template_element',  'smartytag',     'literal',     
  'literal_elements',  'literal_element',  'value',         'modifierlist',
  'attributes',    'expr',          'variable',      'statements',  
  'optspace',      'varvar',        'foraction',     'statement',   
  'modparameters',  'attribute',     'variablebase',  'ternary',     
  'array',         'ifcond',        'lop',           'function',    
  'doublequoted_with_quotes',  'variableinternal',  'indexdef',      'objectelement',
  'varvarele',     'method',        'params',        'modifier',    
  'modparameter',  'arrayelements',  'arrayelement',  'doublequoted',
  'doublequotedcontent',
    );

    public static $yyRuleName = array(
 /*   0 */ "start ::= strictmode template",
 /*   1 */ "strictmode ::= SETSTRICT",
 /*   2 */ "strictmode ::=",
 /*   3 */ "template ::= template_element",
 /*   4 */ "template ::= template template_element",
 /*   5 */ "template ::=",
 /*   6 */ "template_element ::= smartytag RDEL",
 /*   7 */ "template_element ::= COMMENT",
 /*   8 */ "template_element ::= literal",
 /*   9 */ "template_element ::= TEXT",
 /*  10 */ "template_element ::= STRIPON",
 /*  11 */ "template_element ::= STRIPOFF",
 /*  12 */ "template_element ::= BLOCKSOURCE",
 /*  13 */ "literal ::= LITERALSTART LITERALEND",
 /*  14 */ "literal ::= LITERALSTART literal_elements LITERALEND",
 /*  15 */ "literal_elements ::= literal_elements literal_element",
 /*  16 */ "literal_elements ::=",
 /*  17 */ "literal_element ::= literal",
 /*  18 */ "literal_element ::= LITERAL",
 /*  19 */ "smartytag ::= LDEL value",
 /*  20 */ "smartytag ::= LDEL value modifierlist attributes",
 /*  21 */ "smartytag ::= LDEL value attributes",
 /*  22 */ "smartytag ::= LDEL expr modifierlist attributes",
 /*  23 */ "smartytag ::= LDEL expr attributes",
 /*  24 */ "smartytag ::= LDEL variable EQUAL expr",
 /*  25 */ "smartytag ::= LDEL DOLLAR ID EQUAL value",
 /*  26 */ "smartytag ::= LDEL DOLLAR ID EQUAL expr",
 /*  27 */ "smartytag ::= LDEL DOLLAR ID EQUAL expr attributes",
 /*  28 */ "smartytag ::= LDEL ID attributes",
 /*  29 */ "smartytag ::= LDEL ID",
 /*  30 */ "smartytag ::= LDEL ID modifierlist attributes",
 /*  31 */ "smartytag ::= LDELIF expr",
 /*  32 */ "smartytag ::= LDELIF expr attributes",
 /*  33 */ "smartytag ::= LDELFOR statements SEMICOLON optspace expr SEMICOLON optspace DOLLAR varvar foraction attributes",
 /*  34 */ "foraction ::= EQUAL expr",
 /*  35 */ "foraction ::= INCDEC",
 /*  36 */ "smartytag ::= LDELFOR statement TO expr attributes",
 /*  37 */ "smartytag ::= LDELFOR statement TO expr STEP expr attributes",
 /*  38 */ "smartytag ::= LDELFOREACH attributes",
 /*  39 */ "smartytag ::= LDELFOREACH SPACE value AS DOLLAR varvar attributes",
 /*  40 */ "smartytag ::= LDELFOREACH SPACE value AS DOLLAR varvar APTR DOLLAR varvar attributes",
 /*  41 */ "smartytag ::= LDELFOREACH SPACE expr AS DOLLAR varvar attributes",
 /*  42 */ "smartytag ::= LDELFOREACH SPACE expr AS DOLLAR varvar APTR DOLLAR varvar attributes",
 /*  43 */ "smartytag ::= LDELSETFILTER ID modparameters",
 /*  44 */ "smartytag ::= LDELSETFILTER ID modparameters modifierlist",
 /*  45 */ "smartytag ::= LDEL SMARTYBLOCKCHILDPARENT",
 /*  46 */ "smartytag ::= LDELSLASH ID",
 /*  47 */ "smartytag ::= LDELSLASH ID modifierlist",
 /*  48 */ "attributes ::= attributes attribute",
 /*  49 */ "attributes ::= attribute",
 /*  50 */ "attributes ::=",
 /*  51 */ "attribute ::= SPACE ID EQUAL ID",
 /*  52 */ "attribute ::= ATTR expr",
 /*  53 */ "attribute ::= ATTR value",
 /*  54 */ "attribute ::= SPACE ID",
 /*  55 */ "attribute ::= SPACE expr",
 /*  56 */ "attribute ::= SPACE value",
 /*  57 */ "attribute ::= SPACE INTEGER EQUAL expr",
 /*  58 */ "statements ::= statement",
 /*  59 */ "statements ::= statements COMMA statement",
 /*  60 */ "statement ::= DOLLAR varvar EQUAL expr",
 /*  61 */ "statement ::= variablebase EQUAL expr",
 /*  62 */ "statement ::= OPENP statement CLOSEP",
 /*  63 */ "expr ::= value",
 /*  64 */ "expr ::= ternary",
 /*  65 */ "expr ::= expr MATH value",
 /*  66 */ "expr ::= expr UNIMATH value",
 /*  67 */ "expr ::= expr ANDSYM value",
 /*  68 */ "expr ::= array",
 /*  69 */ "expr ::= expr modifierlist",
 /*  70 */ "expr ::= expr ifcond expr",
 /*  71 */ "expr ::= expr ISIN array",
 /*  72 */ "expr ::= expr ISIN value",
 /*  73 */ "expr ::= expr lop expr",
 /*  74 */ "expr ::= expr ISDIVBY expr",
 /*  75 */ "expr ::= expr ISNOTDIVBY expr",
 /*  76 */ "expr ::= expr ISEVEN",
 /*  77 */ "expr ::= expr ISNOTEVEN",
 /*  78 */ "expr ::= expr ISEVENBY expr",
 /*  79 */ "expr ::= expr ISNOTEVENBY expr",
 /*  80 */ "expr ::= expr ISODD",
 /*  81 */ "expr ::= expr ISNOTODD",
 /*  82 */ "expr ::= expr ISODDBY expr",
 /*  83 */ "expr ::= expr ISNOTODDBY expr",
 /*  84 */ "expr ::= value INSTANCEOF ID",
 /*  85 */ "expr ::= value INSTANCEOF value",
 /*  86 */ "ternary ::= OPENP expr CLOSEP QMARK DOLLAR ID COLON expr",
 /*  87 */ "ternary ::= OPENP expr CLOSEP QMARK expr COLON expr",
 /*  88 */ "value ::= variable",
 /*  89 */ "value ::= UNIMATH value",
 /*  90 */ "value ::= NOT value",
 /*  91 */ "value ::= TYPECAST value",
 /*  92 */ "value ::= variable INCDEC",
 /*  93 */ "value ::= INTEGER",
 /*  94 */ "value ::= INTEGER DOT INTEGER",
 /*  95 */ "value ::= INTEGER DOT",
 /*  96 */ "value ::= DOT INTEGER",
 /*  97 */ "value ::= ID",
 /*  98 */ "value ::= function",
 /*  99 */ "value ::= OPENP expr CLOSEP",
 /* 100 */ "value ::= SINGLEQUOTESTRING",
 /* 101 */ "value ::= doublequoted_with_quotes",
 /* 102 */ "value ::= smartytag RDEL",
 /* 103 */ "value ::= value modifierlist",
 /* 104 */ "variable ::= variableinternal",
 /* 105 */ "variablebase ::= DOLLAR varvar",
 /* 106 */ "variableinternal ::= variableinternal indexdef",
 /* 107 */ "variableinternal ::= variablebase indexdef indexdef",
 /* 108 */ "variableinternal ::= variablebase indexdef",
 /* 109 */ "variableinternal ::= variablebase",
 /* 110 */ "variableinternal ::= variableinternal objectelement",
 /* 111 */ "variableinternal ::= DOLLAR varvar AT ID",
 /* 112 */ "indexdef ::= OPENB CLOSEB",
 /* 113 */ "indexdef ::= DOT DOLLAR varvar",
 /* 114 */ "indexdef ::= DOT DOLLAR varvar AT ID",
 /* 115 */ "indexdef ::= DOT ID",
 /* 116 */ "indexdef ::= DOT INTEGER",
 /* 117 */ "indexdef ::= DOT LDEL expr RDEL",
 /* 118 */ "indexdef ::= OPENB ID CLOSEB",
 /* 119 */ "indexdef ::= OPENB ID DOT ID CLOSEB",
 /* 120 */ "indexdef ::= OPENB expr CLOSEB",
 /* 121 */ "varvar ::= varvarele",
 /* 122 */ "varvar ::= varvar varvarele",
 /* 123 */ "varvarele ::= ID",
 /* 124 */ "varvarele ::= LDEL expr RDEL",
 /* 125 */ "objectelement ::= PTR ID",
 /* 126 */ "objectelement ::= PTR DOLLAR varvar",
 /* 127 */ "objectelement ::= PTR LDEL expr RDEL",
 /* 128 */ "objectelement ::= PTR ID LDEL expr RDEL",
 /* 129 */ "objectelement ::= PTR method",
 /* 130 */ "function ::= ID OPENP params CLOSEP",
 /* 131 */ "method ::= ID OPENP params CLOSEP",
 /* 132 */ "method ::= DOLLAR ID OPENP params CLOSEP",
 /* 133 */ "params ::= params COMMA expr",
 /* 134 */ "params ::= expr",
 /* 135 */ "params ::=",
 /* 136 */ "modifierlist ::= modifierlist modifier modparameters",
 /* 137 */ "modifierlist ::= modifier modparameters",
 /* 138 */ "modifier ::= VERT AT ID",
 /* 139 */ "modifier ::= VERT ID",
 /* 140 */ "modparameters ::= modparameters modparameter",
 /* 141 */ "modparameters ::=",
 /* 142 */ "modparameter ::= COLON value",
 /* 143 */ "modparameter ::= COLON array",
 /* 144 */ "ifcond ::= EQUALS",
 /* 145 */ "ifcond ::= NOTEQUALS",
 /* 146 */ "ifcond ::= GREATERTHAN",
 /* 147 */ "ifcond ::= LESSTHAN",
 /* 148 */ "ifcond ::= GREATEREQUAL",
 /* 149 */ "ifcond ::= LESSEQUAL",
 /* 150 */ "ifcond ::= IDENTITY",
 /* 151 */ "ifcond ::= NONEIDENTITY",
 /* 152 */ "ifcond ::= MOD",
 /* 153 */ "lop ::= LAND",
 /* 154 */ "lop ::= LOR",
 /* 155 */ "lop ::= LXOR",
 /* 156 */ "array ::= OPENB arrayelements CLOSEB",
 /* 157 */ "arrayelements ::= arrayelement",
 /* 158 */ "arrayelements ::= arrayelements COMMA arrayelement",
 /* 159 */ "arrayelements ::=",
 /* 160 */ "arrayelement ::= value APTR expr",
 /* 161 */ "arrayelement ::= ID APTR expr",
 /* 162 */ "arrayelement ::= expr",
 /* 163 */ "doublequoted_with_quotes ::= QUOTE QUOTE",
 /* 164 */ "doublequoted_with_quotes ::= QUOTE doublequoted QUOTE",
 /* 165 */ "doublequoted ::= doublequoted doublequotedcontent",
 /* 166 */ "doublequoted ::= doublequotedcontent",
 /* 167 */ "doublequotedcontent ::= DOLLARID",
 /* 168 */ "doublequotedcontent ::= LDEL variable RDEL",
 /* 169 */ "doublequotedcontent ::= LDEL expr RDEL",
 /* 170 */ "doublequotedcontent ::= smartytag RDEL",
 /* 171 */ "doublequotedcontent ::= TEXT",
 /* 172 */ "optspace ::= SPACE",
 /* 173 */ "optspace ::=",
    );

    public function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count($this->yyTokenName)) {
            return $this->yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    public static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    public function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        if ($this->yyTraceFILE && $this->yyidx >= 0) {
            fwrite($this->yyTraceFILE,
                $this->yyTracePrompt . 'Popping ' . $this->yyTokenName[$yytos->major] .
                    "\n");
        }
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;

        return $yymajor;
    }

    public function __destruct()
    {
        while ($this->yystack !== Array()) {
            $this->yy_pop_parser_stack();
        }
        if (is_resource($this->yyTraceFILE)) {
            fclose($this->yyTraceFILE);
        }
    }

    public function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                $expected = array_merge($expected, self::$yyExpectedTokens[$nextstate]);
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;

                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new TP_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
    $this->yyidx = $yyidx;
    $this->yystack = $stack;

        return array_unique($expected);
    }

    public function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;

                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new TP_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token && $token !== '0') {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;

        return true;
    }

   public function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;

        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
                if ($this->yyTraceFILE) {
                    fwrite($this->yyTraceFILE, $this->yyTracePrompt . "FALLBACK " .
                        $this->yyTokenName[$iLookAhead] . " => " .
                        $this->yyTokenName[$iFallback] . "\n");
                }

                return $this->yy_find_shift_action($iFallback);
            }

            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    public function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    public function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            if ($this->yyTraceFILE) {
                fprintf($this->yyTraceFILE, "%sStack Overflow!\n", $this->yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
#line 128 "Parser.y"

    $this->internalError = true;
    $this->compiler->trigger_template_error("Stack overflow in template parser");
#line 1617 "Parser.php"

            return;
        }
        $yytos = new TP_yyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
        if ($this->yyTraceFILE && $this->yyidx > 0) {
            fprintf($this->yyTraceFILE, "%sShift %d\n", $this->yyTracePrompt,
                $yyNewState);
            fprintf($this->yyTraceFILE, "%sStack:", $this->yyTracePrompt);
            for ($i = 1; $i <= $this->yyidx; $i++) {
                fprintf($this->yyTraceFILE, " %s",
                    $this->yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite($this->yyTraceFILE,"\n");
        }
    }

    public static $yyRuleInfo = array(
  array( 'lhs' => 74, 'rhs' => 2 ),
  array( 'lhs' => 75, 'rhs' => 1 ),
  array( 'lhs' => 75, 'rhs' => 0 ),
  array( 'lhs' => 76, 'rhs' => 1 ),
  array( 'lhs' => 76, 'rhs' => 2 ),
  array( 'lhs' => 76, 'rhs' => 0 ),
  array( 'lhs' => 77, 'rhs' => 2 ),
  array( 'lhs' => 77, 'rhs' => 1 ),
  array( 'lhs' => 77, 'rhs' => 1 ),
  array( 'lhs' => 77, 'rhs' => 1 ),
  array( 'lhs' => 77, 'rhs' => 1 ),
  array( 'lhs' => 77, 'rhs' => 1 ),
  array( 'lhs' => 77, 'rhs' => 1 ),
  array( 'lhs' => 79, 'rhs' => 2 ),
  array( 'lhs' => 79, 'rhs' => 3 ),
  array( 'lhs' => 80, 'rhs' => 2 ),
  array( 'lhs' => 80, 'rhs' => 0 ),
  array( 'lhs' => 81, 'rhs' => 1 ),
  array( 'lhs' => 81, 'rhs' => 1 ),
  array( 'lhs' => 78, 'rhs' => 2 ),
  array( 'lhs' => 78, 'rhs' => 4 ),
  array( 'lhs' => 78, 'rhs' => 3 ),
  array( 'lhs' => 78, 'rhs' => 4 ),
  array( 'lhs' => 78, 'rhs' => 3 ),
  array( 'lhs' => 78, 'rhs' => 4 ),
  array( 'lhs' => 78, 'rhs' => 5 ),
  array( 'lhs' => 78, 'rhs' => 5 ),
  array( 'lhs' => 78, 'rhs' => 6 ),
  array( 'lhs' => 78, 'rhs' => 3 ),
  array( 'lhs' => 78, 'rhs' => 2 ),
  array( 'lhs' => 78, 'rhs' => 4 ),
  array( 'lhs' => 78, 'rhs' => 2 ),
  array( 'lhs' => 78, 'rhs' => 3 ),
  array( 'lhs' => 78, 'rhs' => 11 ),
  array( 'lhs' => 90, 'rhs' => 2 ),
  array( 'lhs' => 90, 'rhs' => 1 ),
  array( 'lhs' => 78, 'rhs' => 5 ),
  array( 'lhs' => 78, 'rhs' => 7 ),
  array( 'lhs' => 78, 'rhs' => 2 ),
  array( 'lhs' => 78, 'rhs' => 7 ),
  array( 'lhs' => 78, 'rhs' => 10 ),
  array( 'lhs' => 78, 'rhs' => 7 ),
  array( 'lhs' => 78, 'rhs' => 10 ),
  array( 'lhs' => 78, 'rhs' => 3 ),
  array( 'lhs' => 78, 'rhs' => 4 ),
  array( 'lhs' => 78, 'rhs' => 2 ),
  array( 'lhs' => 78, 'rhs' => 2 ),
  array( 'lhs' => 78, 'rhs' => 3 ),
  array( 'lhs' => 84, 'rhs' => 2 ),
  array( 'lhs' => 84, 'rhs' => 1 ),
  array( 'lhs' => 84, 'rhs' => 0 ),
  array( 'lhs' => 93, 'rhs' => 4 ),
  array( 'lhs' => 93, 'rhs' => 2 ),
  array( 'lhs' => 93, 'rhs' => 2 ),
  array( 'lhs' => 93, 'rhs' => 2 ),
  array( 'lhs' => 93, 'rhs' => 2 ),
  array( 'lhs' => 93, 'rhs' => 2 ),
  array( 'lhs' => 93, 'rhs' => 4 ),
  array( 'lhs' => 87, 'rhs' => 1 ),
  array( 'lhs' => 87, 'rhs' => 3 ),
  array( 'lhs' => 91, 'rhs' => 4 ),
  array( 'lhs' => 91, 'rhs' => 3 ),
  array( 'lhs' => 91, 'rhs' => 3 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 3 ),
  array( 'lhs' => 85, 'rhs' => 3 ),
  array( 'lhs' => 85, 'rhs' => 3 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 2 ),
  array( 'lhs' => 85, 'rhs' => 3 ),
  array( 'lhs' => 85, 'rhs' => 3 ),
  array( 'lhs' => 85, 'rhs' => 3 ),
  array( 'lhs' => 85, 'rhs' => 3 ),
  array( 'lhs' => 85, 'rhs' => 3 ),
  array( 'lhs' => 85, 'rhs' => 3 ),
  array( 'lhs' => 85, 'rhs' => 2 ),
  array( 'lhs' => 85, 'rhs' => 2 ),
  array( 'lhs' => 85, 'rhs' => 3 ),
  array( 'lhs' => 85, 'rhs' => 3 ),
  array( 'lhs' => 85, 'rhs' => 2 ),
  array( 'lhs' => 85, 'rhs' => 2 ),
  array( 'lhs' => 85, 'rhs' => 3 ),
  array( 'lhs' => 85, 'rhs' => 3 ),
  array( 'lhs' => 85, 'rhs' => 3 ),
  array( 'lhs' => 85, 'rhs' => 3 ),
  array( 'lhs' => 95, 'rhs' => 8 ),
  array( 'lhs' => 95, 'rhs' => 7 ),
  array( 'lhs' => 82, 'rhs' => 1 ),
  array( 'lhs' => 82, 'rhs' => 2 ),
  array( 'lhs' => 82, 'rhs' => 2 ),
  array( 'lhs' => 82, 'rhs' => 2 ),
  array( 'lhs' => 82, 'rhs' => 2 ),
  array( 'lhs' => 82, 'rhs' => 1 ),
  array( 'lhs' => 82, 'rhs' => 3 ),
  array( 'lhs' => 82, 'rhs' => 2 ),
  array( 'lhs' => 82, 'rhs' => 2 ),
  array( 'lhs' => 82, 'rhs' => 1 ),
  array( 'lhs' => 82, 'rhs' => 1 ),
  array( 'lhs' => 82, 'rhs' => 3 ),
  array( 'lhs' => 82, 'rhs' => 1 ),
  array( 'lhs' => 82, 'rhs' => 1 ),
  array( 'lhs' => 82, 'rhs' => 2 ),
  array( 'lhs' => 82, 'rhs' => 2 ),
  array( 'lhs' => 86, 'rhs' => 1 ),
  array( 'lhs' => 94, 'rhs' => 2 ),
  array( 'lhs' => 101, 'rhs' => 2 ),
  array( 'lhs' => 101, 'rhs' => 3 ),
  array( 'lhs' => 101, 'rhs' => 2 ),
  array( 'lhs' => 101, 'rhs' => 1 ),
  array( 'lhs' => 101, 'rhs' => 2 ),
  array( 'lhs' => 101, 'rhs' => 4 ),
  array( 'lhs' => 102, 'rhs' => 2 ),
  array( 'lhs' => 102, 'rhs' => 3 ),
  array( 'lhs' => 102, 'rhs' => 5 ),
  array( 'lhs' => 102, 'rhs' => 2 ),
  array( 'lhs' => 102, 'rhs' => 2 ),
  array( 'lhs' => 102, 'rhs' => 4 ),
  array( 'lhs' => 102, 'rhs' => 3 ),
  array( 'lhs' => 102, 'rhs' => 5 ),
  array( 'lhs' => 102, 'rhs' => 3 ),
  array( 'lhs' => 89, 'rhs' => 1 ),
  array( 'lhs' => 89, 'rhs' => 2 ),
  array( 'lhs' => 104, 'rhs' => 1 ),
  array( 'lhs' => 104, 'rhs' => 3 ),
  array( 'lhs' => 103, 'rhs' => 2 ),
  array( 'lhs' => 103, 'rhs' => 3 ),
  array( 'lhs' => 103, 'rhs' => 4 ),
  array( 'lhs' => 103, 'rhs' => 5 ),
  array( 'lhs' => 103, 'rhs' => 2 ),
  array( 'lhs' => 99, 'rhs' => 4 ),
  array( 'lhs' => 105, 'rhs' => 4 ),
  array( 'lhs' => 105, 'rhs' => 5 ),
  array( 'lhs' => 106, 'rhs' => 3 ),
  array( 'lhs' => 106, 'rhs' => 1 ),
  array( 'lhs' => 106, 'rhs' => 0 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 2 ),
  array( 'lhs' => 107, 'rhs' => 3 ),
  array( 'lhs' => 107, 'rhs' => 2 ),
  array( 'lhs' => 92, 'rhs' => 2 ),
  array( 'lhs' => 92, 'rhs' => 0 ),
  array( 'lhs' => 108, 'rhs' => 2 ),
  array( 'lhs' => 108, 'rhs' => 2 ),
  array( 'lhs' => 97, 'rhs' => 1 ),
  array( 'lhs' => 97, 'rhs' => 1 ),
  array( 'lhs' => 97, 'rhs' => 1 ),
  array( 'lhs' => 97, 'rhs' => 1 ),
  array( 'lhs' => 97, 'rhs' => 1 ),
  array( 'lhs' => 97, 'rhs' => 1 ),
  array( 'lhs' => 97, 'rhs' => 1 ),
  array( 'lhs' => 97, 'rhs' => 1 ),
  array( 'lhs' => 97, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 96, 'rhs' => 3 ),
  array( 'lhs' => 109, 'rhs' => 1 ),
  array( 'lhs' => 109, 'rhs' => 3 ),
  array( 'lhs' => 109, 'rhs' => 0 ),
  array( 'lhs' => 110, 'rhs' => 3 ),
  array( 'lhs' => 110, 'rhs' => 3 ),
  array( 'lhs' => 110, 'rhs' => 1 ),
  array( 'lhs' => 100, 'rhs' => 2 ),
  array( 'lhs' => 100, 'rhs' => 3 ),
  array( 'lhs' => 111, 'rhs' => 2 ),
  array( 'lhs' => 111, 'rhs' => 1 ),
  array( 'lhs' => 112, 'rhs' => 1 ),
  array( 'lhs' => 112, 'rhs' => 3 ),
  array( 'lhs' => 112, 'rhs' => 3 ),
  array( 'lhs' => 112, 'rhs' => 2 ),
  array( 'lhs' => 112, 'rhs' => 1 ),
  array( 'lhs' => 88, 'rhs' => 1 ),
  array( 'lhs' => 88, 'rhs' => 0 ),
    );

    public static $yyReduceMap = array(
        0 => 0,
        1 => 1,
        2 => 2,
        13 => 2,
        16 => 2,
        173 => 2,
        3 => 3,
        4 => 3,
        6 => 6,
        7 => 7,
        8 => 8,
        9 => 9,
        10 => 10,
        11 => 11,
        12 => 12,
        14 => 14,
        62 => 14,
        120 => 14,
        15 => 15,
        91 => 15,
        92 => 15,
        110 => 15,
        17 => 17,
        18 => 17,
        35 => 17,
        55 => 17,
        56 => 17,
        63 => 17,
        64 => 17,
        68 => 17,
        88 => 17,
        98 => 17,
        104 => 17,
        116 => 17,
        157 => 17,
        162 => 17,
        172 => 17,
        19 => 19,
        20 => 20,
        22 => 20,
        21 => 21,
        23 => 21,
        24 => 24,
        25 => 25,
        26 => 25,
        27 => 27,
        28 => 28,
        29 => 29,
        30 => 30,
        31 => 31,
        32 => 32,
        33 => 33,
        34 => 34,
        36 => 36,
        37 => 37,
        38 => 38,
        39 => 39,
        41 => 39,
        40 => 40,
        42 => 40,
        43 => 43,
        44 => 44,
        45 => 45,
        46 => 46,
        47 => 47,
        48 => 48,
        49 => 49,
        58 => 49,
        134 => 49,
        142 => 49,
        143 => 49,
        50 => 50,
        135 => 50,
        141 => 50,
        51 => 51,
        52 => 52,
        53 => 52,
        54 => 54,
        57 => 57,
        59 => 59,
        60 => 60,
        61 => 61,
        65 => 65,
        66 => 65,
        67 => 65,
        69 => 69,
        103 => 69,
        70 => 70,
        73 => 70,
        71 => 71,
        72 => 72,
        74 => 74,
        75 => 75,
        76 => 76,
        77 => 77,
        78 => 78,
        79 => 79,
        80 => 80,
        81 => 81,
        82 => 82,
        83 => 83,
        84 => 84,
        85 => 85,
        86 => 86,
        87 => 87,
        89 => 89,
        90 => 90,
        93 => 93,
        100 => 93,
        101 => 93,
        94 => 94,
        95 => 95,
        96 => 96,
        97 => 97,
        99 => 99,
        102 => 102,
        105 => 105,
        121 => 105,
        106 => 106,
        107 => 107,
        108 => 108,
        109 => 109,
        111 => 111,
        112 => 112,
        113 => 113,
        114 => 114,
        115 => 115,
        117 => 117,
        118 => 118,
        119 => 119,
        122 => 122,
        123 => 123,
        124 => 124,
        125 => 125,
        126 => 126,
        127 => 127,
        128 => 128,
        129 => 129,
        130 => 130,
        131 => 131,
        132 => 132,
        133 => 133,
        136 => 136,
        137 => 137,
        138 => 138,
        139 => 139,
        140 => 140,
        144 => 144,
        145 => 145,
        146 => 146,
        147 => 147,
        148 => 148,
        149 => 149,
        150 => 150,
        151 => 151,
        152 => 152,
        153 => 153,
        154 => 154,
        155 => 155,
        156 => 156,
        158 => 158,
        159 => 159,
        160 => 160,
        161 => 161,
        163 => 163,
        164 => 164,
        165 => 165,
        166 => 166,
        167 => 167,
        168 => 168,
        169 => 169,
        170 => 170,
        171 => 171,
    );
#line 137 "Parser.y"
    function yy_r0(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor . $this->root_buffer->to_smarty_php();
    }
#line 1994 "Parser.php"
#line 141 "Parser.y"
    function yy_r1(){
    $this->strict_mode = true;
    $this->_retvalue = "/* strict mode */\n\$_smarty_tpl->strict_mode = true;\n";
    }
#line 2000 "Parser.php"
#line 145 "Parser.y"
    function yy_r2(){
    $this->_retvalue = '';
    }
#line 2005 "Parser.php"
#line 151 "Parser.y"
    function yy_r3(){
    if ($this->yystack[$this->yyidx + 0]->minor !== null) {
        $this->current_buffer->append_subtree($this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 2012 "Parser.php"
#line 168 "Parser.y"
    function yy_r6(){
    if ($this->compiler->has_code) {
        $tmp =''; foreach ($this->compiler->prefix_code as $code) {$tmp.=$code;} $this->compiler->prefix_code=array();
        $this->_retvalue = new Helpers\Tag($this, $tmp.$this->yystack[$this->yyidx + -1]->minor);
    } else {
        $this->_retvalue = null;
    }
    $this->compiler->has_variable_string = false;
    $this->block_nesting_level = count($this->compiler->_tag_stack);
    }
#line 2024 "Parser.php"
#line 180 "Parser.y"
    function yy_r7(){
    $this->_retvalue = null;
    }
#line 2029 "Parser.php"
#line 185 "Parser.y"
    function yy_r8(){
    $this->_retvalue = new Helpers\Text($this, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2034 "Parser.php"
#line 190 "Parser.y"
    function yy_r9(){
    if ($this->strip) {
        $this->_retvalue = new Helpers\Text($this, self::stripString($this->yystack[$this->yyidx + 0]->minor));
    } else {
        $this->_retvalue = new Helpers\Text($this, $this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 2043 "Parser.php"
#line 199 "Parser.y"
    function yy_r10(){
    $this->strip++;
    }
#line 2048 "Parser.php"
#line 203 "Parser.y"
    function yy_r11(){
    if (!$this->strip) {
        $this->compiler->trigger_template_error('Unbalanced {strip} tags');
    }
    $this->strip--;
    }
#line 2056 "Parser.php"
#line 210 "Parser.y"
    function yy_r12(){
    if ($this->strip) {
        SMARTY_INTERNAL_COMPILE_BLOCK::blockSource($this->compiler, self::stripString($this->yystack[$this->yyidx + 0]->minor));
    } else {
        SMARTY_INTERNAL_COMPILE_BLOCK::blockSource($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 2065 "Parser.php"
#line 222 "Parser.y"
    function yy_r14(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 2070 "Parser.php"
#line 226 "Parser.y"
    function yy_r15(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor . $this->yystack[$this->yyidx + 0]->minor;
    }
#line 2075 "Parser.php"
#line 234 "Parser.y"
    function yy_r17(){
    $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 2080 "Parser.php"
#line 248 "Parser.y"
    function yy_r19(){
    $this->compiler->assert_no_enforced_modifiers($this->yystack[$this->yyidx + 0]->minor instanceof BrainyStaticWrapper);
    if ($this->yystack[$this->yyidx + 0]->minor instanceof BrainyStaticWrapper) {
        $this->yystack[$this->yyidx + 0]->minor = (string) $this->yystack[$this->yyidx + 0]->minor;
    }
    $this->_retvalue = $this->compiler->compileTag('private_print_expression',array(),array('value'=>$this->yystack[$this->yyidx + 0]->minor));
    }
#line 2089 "Parser.php"
#line 256 "Parser.y"
    function yy_r20(){
    $this->compiler->assert_expected_modifier($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + -2]->minor instanceof BrainyStaticWrapper);
    if ($this->yystack[$this->yyidx + -2]->minor instanceof BrainyStaticWrapper) {
        $this->yystack[$this->yyidx + -2]->minor = (string) $this->yystack[$this->yyidx + -2]->minor;
    }
    $this->_retvalue = $this->compiler->compileTag('private_print_expression',$this->yystack[$this->yyidx + 0]->minor,array('value'=>$this->yystack[$this->yyidx + -2]->minor, 'modifierlist'=>$this->yystack[$this->yyidx + -1]->minor));
    }
#line 2098 "Parser.php"
#line 264 "Parser.y"
    function yy_r21(){
    $this->compiler->assert_no_enforced_modifiers($this->yystack[$this->yyidx + -1]->minor instanceof BrainyStaticWrapper);
    if ($this->yystack[$this->yyidx + -1]->minor instanceof BrainyStaticWrapper) {
        $this->yystack[$this->yyidx + -1]->minor = (string) $this->yystack[$this->yyidx + -1]->minor;
    }
    $this->_retvalue = $this->compiler->compileTag('private_print_expression',$this->yystack[$this->yyidx + 0]->minor,array('value'=>$this->yystack[$this->yyidx + -1]->minor));
    }
#line 2107 "Parser.php"
#line 291 "Parser.y"
    function yy_r24(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor . ' = (' . $this->yystack[$this->yyidx + 0]->minor . ');';
    }
#line 2112 "Parser.php"
#line 295 "Parser.y"
    function yy_r25(){
    $this->_retvalue = $this->compiler->compileTag('assign',array(array('value'=>$this->yystack[$this->yyidx + 0]->minor),array('var'=>"'".$this->yystack[$this->yyidx + -2]->minor."'")));
    }
#line 2117 "Parser.php"
#line 303 "Parser.y"
    function yy_r27(){
    $this->compiler->assert_is_not_strict('Passing attributes in an assignment without using {assign} is not supported in strict mode', $this);
    $this->_retvalue = $this->compiler->compileTag('assign',array_merge(array(array('value'=>$this->yystack[$this->yyidx + -1]->minor),array('var'=>"'".$this->yystack[$this->yyidx + -3]->minor."'")),$this->yystack[$this->yyidx + 0]->minor));
    }
#line 2123 "Parser.php"
#line 309 "Parser.y"
    function yy_r28(){
    $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2128 "Parser.php"
#line 313 "Parser.y"
    function yy_r29(){
    $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + 0]->minor,array());
    }
#line 2133 "Parser.php"
#line 318 "Parser.y"
    function yy_r30(){
    $this->_retvalue = "ob_start();\n".$this->compiler->compileTag($this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor).'echo ';
    $this->_retvalue .= $this->compiler->compileTag('private_modifier',array(),array('modifierlist'=>$this->yystack[$this->yyidx + -1]->minor,'value'=>'ob_get_clean()')) . ";\n";
    }
#line 2139 "Parser.php"
#line 325 "Parser.y"
    function yy_r31(){
    $tag = trim(substr($this->yystack[$this->yyidx + -1]->minor,$this->lex->ldel_length));
    $this->_retvalue = $this->compiler->compileTag(($tag == 'else if')? 'elseif' : $tag,array(),array('if condition'=>$this->yystack[$this->yyidx + 0]->minor));
    }
#line 2145 "Parser.php"
#line 330 "Parser.y"
    function yy_r32(){
    $tag = trim(substr($this->yystack[$this->yyidx + -2]->minor,$this->lex->ldel_length));
    $this->_retvalue = $this->compiler->compileTag(($tag == 'else if')? 'elseif' : $tag,$this->yystack[$this->yyidx + 0]->minor,array('if condition'=>$this->yystack[$this->yyidx + -1]->minor));
    }
#line 2151 "Parser.php"
#line 336 "Parser.y"
    function yy_r33(){
    $this->_retvalue = $this->compiler->compileTag('for',array_merge($this->yystack[$this->yyidx + 0]->minor,array(array('start'=>$this->yystack[$this->yyidx + -9]->minor),array('ifexp'=>$this->yystack[$this->yyidx + -6]->minor),array('var'=>$this->yystack[$this->yyidx + -2]->minor),array('step'=>$this->yystack[$this->yyidx + -1]->minor))),1);
    }
#line 2156 "Parser.php"
#line 340 "Parser.y"
    function yy_r34(){
    $this->_retvalue = '='.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2161 "Parser.php"
#line 348 "Parser.y"
    function yy_r36(){
    $this->_retvalue = $this->compiler->compileTag('for',array_merge($this->yystack[$this->yyidx + 0]->minor,array(array('start'=>$this->yystack[$this->yyidx + -3]->minor),array('to'=>$this->yystack[$this->yyidx + -1]->minor))),0);
    }
#line 2166 "Parser.php"
#line 352 "Parser.y"
    function yy_r37(){
    $this->_retvalue = $this->compiler->compileTag('for',array_merge($this->yystack[$this->yyidx + 0]->minor,array(array('start'=>$this->yystack[$this->yyidx + -5]->minor),array('to'=>$this->yystack[$this->yyidx + -3]->minor),array('step'=>$this->yystack[$this->yyidx + -1]->minor))),0);
    }
#line 2171 "Parser.php"
#line 357 "Parser.y"
    function yy_r38(){
    $this->_retvalue = $this->compiler->compileTag('foreach',$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2176 "Parser.php"
#line 362 "Parser.y"
    function yy_r39(){
    $this->_retvalue = $this->compiler->compileTag('foreach',array_merge($this->yystack[$this->yyidx + 0]->minor,array(array('from'=>$this->yystack[$this->yyidx + -4]->minor),array('item'=>$this->yystack[$this->yyidx + -1]->minor))));
    }
#line 2181 "Parser.php"
#line 366 "Parser.y"
    function yy_r40(){
    $this->_retvalue = $this->compiler->compileTag('foreach',array_merge($this->yystack[$this->yyidx + 0]->minor,array(array('from'=>$this->yystack[$this->yyidx + -7]->minor),array('item'=>$this->yystack[$this->yyidx + -1]->minor),array('key'=>$this->yystack[$this->yyidx + -4]->minor))));
    }
#line 2186 "Parser.php"
#line 379 "Parser.y"
    function yy_r43(){
    $this->_retvalue = $this->compiler->compileTag('setfilter',array(),array('modifier_list'=>array(array_merge(array($this->yystack[$this->yyidx + -1]->minor),$this->yystack[$this->yyidx + 0]->minor))));
    }
#line 2191 "Parser.php"
#line 383 "Parser.y"
    function yy_r44(){
    $this->_retvalue = $this->compiler->compileTag('setfilter',array(),array('modifier_list'=>array_merge(array(array_merge(array($this->yystack[$this->yyidx + -2]->minor),$this->yystack[$this->yyidx + -1]->minor)),$this->yystack[$this->yyidx + 0]->minor)));
    }
#line 2196 "Parser.php"
#line 388 "Parser.y"
    function yy_r45(){
    $j = strrpos($this->yystack[$this->yyidx + 0]->minor,'.');
    if ($this->yystack[$this->yyidx + 0]->minor[$j+1] == 'c') {
        // {$smarty.block.child}
        $this->_retvalue = SMARTY_INTERNAL_COMPILE_BLOCK::compileChildBlock($this->compiler);
    } else {
        // {$smarty.block.parent}
        $this->_retvalue = SMARTY_INTERNAL_COMPILE_BLOCK::compileParentBlock($this->compiler);
    }
    }
#line 2208 "Parser.php"
#line 401 "Parser.y"
    function yy_r46(){
    $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + 0]->minor.'close',array());
    }
#line 2213 "Parser.php"
#line 405 "Parser.y"
    function yy_r47(){
    $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -1]->minor.'close',array(),array('modifier_list'=>$this->yystack[$this->yyidx + 0]->minor));
    }
#line 2218 "Parser.php"
#line 413 "Parser.y"
    function yy_r48(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    $this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 2224 "Parser.php"
#line 419 "Parser.y"
    function yy_r49(){
    $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2229 "Parser.php"
#line 424 "Parser.y"
    function yy_r50(){
    $this->_retvalue = array();
    }
#line 2234 "Parser.php"
#line 429 "Parser.y"
    function yy_r51(){
    if (preg_match('~^true$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>'true');
    } elseif (preg_match('~^false$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>'false');
    } elseif (preg_match('~^null$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>'null');
    } else {
        $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>"'".$this->yystack[$this->yyidx + 0]->minor."'");
    }
    }
#line 2247 "Parser.php"
#line 441 "Parser.y"
    function yy_r52(){
    $this->_retvalue = array(trim($this->yystack[$this->yyidx + -1]->minor," =\n\r\t")=>$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2252 "Parser.php"
#line 449 "Parser.y"
    function yy_r54(){
    $this->_retvalue = "'".$this->yystack[$this->yyidx + 0]->minor."'";
    }
#line 2257 "Parser.php"
#line 461 "Parser.y"
    function yy_r57(){
    $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2262 "Parser.php"
#line 474 "Parser.y"
    function yy_r59(){
    $this->yystack[$this->yyidx + -2]->minor[]=$this->yystack[$this->yyidx + 0]->minor;
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor;
    }
#line 2268 "Parser.php"
#line 479 "Parser.y"
    function yy_r60(){
    $this->compiler->assert_is_not_strict('Variable variable assignment is not supported in strict mode', $this);
    $this->_retvalue = array('var' => $this->yystack[$this->yyidx + -2]->minor, 'value'=>$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2274 "Parser.php"
#line 484 "Parser.y"
    function yy_r61(){
    $this->_retvalue = array('var' => $this->yystack[$this->yyidx + -2]->minor, 'value'=>$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2279 "Parser.php"
#line 508 "Parser.y"
    function yy_r65(){
    $this->_retvalue = BrainyStaticWrapper::static_if_all($this->yystack[$this->yyidx + -2]->minor . trim($this->yystack[$this->yyidx + -1]->minor) . $this->yystack[$this->yyidx + 0]->minor, array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 2284 "Parser.php"
#line 527 "Parser.y"
    function yy_r69(){
    $this->_retvalue = $this->compiler->compileTag('private_modifier',array(),array('value'=>$this->yystack[$this->yyidx + -1]->minor,'modifierlist'=>$this->yystack[$this->yyidx + 0]->minor));
    }
#line 2289 "Parser.php"
#line 533 "Parser.y"
    function yy_r70(){
    $this->_retvalue = new BrainyStaticWrapper($this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2294 "Parser.php"
#line 537 "Parser.y"
    function yy_r71(){
    $this->_retvalue = new BrainyStaticWrapper('in_array('.$this->yystack[$this->yyidx + -2]->minor.','.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2299 "Parser.php"
#line 541 "Parser.y"
    function yy_r72(){
    $this->_retvalue = new BrainyStaticWrapper('in_array('.$this->yystack[$this->yyidx + -2]->minor.',(array)'.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2304 "Parser.php"
#line 549 "Parser.y"
    function yy_r74(){
    $this->_retvalue = new BrainyStaticWrapper('!('.$this->yystack[$this->yyidx + -2]->minor.' % '.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2309 "Parser.php"
#line 553 "Parser.y"
    function yy_r75(){
    $this->compiler->assert_is_not_strict('`is not div by` is not supported in strict mode', $this);
    $this->_retvalue = new BrainyStaticWrapper('('.$this->yystack[$this->yyidx + -2]->minor.' % '.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2315 "Parser.php"
#line 558 "Parser.y"
    function yy_r76(){
    $this->_retvalue = new BrainyStaticWrapper('!(1 & '.$this->yystack[$this->yyidx + -1]->minor.')');
    }
#line 2320 "Parser.php"
#line 562 "Parser.y"
    function yy_r77(){
    $this->compiler->assert_is_not_strict('`is not even` is not supported in strict mode', $this);
    $this->_retvalue = new BrainyStaticWrapper('(1 & '.$this->yystack[$this->yyidx + -1]->minor.')');
    }
#line 2326 "Parser.php"
#line 567 "Parser.y"
    function yy_r78(){
    $this->compiler->assert_is_not_strict('`is even by` is not supported in strict mode', $this);
    $this->_retvalue = new BrainyStaticWrapper('!(1 & '.$this->yystack[$this->yyidx + -2]->minor.' / '.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2332 "Parser.php"
#line 572 "Parser.y"
    function yy_r79(){
    $this->compiler->assert_is_not_strict('`is not even by` is not supported in strict mode', $this);
    $this->_retvalue = new BrainyStaticWrapper('(1 & '.$this->yystack[$this->yyidx + -2]->minor.' / '.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2338 "Parser.php"
#line 577 "Parser.y"
    function yy_r80(){
    $this->_retvalue = new BrainyStaticWrapper('(1 & '.$this->yystack[$this->yyidx + -1]->minor.')');
    }
#line 2343 "Parser.php"
#line 581 "Parser.y"
    function yy_r81(){
    $this->compiler->assert_is_not_strict('`is not odd` is not supported in strict mode', $this);
    $this->_retvalue = new BrainyStaticWrapper('!(1 & '.$this->yystack[$this->yyidx + -1]->minor.')');
    }
#line 2349 "Parser.php"
#line 586 "Parser.y"
    function yy_r82(){
    $this->compiler->assert_is_not_strict('`is odd by` is not supported in strict mode', $this);
    $this->_retvalue = new BrainyStaticWrapper('(1 & '.$this->yystack[$this->yyidx + -2]->minor.' / '.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2355 "Parser.php"
#line 591 "Parser.y"
    function yy_r83(){
    $this->compiler->assert_is_not_strict('`is not odd by` is not supported in strict mode', $this);
    $this->_retvalue = new BrainyStaticWrapper('!(1 & '.$this->yystack[$this->yyidx + -2]->minor.' / '.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2361 "Parser.php"
#line 596 "Parser.y"
    function yy_r84(){
    $this->compiler->assert_is_not_strict('`instanceof` is not supported in strict mode', $this);
    $this->_retvalue = new BrainyStaticWrapper($this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2367 "Parser.php"
#line 601 "Parser.y"
    function yy_r85(){
    $this->compiler->assert_is_not_strict('`instanceof` is not supported in strict mode', $this);
    self::$prefix_number++;
    $this->compiler->prefix_code[] = '$_tmp'.self::$prefix_number.'='.$this->yystack[$this->yyidx + 0]->minor.";\n";
    $this->_retvalue = new BrainyStaticWrapper($this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.'$_tmp'.self::$prefix_number);
    }
#line 2375 "Parser.php"
#line 611 "Parser.y"
    function yy_r86(){
    $this->_retvalue = $this->yystack[$this->yyidx + -6]->minor.' ? '. $this->compileVariable("'".$this->yystack[$this->yyidx + -2]->minor."'") . ' : '.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2380 "Parser.php"
#line 615 "Parser.y"
    function yy_r87(){
    $this->_retvalue = $this->yystack[$this->yyidx + -5]->minor.' ? '.$this->yystack[$this->yyidx + -2]->minor.' : '.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2385 "Parser.php"
#line 625 "Parser.y"
    function yy_r89(){
    $this->_retvalue = BrainyStaticWrapper::static_concat($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2390 "Parser.php"
#line 630 "Parser.y"
    function yy_r90(){
    $this->_retvalue = BrainyStaticWrapper::static_concat('!', $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2395 "Parser.php"
#line 643 "Parser.y"
    function yy_r93(){
    $this->_retvalue = new BrainyStaticWrapper($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2400 "Parser.php"
#line 647 "Parser.y"
    function yy_r94(){
    $this->_retvalue = new BrainyStaticWrapper($this->yystack[$this->yyidx + -2]->minor.'.'.$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2405 "Parser.php"
#line 651 "Parser.y"
    function yy_r95(){
    $this->_retvalue = new BrainyStaticWrapper($this->yystack[$this->yyidx + -1]->minor.'.');
    }
#line 2410 "Parser.php"
#line 655 "Parser.y"
    function yy_r96(){
    $this->_retvalue = new BrainyStaticWrapper('.'.$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2415 "Parser.php"
#line 660 "Parser.y"
    function yy_r97(){
    if (preg_match('~^true$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = new BrainyStaticWrapper('true');
    } elseif (preg_match('~^false$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = new BrainyStaticWrapper('false');
    } elseif (preg_match('~^null$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = new BrainyStaticWrapper('null');
    } else {
        $this->_retvalue = new BrainyStaticWrapper(var_export($this->yystack[$this->yyidx + 0]->minor, true));
    }
    }
#line 2428 "Parser.php"
#line 678 "Parser.y"
    function yy_r99(){
    $this->_retvalue = BrainyStaticWrapper::static_if_all("(". $this->yystack[$this->yyidx + -1]->minor .")", array($this->yystack[$this->yyidx + -1]->minor));
    }
#line 2433 "Parser.php"
#line 694 "Parser.y"
    function yy_r102(){
    self::$prefix_number++;
    $this->compiler->prefix_code[] = 'ob_start();'.$this->yystack[$this->yyidx + -1]->minor.'$_tmp'.self::$prefix_number.'=ob_get_clean();';
    $this->_retvalue = '$_tmp'.self::$prefix_number;
    }
#line 2440 "Parser.php"
#line 713 "Parser.y"
    function yy_r105(){
    $this->compiler->assert_is_not_strict('Variable variables are not supported in strict mode', $this);
    $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 2446 "Parser.php"
#line 718 "Parser.y"
    function yy_r106(){
    if ($this->yystack[$this->yyidx + 0]->minor === '[]') {
        $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor . $this->yystack[$this->yyidx + 0]->minor;
    } else {
        $this->_retvalue = $this->compileSafeLookupWithBase($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 2455 "Parser.php"
#line 727 "Parser.y"
    function yy_r107(){
    if ($this->yystack[$this->yyidx + -2]->minor == '\'smarty\'') {
        $this->_retvalue = $this->compiler->compileTag('private_special_variable', array(), $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    } else {
        $this->_retvalue = $this->compileSafeLookupWithBase($this->compileVariable($this->yystack[$this->yyidx + -2]->minor), $this->yystack[$this->yyidx + -1]->minor);
        $this->_retvalue = $this->compileSafeLookupWithBase($this->_retvalue, $this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 2465 "Parser.php"
#line 736 "Parser.y"
    function yy_r108(){
    if ($this->yystack[$this->yyidx + -1]->minor == '\'smarty\'') {
        $this->_retvalue = $this->compiler->compileTag('private_special_variable', array(), $this->yystack[$this->yyidx + 0]->minor);
    } elseif ($this->yystack[$this->yyidx + 0]->minor === '[]') {
        $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + -1]->minor) . $this->yystack[$this->yyidx + 0]->minor;
    } else {
        $this->_retvalue = $this->compileSafeLookupWithBase($this->compileVariable($this->yystack[$this->yyidx + -1]->minor), $this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 2476 "Parser.php"
#line 746 "Parser.y"
    function yy_r109(){
    $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2481 "Parser.php"
#line 754 "Parser.y"
    function yy_r111(){
    $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2486 "Parser.php"
#line 758 "Parser.y"
    function yy_r112(){
    $this->_retvalue = '[]';
    }
#line 2491 "Parser.php"
#line 764 "Parser.y"
    function yy_r113(){
    $this->compiler->assert_is_not_strict('Variable indicies with dot syntax is not supported in strict mode', $this);
    $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2497 "Parser.php"
#line 769 "Parser.y"
    function yy_r114(){
    $this->compiler->assert_is_not_strict('Variable indicies with dot syntax is not supported in strict mode', $this);
    $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + -2]->minor).'->'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2503 "Parser.php"
#line 774 "Parser.y"
    function yy_r115(){
    $this->_retvalue = "'". $this->yystack[$this->yyidx + 0]->minor ."'";
    }
#line 2508 "Parser.php"
#line 782 "Parser.y"
    function yy_r117(){
    $this->compiler->assert_is_not_strict('Dot syntax with expressions is not supported in strict mode', $this);
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 2514 "Parser.php"
#line 788 "Parser.y"
    function yy_r118(){
    $this->compiler->assert_is_not_strict('Section tags are not supported in strict mode', $this);
    $this->_retvalue = $this->compiler->compileTag('private_special_variable', array(), '\'section\'', '\'' . $this->yystack[$this->yyidx + -1]->minor . '\'') . '[\'index\']';
    }
#line 2520 "Parser.php"
#line 793 "Parser.y"
    function yy_r119(){
    $this->compiler->assert_is_not_strict('Section tags are not supported in strict mode', $this);
    $this->_retvalue = $this->compiler->compileTag('private_special_variable', array(), '\'section\'', '\'' . $this->yystack[$this->yyidx + -3]->minor . '\']') . '[\''.$this->yystack[$this->yyidx + -1]->minor.'\']';
    }
#line 2526 "Parser.php"
#line 812 "Parser.y"
    function yy_r122(){
    $this->compiler->assert_is_not_strict('Variable variables are not supported in strict mode', $this);
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.'.'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2532 "Parser.php"
#line 818 "Parser.y"
    function yy_r123(){
    $this->_retvalue = '\''.$this->yystack[$this->yyidx + 0]->minor.'\'';
    }
#line 2537 "Parser.php"
#line 823 "Parser.y"
    function yy_r124(){
    $this->_retvalue = '('.$this->yystack[$this->yyidx + -1]->minor.')';
    }
#line 2542 "Parser.php"
#line 832 "Parser.y"
    function yy_r125(){
    if ($this->security && substr($this->yystack[$this->yyidx + 0]->minor, 0, 1) == '_') {
        $this->compiler->trigger_template_error(self::Err1);
    }
    $this->_retvalue = '->'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2550 "Parser.php"
#line 839 "Parser.y"
    function yy_r126(){
    $this->compiler->assert_is_not_strict('Variable method calls are not supported in strict mode', $this);
    if ($this->security) {
        $this->compiler->trigger_template_error (self::Err2);
    }
    $this->_retvalue = '->{'.$this->compileVariable($this->yystack[$this->yyidx + 0]->minor).'}';
    }
#line 2559 "Parser.php"
#line 847 "Parser.y"
    function yy_r127(){
    $this->compiler->assert_is_not_strict('Variable method calls are not supported in strict mode', $this);
    if ($this->security) {
        $this->compiler->trigger_template_error (self::Err2);
    }
    $this->_retvalue = '->{'.$this->yystack[$this->yyidx + -1]->minor.'}';
    }
#line 2568 "Parser.php"
#line 855 "Parser.y"
    function yy_r128(){
    $this->compiler->assert_is_not_strict('Variable method calls are not supported in strict mode', $this);
    if ($this->security) {
        $this->compiler->trigger_template_error (self::Err2);
    }
    $this->_retvalue = '->{\''.$this->yystack[$this->yyidx + -3]->minor.'\'.'.$this->yystack[$this->yyidx + -1]->minor.'}';
    }
#line 2577 "Parser.php"
#line 864 "Parser.y"
    function yy_r129(){
    $this->_retvalue = '->'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2582 "Parser.php"
#line 872 "Parser.y"
    function yy_r130(){
    if (!$this->security || $this->smarty->security_policy->isTrustedPhpFunction($this->yystack[$this->yyidx + -3]->minor, $this->compiler)) {
        if (strcasecmp($this->yystack[$this->yyidx + -3]->minor, 'isset') === 0 || strcasecmp($this->yystack[$this->yyidx + -3]->minor, 'empty') === 0 || strcasecmp($this->yystack[$this->yyidx + -3]->minor, 'array') === 0 || is_callable($this->yystack[$this->yyidx + -3]->minor)) {
            $func_name = strtolower($this->yystack[$this->yyidx + -3]->minor);

            $is_language_construct = $func_name === 'isset' || $func_name === 'empty';
            $combined_params = array();
            foreach ($this->yystack[$this->yyidx + -1]->minor as $param) {
                if ($is_language_construct && $param instanceof BrainySafeLookupWrapper) {
                    $combined_params[] = $param->getUnsafe();
                    continue;
                }
                $combined_params[] = $param;
            }
            $par = implode(',', $combined_params);

            if ($func_name == 'isset') {
                if (count($combined_params) == 0) {
                    $this->compiler->trigger_template_error('Illegal number of paramer in "isset()"');
                }
                $isset_par=str_replace("')->value","',null,true,false)->value",$par);
                $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". $isset_par .")";

            } elseif (in_array($func_name, array('empty', 'reset', 'current', 'end', 'prev', 'next'))) {

                if ($func_name !== 'empty') {
                    $this->compiler->assert_is_not_strict($func_name . ' is not allowed in strict mode', $this);
                }

                if (count($combined_params) != 1) {
                    $this->compiler->trigger_template_error('Illegal number of paramer in "empty()"');
                }
                if ($func_name == 'empty') {
                    $this->_retvalue = $func_name.'('.str_replace("')->value","',null,true,false)->value",$combined_params[0]).')';
                } else {
                    $this->_retvalue = $func_name.'('.$combined_params[0].')';
                }
            } else {
                $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". $par .")";
            }
        } else {
            $this->compiler->trigger_template_error("unknown function \"" . $this->yystack[$this->yyidx + -3]->minor . "\"");
        }
    }
    }
#line 2629 "Parser.php"
#line 921 "Parser.y"
    function yy_r131(){
    if ($this->security && substr($this->yystack[$this->yyidx + -3]->minor,0,1) == '_') {
        $this->compiler->trigger_template_error(self::Err1);
    }
    $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". implode(',',$this->yystack[$this->yyidx + -1]->minor) .")";
    }
#line 2637 "Parser.php"
#line 928 "Parser.y"
    function yy_r132(){
    if ($this->security) {
        $this->compiler->trigger_template_error(self::Err2);
    }
    self::$prefix_number++;
    $this->compiler->prefix_code[] = '$_tmp'.self::$prefix_number.'='.$this->compileVariable("'".$this->yystack[$this->yyidx + -3]->minor."'").';';
    $this->_retvalue = '$_tmp'.self::$prefix_number.'('. implode(',',$this->yystack[$this->yyidx + -1]->minor) .')';
    }
#line 2647 "Parser.php"
#line 939 "Parser.y"
    function yy_r133(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -2]->minor,array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 2652 "Parser.php"
#line 956 "Parser.y"
    function yy_r136(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -2]->minor,array(array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor)));
    }
#line 2657 "Parser.php"
#line 960 "Parser.y"
    function yy_r137(){
    $this->_retvalue = array(array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor));
    }
#line 2662 "Parser.php"
#line 964 "Parser.y"
    function yy_r138(){
    $this->compiler->assert_is_not_strict('@ is not allowed in templates', $this);
    $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2668 "Parser.php"
#line 969 "Parser.y"
    function yy_r139(){
    $this->_retvalue =  array($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2673 "Parser.php"
#line 977 "Parser.y"
    function yy_r140(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2678 "Parser.php"
#line 997 "Parser.y"
    function yy_r144(){
    $this->_retvalue = '==';
    }
#line 2683 "Parser.php"
#line 1001 "Parser.y"
    function yy_r145(){
    $this->_retvalue = '!=';
    }
#line 2688 "Parser.php"
#line 1005 "Parser.y"
    function yy_r146(){
    $this->_retvalue = '>';
    }
#line 2693 "Parser.php"
#line 1009 "Parser.y"
    function yy_r147(){
    $this->_retvalue = '<';
    }
#line 2698 "Parser.php"
#line 1013 "Parser.y"
    function yy_r148(){
    $this->_retvalue = '>=';
    }
#line 2703 "Parser.php"
#line 1017 "Parser.y"
    function yy_r149(){
    $this->_retvalue = '<=';
    }
#line 2708 "Parser.php"
#line 1021 "Parser.y"
    function yy_r150(){
    $this->_retvalue = '===';
    }
#line 2713 "Parser.php"
#line 1025 "Parser.y"
    function yy_r151(){
    $this->_retvalue = '!==';
    }
#line 2718 "Parser.php"
#line 1029 "Parser.y"
    function yy_r152(){
    $this->_retvalue = '%';
    }
#line 2723 "Parser.php"
#line 1033 "Parser.y"
    function yy_r153(){
    $this->_retvalue = '&&';
    }
#line 2728 "Parser.php"
#line 1037 "Parser.y"
    function yy_r154(){
    $this->_retvalue = '||';
    }
#line 2733 "Parser.php"
#line 1041 "Parser.y"
    function yy_r155(){
    $this->compiler->assert_is_not_strict('XOR is not supported in strict mode', $this);
    $this->_retvalue = ' XOR ';
    }
#line 2739 "Parser.php"
#line 1049 "Parser.y"
    function yy_r156(){
    $this->_retvalue = 'array('.$this->yystack[$this->yyidx + -1]->minor.')';
    }
#line 2744 "Parser.php"
#line 1057 "Parser.y"
    function yy_r158(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.','.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2749 "Parser.php"
#line 1061 "Parser.y"
    function yy_r159(){
    return;
    }
#line 2754 "Parser.php"
#line 1065 "Parser.y"
    function yy_r160(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'=>'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2759 "Parser.php"
#line 1069 "Parser.y"
    function yy_r161(){
    $this->_retvalue = '\''.$this->yystack[$this->yyidx + -2]->minor.'\'=>'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2764 "Parser.php"
#line 1081 "Parser.y"
    function yy_r163(){
    $this->_retvalue = "''";
    }
#line 2769 "Parser.php"
#line 1085 "Parser.y"
    function yy_r164(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor->to_smarty_php();
    }
#line 2774 "Parser.php"
#line 1090 "Parser.y"
    function yy_r165(){
    $this->yystack[$this->yyidx + -1]->minor->append_subtree($this->yystack[$this->yyidx + 0]->minor);
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 2780 "Parser.php"
#line 1095 "Parser.y"
    function yy_r166(){
    $this->_retvalue = new Helpers\DoubleQuoted($this, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2785 "Parser.php"
#line 1099 "Parser.y"
    function yy_r167(){
    $this->_retvalue = new Helpers\Code($this, '(string)' . $this->compileVariable("'" . substr($this->yystack[$this->yyidx + 0]->minor,1) . "'"));
    }
#line 2790 "Parser.php"
#line 1103 "Parser.y"
    function yy_r168(){
    $this->_retvalue = new Helpers\Code($this, '(string)'.$this->yystack[$this->yyidx + -1]->minor);
    }
#line 2795 "Parser.php"
#line 1107 "Parser.y"
    function yy_r169(){
    $this->_retvalue = new Helpers\Code($this, '(string)('.$this->yystack[$this->yyidx + -1]->minor.')');
    }
#line 2800 "Parser.php"
#line 1111 "Parser.y"
    function yy_r170(){
    $this->_retvalue = new Helpers\Tag($this, $this->yystack[$this->yyidx + -1]->minor);
    }
#line 2805 "Parser.php"
#line 1115 "Parser.y"
    function yy_r171(){
    $this->_retvalue = new Helpers\DoubleQuotedContent($this, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2810 "Parser.php"

    private $_retvalue;

    public function yy_reduce($yyruleno)
    {
        $yymsp = $this->yystack[$this->yyidx];
        if ($this->yyTraceFILE && $yyruleno >= 0
              && $yyruleno < count(self::$yyRuleName)) {
            fprintf($this->yyTraceFILE, "%sReduce (%d) [%s].\n",
                $this->yyTracePrompt, $yyruleno,
                self::$yyRuleName[$yyruleno]);
        }

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for ($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            if (!$this->yyTraceFILE && $yysize) {
                $this->yyidx++;
                $x = new TP_yyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    public function yy_parse_failed()
    {
        if ($this->yyTraceFILE) {
            fprintf($this->yyTraceFILE, "%sFail!\n", $this->yyTracePrompt);
        } while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
    }

    public function yy_syntax_error($yymajor, $TOKEN)
    {
#line 121 "Parser.y"

    $this->internalError = true;
    $this->yymajor = $yymajor;
    $this->compiler->trigger_template_error();
#line 2872 "Parser.php"
    }

    public function yy_accept()
    {
        if ($this->yyTraceFILE) {
            fprintf($this->yyTraceFILE, "%sAccept!\n", $this->yyTracePrompt);
        } while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
#line 114 "Parser.y"

    $this->successful = !$this->internalError;
    $this->internalError = false;
    $this->retvalue = $this->_retvalue;
#line 2888 "Parser.php"
    }

    public function doParse($yymajor, $yytokenvalue)
    {
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */

        if ($this->yyidx === null || $this->yyidx < 0) {
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new TP_yyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);

        if ($this->yyTraceFILE) {
            fprintf($this->yyTraceFILE, "%sInput %s\n",
                $this->yyTracePrompt, $this->yyTokenName[$yymajor]);
        }

        do {
            $yyact = $this->yy_find_shift_action($yymajor);
            if ($yymajor < self::YYERRORSYMBOL &&
                  !$this->yy_is_expected_token($yymajor)) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if ($this->yyTraceFILE) {
                    fprintf($this->yyTraceFILE, "%sSyntax Error!\n",
                        $this->yyTracePrompt);
                }
                if (self::YYERRORSYMBOL) {
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit) {
                        if ($this->yyTraceFILE) {
                            fprintf($this->yyTraceFILE, "%sDiscard input token %s\n",
                                $this->yyTracePrompt, $this->yyTokenName[$yymajor]);
                        }
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0 &&
                                 $yymx != self::YYERRORSYMBOL &&
        ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                              ){
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}
