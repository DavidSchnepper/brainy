<?php
/**
 * Brainy Internal Plugin Templateparser
 *
 * This is the template parser.
 * It is generated from the Parser.y file
 * @package Brainy
 * @subpackage Compiler
 * @author Uwe Tews
 * @author Matt Basta
 */

namespace Box\Brainy\Compiler;


class TP_yyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};


#line 17 "Parser.y"
class Parser#line 16 "Parser.php"
{
#line 19 "Parser.y"

    const Err1 = "Security error: Call to private object member not allowed";
    const Err2 = "Security error: Call to dynamic object member not allowed";
    // states whether the parse was successful or not
    public $successful = true;
    public $retvalue = 0;
    public static $prefix_number = 0;
    private $lex;
    private $internalError = false;
    private $strip = 0;

    private $safe_lookups = 0;
    private $strict_mode = false;

    public function __construct($lex, $compiler) {
        $this->lex = $lex;
        $this->compiler = $compiler;
        $this->smarty = $this->compiler->smarty;
        $this->template = $this->compiler->template;
        $this->compiler->has_variable_string = false;
        $this->security = isset($this->smarty->security_policy);
        $this->block_nesting_level = 0;
        $this->current_buffer = $this->root_buffer = new Helpers\TemplateBuffer();

        $this->safe_lookups = $this->smarty->safe_lookups;
    }

    /**
     * Strips whitespace from a string
     * @param string $string
     * @return string
     */
    protected static function stripString($string) {
        // Replaces whitespace followed by a `<` with null.
        // `     \n     </foo>` -> `</foo>`
        $string = preg_replace('/\s+(?=<\/)/ims', '', $string);
        // `     \n     <foo>` -> ` <foo>`
        // `     \n     &nbsp;` -> ` &nbsp;`
        $string = preg_replace('/\s+(?=[<&])/ims', ' ', $string);
        // Replaces `>` followed by whitespace with `>`
        // `<div>\n  foo` -> `<div>foo`
        $string = preg_replace('/>\s+(?=\S)/ims', '>', $string);
        // Replaces whitespace followed by anything else with a space.
        // `            data-hello="` -> ` data-hello="`
        $string = preg_replace('/\s+(?=\w)/ims', ' ', $string);

        // Is there work to be done at the end of the string?
        if ($string !== rtrim($string)) {
            $string = rtrim($string);
            // If the last non-whitespace character is not a `>`, add a space.
            if (substr($string, -1) !== '>') {
                $string .= ' ';
            }
        }
        return $string;
    }

    /**
     * @return bool
     */
    public function isStrictMode() {
        return $this->strict_mode;
    }

    /**
     * @param string $variable The name of the variable to look up
     * @param string|void $value The member of the SmartyVariable to access
     * @return string|Wrappers\SafeLookupWrapper
     */
    public function compileVariable($variable, $value = 'value')
    {
        $unsafe = '$_smarty_tpl->tpl_vars[' . $variable . ']->' . $value;
        if ($this->safe_lookups === 0) { // Unsafe lookups
            return $unsafe;
        }
        $safe = '\Box\Brainy\Runtime\Lookups::safeVarLookup($_smarty_tpl->tpl_vars, '. $variable .', ' . $this->safe_lookups . ')->' . $value;
        return new Wrappers\SafeLookupWrapper($unsafe, $safe);
    }

    /**
     * @param string $base
     * @param string $variable
     * @return string|Wrappers\SafeLookupWrapper
     */
    public function compileSafeLookupWithBase($base, $variable)
    {
        $unsafe = $base . '[' . $variable . ']';
        if ($this->safe_lookups === 0) { // Unsafe lookups
            return $unsafe;
        }
        $safe = '\Box\Brainy\Runtime\Lookups::safeArrayLookup(' . $base . ', '. $variable .', ' . $this->safe_lookups . ')';
        return new Wrappers\SafeLookupWrapper($unsafe, $safe);
    }
#line 113 "Parser.php"

    const TP_VERT                           =  1;
    const TP_COLON                          =  2;
    const TP_SETSTRICT                      =  3;
    const TP_RDEL                           =  4;
    const TP_COMMENT                        =  5;
    const TP_TEXT                           =  6;
    const TP_STRIPON                        =  7;
    const TP_STRIPOFF                       =  8;
    const TP_BLOCKSOURCE                    =  9;
    const TP_LITERALSTART                   = 10;
    const TP_LITERALEND                     = 11;
    const TP_LITERAL                        = 12;
    const TP_LDEL                           = 13;
    const TP_EQUAL                          = 14;
    const TP_DOLLAR                         = 15;
    const TP_ID                             = 16;
    const TP_LDELIF                         = 17;
    const TP_LDELFOR                        = 18;
    const TP_SEMICOLON                      = 19;
    const TP_INCDEC                         = 20;
    const TP_TO                             = 21;
    const TP_STEP                           = 22;
    const TP_LDELFOREACH                    = 23;
    const TP_SPACE                          = 24;
    const TP_AS                             = 25;
    const TP_APTR                           = 26;
    const TP_SMARTYBLOCKCHILDPARENT         = 27;
    const TP_LDELSLASH                      = 28;
    const TP_ATTR                           = 29;
    const TP_INTEGER                        = 30;
    const TP_COMMA                          = 31;
    const TP_OPENP                          = 32;
    const TP_CLOSEP                         = 33;
    const TP_MATH                           = 34;
    const TP_UNIMATH                        = 35;
    const TP_ANDSYM                         = 36;
    const TP_ISIN                           = 37;
    const TP_ISDIVBY                        = 38;
    const TP_ISNOTDIVBY                     = 39;
    const TP_ISEVEN                         = 40;
    const TP_ISNOTEVEN                      = 41;
    const TP_ISEVENBY                       = 42;
    const TP_ISNOTEVENBY                    = 43;
    const TP_ISODD                          = 44;
    const TP_ISNOTODD                       = 45;
    const TP_ISODDBY                        = 46;
    const TP_ISNOTODDBY                     = 47;
    const TP_QMARK                          = 48;
    const TP_NOT                            = 49;
    const TP_TYPECAST                       = 50;
    const TP_DOT                            = 51;
    const TP_SINGLEQUOTESTRING              = 52;
    const TP_AT                             = 53;
    const TP_OPENB                          = 54;
    const TP_CLOSEB                         = 55;
    const TP_PTR                            = 56;
    const TP_EQUALS                         = 57;
    const TP_NOTEQUALS                      = 58;
    const TP_GREATERTHAN                    = 59;
    const TP_LESSTHAN                       = 60;
    const TP_GREATEREQUAL                   = 61;
    const TP_LESSEQUAL                      = 62;
    const TP_IDENTITY                       = 63;
    const TP_NONEIDENTITY                   = 64;
    const TP_MOD                            = 65;
    const TP_LAND                           = 66;
    const TP_LOR                            = 67;
    const TP_LXOR                           = 68;
    const TP_QUOTE                          = 69;
    const TP_DOLLARID                       = 70;
    const YY_NO_ACTION = 443;
    const YY_ACCEPT_ACTION = 442;
    const YY_ERROR_ACTION = 441;

    const YY_SZ_ACTTAB = 1689;
static public $yy_action = array(
 /*     0 */   169,  213,  210,  199,  263,  276,  159,   36,  167,    5,
 /*    10 */   257,   20,   28,   32,   98,   13,   30,   19,  220,  116,
 /*    20 */    41,   10,  267,   36,  183,   38,  169,  256,   28,  333,
 /*    30 */   159,  244,  252,   47,   50,   49,   42,   25,   24,  202,
 /*    40 */   201,   23,   16,  208,  214,   15,    8,  169,  169,  333,
 /*    50 */   178,  308,  442,   87,  333,  156,  209,  212,  205,  204,
 /*    60 */   229,  265,  264,  259,  260,  261,  262,  268,   17,   22,
 /*    70 */    36,   36,  169,  232,  231,   28,   28,  169,  164,    2,
 /*    80 */    47,   50,   49,   42,   25,   24,  202,  201,   23,   16,
 /*    90 */   208,  214,   15,    8,  169,   36,  169,  161,  169,  327,
 /*   100 */    28,  330,   21,  209,  212,  205,  204,  229,  265,  264,
 /*   110 */   259,  260,  261,  262,  268,  235,  181,  211,  179,   36,
 /*   120 */   164,  330,   13,   29,   28,  220,  330,   47,   50,   49,
 /*   130 */    42,   25,   24,  202,  201,   23,   16,  208,  214,   15,
 /*   140 */     8,  169,   38,   31,  266,   12,  169,  115,  241,  277,
 /*   150 */   209,  212,  205,  204,  229,  265,  264,  259,  260,  261,
 /*   160 */   262,  268,  238,   90,  223,  181,  211,  169,  169,   13,
 /*   170 */   333,  299,  220,  190,   47,   50,   49,   42,   25,   24,
 /*   180 */   202,  201,   23,   16,  208,  214,   15,    8,  169,  167,
 /*   190 */   333,   36,   20,  160,  134,  333,   28,  209,  212,  205,
 /*   200 */   204,  229,  265,  264,  259,  260,  261,  262,  268,  196,
 /*   210 */    39,  172,  106,  176,   11,  188,  164,  185,   26,   28,
 /*   220 */   250,   47,   50,   49,   42,   25,   24,  202,  201,   23,
 /*   230 */    16,  208,  214,   15,    8,  142,   13,    3,   13,  220,
 /*   240 */   247,  220,  237,  255,  209,  212,  205,  204,  229,  265,
 /*   250 */   264,  259,  260,  261,  262,  268,  169,  165,   14,  117,
 /*   260 */   148,    4,   80,  192,    2,  258,  257,  112,  255,  203,
 /*   270 */   153,  230,  269,   19,  163,  227,  217,  104,  198,  221,
 /*   280 */   157,  277,  216,  246,  107,  274,  174,  272,   34,   47,
 /*   290 */    50,   49,   42,   25,   24,  202,  201,   23,   16,  208,
 /*   300 */   214,   15,    8,  169,    9,   13,  197,  279,  193,  185,
 /*   310 */   133,  243,  209,  212,  205,  204,  229,  265,  264,  259,
 /*   320 */   260,  261,  262,  268,  150,  194,  152,  278,  169,  233,
 /*   330 */   231,  305,  255,  165,  255,  182,   47,   50,   49,   42,
 /*   340 */    25,   24,  202,  201,   23,   16,  208,  214,   15,    8,
 /*   350 */   169,  162,  186,  248,  185,  236,  122,  136,  147,  209,
 /*   360 */   212,  205,  204,  229,  265,  264,  259,  260,  261,  262,
 /*   370 */   268,  219,  219,   13,  277,  194,  184,    6,  240,   27,
 /*   380 */   228,  207,  218,   47,   50,   49,   42,   25,   24,  202,
 /*   390 */   201,   23,   16,  208,  214,   15,    8,  169,  200,  224,
 /*   400 */   254,    2,   37,  108,  121,  109,  209,  212,  205,  204,
 /*   410 */   229,  265,  264,  259,  260,  261,  262,  268,  221,  206,
 /*   420 */   110,   35,  124,   33,  253,  119,  222,  225,  249,  234,
 /*   430 */    47,   50,   49,   42,   25,   24,  202,  201,   23,   16,
 /*   440 */   208,  214,   15,    8,  169,  221,  105,  242,  275,   40,
 /*   450 */   140,  135,   95,  209,  212,  205,  204,  229,  265,  264,
 /*   460 */   259,  260,  261,  262,  268,  219,  219,  274,  274,  274,
 /*   470 */   274,  274,  274,  274,  274,  274,  274,   47,   50,   49,
 /*   480 */    42,   25,   24,  202,  201,   23,   16,  208,  214,   15,
 /*   490 */     8,  169,  274,  274,  239,  274,  274,  274,  102,  137,
 /*   500 */   209,  212,  205,  204,  229,  265,  264,  259,  260,  261,
 /*   510 */   262,  268,  219,  219,  274,  274,  274,  274,  274,  274,
 /*   520 */   274,  274,  274,  274,   47,   50,   49,   42,   25,   24,
 /*   530 */   202,  201,   23,   16,  208,  214,   15,    8,  169,  274,
 /*   540 */   274,  273,  274,  274,  274,   92,   91,  209,  212,  205,
 /*   550 */   204,  229,  265,  264,  259,  260,  261,  262,  268,  219,
 /*   560 */   219,  274,  274,  274,  274,  274,  274,  274,  274,  274,
 /*   570 */   274,   47,   50,   49,   42,   25,   24,  202,  201,   23,
 /*   580 */    16,  208,  214,   15,    8,  169,  274,  274,  274,  274,
 /*   590 */   274,  274,   94,  274,  209,  212,  205,  204,  229,  265,
 /*   600 */   264,  259,  260,  261,  262,  268,  219,  274,  274,  274,
 /*   610 */   274,  274,  274,  274,  274,  274,  274,  274,   47,   50,
 /*   620 */    49,   42,   25,   24,  202,  201,   23,   16,  208,  214,
 /*   630 */    15,    8,  169,  274,  274,  274,  274,  274,  274,  245,
 /*   640 */   274,  209,  212,  205,  204,  229,  265,  264,  259,  260,
 /*   650 */   261,  262,  268,  274,  274,  274,  274,  274,  274,  274,
 /*   660 */   274,  274,  274,  274,  274,   47,   50,   49,   42,   25,
 /*   670 */    24,  202,  201,   23,   16,  208,  214,   15,    8,  274,
 /*   680 */   274,  274,  274,  274,  274,  274,  274,  274,  209,  212,
 /*   690 */   205,  204,  229,  265,  264,  259,  260,  261,  262,  268,
 /*   700 */    47,   50,   49,   42,   25,   24,  202,  201,   23,   16,
 /*   710 */   208,  214,   15,    8,  151,  274,  274,  274,  274,  274,
 /*   720 */   274,  274,  255,  209,  212,  205,  204,  229,  265,  264,
 /*   730 */   259,  260,  261,  262,  268,  274,  165,  274,  274,  118,
 /*   740 */    88,   13,  274,  274,  220,  114,  195,  274,  274,   97,
 /*   750 */   143,  270,   36,  274,  191,  145,    7,   28,  255,   48,
 /*   760 */   191,  274,    7,  255,  274,   48,  274,  274,  274,  158,
 /*   770 */   114,  175,  164,   52,   51,  138,  226,  165,    1,   52,
 /*   780 */    51,  111,  226,  255,    1,  191,  274,    7,   93,  155,
 /*   790 */    48,  274,  274,  101,  221,  274,  274,  255,  274,  101,
 /*   800 */   274,   17,   22,  274,   52,   51,  274,  226,  274,    1,
 /*   810 */   274,  164,  274,  274,  117,  274,  274,   80,  192,  274,
 /*   820 */   113,  195,  274,  274,  101,  153,  230,  269,  274,  274,
 /*   830 */   227,  217,  104,  114,  195,  191,  274,    7,  156,  141,
 /*   840 */    48,  274,  271,  274,  274,  274,  274,  255,  191,  274,
 /*   850 */    18,   17,   22,   48,   52,   51,  274,  226,  274,    1,
 /*   860 */   127,  164,  274,  274,  192,  274,  274,   52,   51,  274,
 /*   870 */   226,  153,    1,  215,  101,  274,  227,  217,  104,  274,
 /*   880 */   125,  274,  274,   78,  192,  274,  274,  101,  274,  274,
 /*   890 */   274,  153,  230,  269,  274,  274,  227,  217,  104,  274,
 /*   900 */   274,  125,  274,  173,   78,  192,  331,  274,  114,  166,
 /*   910 */   274,  274,  153,  230,  269,  274,  189,  227,  217,  104,
 /*   920 */   114,  195,  149,  170,  171,    7,  331,  274,   48,  274,
 /*   930 */   255,  331,  274,   13,    2,  191,  220,   18,  274,  274,
 /*   940 */    48,  221,   52,   51,   36,  226,  180,    1,  125,   28,
 /*   950 */   274,   58,  192,  274,   52,   51,  274,  226,  274,  153,
 /*   960 */   230,  269,  101,  274,  227,  217,  104,  274,  125,  274,
 /*   970 */   274,   70,  192,  274,  101,  274,  274,  274,  274,  153,
 /*   980 */   230,  269,  274,  274,  227,  217,  104,  274,  274,  125,
 /*   990 */   274,  274,   71,  192,  274,   96,  146,  274,  274,  129,
 /*  1000 */   153,  230,  269,  192,  255,  227,  217,  104,  274,  125,
 /*  1010 */   153,  274,   55,  192,  274,  227,  217,  104,  164,  274,
 /*  1020 */   153,  230,  269,  274,  274,  227,  217,  104,  125,  139,
 /*  1030 */   274,   56,  177,  274,  274,  274,  274,  255,  130,  153,
 /*  1040 */   230,  269,  192,  274,  227,  217,  104,  125,  221,  153,
 /*  1050 */    63,  192,  274,  274,  227,  217,  104,  274,  153,  230,
 /*  1060 */   269,  274,  274,  227,  217,  104,  125,  274,  274,   67,
 /*  1070 */   192,  274,  274,  274,  274,  274,  274,  153,  230,  269,
 /*  1080 */   274,  274,  227,  217,  104,  274,  125,  274,  274,   68,
 /*  1090 */   192,  274,  274,  274,  274,  274,  128,  153,  230,  269,
 /*  1100 */   192,  274,  227,  217,  104,  274,  125,  153,  274,   84,
 /*  1110 */   192,  274,  227,  217,  104,  274,  274,  153,  230,  269,
 /*  1120 */   274,  274,  227,  217,  104,  125,  274,  274,   83,  192,
 /*  1130 */   274,  274,  274,  274,  274,  123,  153,  230,  269,  192,
 /*  1140 */   274,  227,  217,  104,  100,  274,  153,   75,  192,  274,
 /*  1150 */   274,  227,  217,  104,  274,  153,  230,  269,  274,  274,
 /*  1160 */   227,  217,  104,  125,  274,  274,   57,  192,  274,  274,
 /*  1170 */   274,  274,  274,  274,  153,  230,  269,  274,  274,  227,
 /*  1180 */   217,  104,  274,  125,  274,  274,   72,  192,  274,  274,
 /*  1190 */   274,  274,  274,  131,  153,  230,  269,  192,  274,  227,
 /*  1200 */   217,  104,  274,  125,  153,  274,   69,  192,  274,  227,
 /*  1210 */   217,  104,  274,  274,  153,  230,  269,  274,  274,  227,
 /*  1220 */   217,  104,  125,  274,  274,   64,  192,  274,  274,  274,
 /*  1230 */   274,  274,  126,  153,  230,  269,  192,  274,  227,  217,
 /*  1240 */   104,  125,  274,  153,   66,  192,  274,  274,  227,  217,
 /*  1250 */   104,  274,  153,  230,  269,  274,  274,  227,  217,  104,
 /*  1260 */   125,  274,  274,   86,  192,  274,  274,  274,  274,  274,
 /*  1270 */   274,  153,  230,  269,  274,  274,  227,  217,  104,  274,
 /*  1280 */   125,  274,  274,   60,  192,  274,  274,  274,  274,  274,
 /*  1290 */   274,  153,  230,  269,  274,  274,  227,  217,  104,  274,
 /*  1300 */   125,  274,  274,   62,  192,  274,  274,  274,  274,  274,
 /*  1310 */   274,  153,  230,  269,  274,  274,  227,  217,  104,   89,
 /*  1320 */   274,  274,   45,  168,  274,  274,  274,  274,  274,  274,
 /*  1330 */   153,  230,  269,  274,  274,  227,  217,  104,  125,  274,
 /*  1340 */   274,   46,  192,  274,  274,  274,  274,  274,  274,  153,
 /*  1350 */   230,  269,  274,  274,  227,  217,  104,   99,  274,  274,
 /*  1360 */    59,  192,  274,  274,  274,  274,  274,  274,  153,  230,
 /*  1370 */   269,  274,  274,  227,  217,  104,  274,  125,  274,  274,
 /*  1380 */    65,  192,  274,  274,  274,  274,  274,  274,  153,  230,
 /*  1390 */   269,  274,  274,  227,  217,  104,  274,  125,  274,  274,
 /*  1400 */    81,  192,  274,  274,  274,  274,  274,  274,  153,  230,
 /*  1410 */   269,  274,  274,  227,  217,  104,  125,  274,  274,   54,
 /*  1420 */   192,  274,  274,  274,  274,  274,  274,  153,  230,  269,
 /*  1430 */   274,  274,  227,  217,  104,  125,  274,  274,   53,  192,
 /*  1440 */   274,  274,  274,  274,  274,  274,  153,  230,  269,  274,
 /*  1450 */   274,  227,  217,  104,  125,  274,  274,   79,  192,  274,
 /*  1460 */   274,  274,  274,  274,  274,  153,  230,  269,  274,  274,
 /*  1470 */   227,  217,  104,  274,  125,  274,  274,   85,  192,  274,
 /*  1480 */   274,  274,  274,  274,  274,  153,  230,  269,  274,  274,
 /*  1490 */   227,  217,  104,  274,  125,  274,  274,   73,  192,  274,
 /*  1500 */   274,  274,  274,  274,  274,  153,  230,  269,  274,  274,
 /*  1510 */   227,  217,  104,  125,  274,  274,   43,  192,  274,  274,
 /*  1520 */   274,  274,  274,  274,  153,  230,  269,  274,  274,  227,
 /*  1530 */   217,  104,  125,  274,  274,   77,  192,  274,  274,  274,
 /*  1540 */   274,  274,  274,  153,  230,  269,  274,  274,  227,  217,
 /*  1550 */   104,  125,  274,  274,   61,  192,  274,  274,  274,  274,
 /*  1560 */   274,  274,  153,  230,  269,  274,  274,  227,  217,  104,
 /*  1570 */   274,  120,  274,  274,   82,  192,  274,  274,  274,  274,
 /*  1580 */   274,  274,  153,  230,  269,  274,  274,  227,  217,  104,
 /*  1590 */   274,  103,  274,  274,   74,  192,  274,  274,  274,  274,
 /*  1600 */   274,  274,  153,  230,  269,  274,  274,  227,  217,  104,
 /*  1610 */   125,  274,  274,   76,  192,  274,  274,  274,  274,  274,
 /*  1620 */   274,  153,  230,  269,  274,  274,  227,  217,  104,  125,
 /*  1630 */   274,  274,   44,  192,  274,  274,  274,  274,  274,  274,
 /*  1640 */   153,  230,  269,  274,  132,  227,  217,  104,  192,  274,
 /*  1650 */   156,  154,  274,  274,  274,  153,  274,  251,  274,  255,
 /*  1660 */   227,  217,  104,   17,   22,  156,  144,  274,  274,   13,
 /*  1670 */   274,  274,  220,  164,  255,  274,  274,  274,   17,   22,
 /*  1680 */    36,  274,  187,  274,  274,   28,  274,  274,  164,
    );
    static public $yy_lookahead = array(
 /*     0 */     1,    5,    6,    7,    8,    9,   10,   24,   51,   13,
 /*    10 */     6,   54,   29,   17,   18,   13,   14,   13,   16,   23,
 /*    20 */     2,   22,   20,   24,   28,   31,    1,   33,   29,    4,
 /*    30 */    10,   11,   12,   34,   35,   36,   37,   38,   39,   40,
 /*    40 */    41,   42,   43,   44,   45,   46,   47,    1,    1,   24,
 /*    50 */    25,    4,   72,   73,   29,   81,   57,   58,   59,   60,
 /*    60 */    61,   62,   63,   64,   65,   66,   67,   68,   94,   95,
 /*    70 */    24,   24,    1,   69,   70,   29,   29,    1,  104,   32,
 /*    80 */    34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
 /*    90 */    44,   45,   46,   47,    1,   24,    1,   81,    1,    4,
 /*   100 */    29,    4,   26,   57,   58,   59,   60,   61,   62,   63,
 /*   110 */    64,   65,   66,   67,   68,   75,   76,   77,   25,   24,
 /*   120 */   104,   24,   13,   14,   29,   16,   29,   34,   35,   36,
 /*   130 */    37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
 /*   140 */    47,    1,   31,   14,   33,   13,    1,   15,   16,   20,
 /*   150 */    57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
 /*   160 */    67,   68,   30,   74,   75,   76,   77,    1,    1,   13,
 /*   170 */     4,    4,   16,   33,   34,   35,   36,   37,   38,   39,
 /*   180 */    40,   41,   42,   43,   44,   45,   46,   47,    1,   51,
 /*   190 */    24,   24,   54,   81,   56,   29,   29,   57,   58,   59,
 /*   200 */    60,   61,   62,   63,   64,   65,   66,   67,   68,   53,
 /*   210 */    13,   85,   15,   16,   24,   89,  104,   91,   13,   29,
 /*   220 */    33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
 /*   230 */    43,   44,   45,   46,   47,   82,   13,   32,   13,   16,
 /*   240 */    77,   16,   79,   90,   57,   58,   59,   60,   61,   62,
 /*   250 */    63,   64,   65,   66,   67,   68,    1,  104,   26,   80,
 /*   260 */    82,   31,   83,   84,   32,    4,    6,   15,   90,   16,
 /*   270 */    91,   92,   93,   13,   19,   96,   97,   98,   53,  101,
 /*   280 */   105,   20,   99,  100,   32,   55,  107,  108,   14,   34,
 /*   290 */    35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
 /*   300 */    45,   46,   47,    1,    2,   13,   53,   89,   16,   91,
 /*   310 */   109,  110,   57,   58,   59,   60,   61,   62,   63,   64,
 /*   320 */    65,   66,   67,   68,   82,   51,   82,  106,    1,   69,
 /*   330 */    70,    4,   90,  104,   90,   86,   34,   35,   36,   37,
 /*   340 */    38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
 /*   350 */     1,  105,   89,    4,   91,   24,   15,   87,   87,   57,
 /*   360 */    58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
 /*   370 */    68,  101,  101,   13,   20,   51,   16,   48,   16,    2,
 /*   380 */    30,   33,   16,   34,   35,   36,   37,   38,   39,   40,
 /*   390 */    41,   42,   43,   44,   45,   46,   47,    1,    4,   16,
 /*   400 */     4,   32,   21,   15,   15,   88,   57,   58,   59,   60,
 /*   410 */    61,   62,   63,   64,   65,   66,   67,   68,  101,   16,
 /*   420 */    15,   14,   16,   14,   90,   15,    3,   99,  102,  110,
 /*   430 */    34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
 /*   440 */    44,   45,   46,   47,    1,  101,   78,    4,   11,   86,
 /*   450 */    99,   87,   87,   57,   58,   59,   60,   61,   62,   63,
 /*   460 */    64,   65,   66,   67,   68,  101,  101,  111,  111,  111,
 /*   470 */   111,  111,  111,  111,  111,  111,  111,   34,   35,   36,
 /*   480 */    37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
 /*   490 */    47,    1,  111,  111,    4,  111,  111,  111,   87,   87,
 /*   500 */    57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
 /*   510 */    67,   68,  101,  101,  111,  111,  111,  111,  111,  111,
 /*   520 */   111,  111,  111,  111,   34,   35,   36,   37,   38,   39,
 /*   530 */    40,   41,   42,   43,   44,   45,   46,   47,    1,  111,
 /*   540 */   111,    4,  111,  111,  111,   87,   87,   57,   58,   59,
 /*   550 */    60,   61,   62,   63,   64,   65,   66,   67,   68,  101,
 /*   560 */   101,  111,  111,  111,  111,  111,  111,  111,  111,  111,
 /*   570 */   111,   34,   35,   36,   37,   38,   39,   40,   41,   42,
 /*   580 */    43,   44,   45,   46,   47,    1,  111,  111,  111,  111,
 /*   590 */   111,  111,   87,  111,   57,   58,   59,   60,   61,   62,
 /*   600 */    63,   64,   65,   66,   67,   68,  101,  111,  111,  111,
 /*   610 */   111,  111,  111,  111,  111,  111,  111,  111,   34,   35,
 /*   620 */    36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
 /*   630 */    46,   47,    1,  111,  111,  111,  111,  111,  111,   55,
 /*   640 */   111,   57,   58,   59,   60,   61,   62,   63,   64,   65,
 /*   650 */    66,   67,   68,  111,  111,  111,  111,  111,  111,  111,
 /*   660 */   111,  111,  111,  111,  111,   34,   35,   36,   37,   38,
 /*   670 */    39,   40,   41,   42,   43,   44,   45,   46,   47,  111,
 /*   680 */   111,  111,  111,  111,  111,  111,  111,  111,   57,   58,
 /*   690 */    59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
 /*   700 */    34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
 /*   710 */    44,   45,   46,   47,   82,  111,  111,  111,  111,  111,
 /*   720 */   111,  111,   90,   57,   58,   59,   60,   61,   62,   63,
 /*   730 */    64,   65,   66,   67,   68,  111,  104,  111,  111,   15,
 /*   740 */    16,   13,  111,  111,   16,   15,   16,  111,  111,   81,
 /*   750 */    82,   27,   24,  111,   30,   82,   32,   29,   90,   35,
 /*   760 */    30,  111,   32,   90,  111,   35,  111,  111,  111,   19,
 /*   770 */    15,   16,  104,   49,   50,   82,   52,  104,   54,   49,
 /*   780 */    50,   31,   52,   90,   54,   30,  111,   32,   81,   82,
 /*   790 */    35,  111,  111,   69,  101,  111,  111,   90,  111,   69,
 /*   800 */   111,   94,   95,  111,   49,   50,  111,   52,  111,   54,
 /*   810 */   111,  104,  111,  111,   80,  111,  111,   83,   84,  111,
 /*   820 */    15,   16,  111,  111,   69,   91,   92,   93,  111,  111,
 /*   830 */    96,   97,   98,   15,   16,   30,  111,   32,   81,   82,
 /*   840 */    35,  111,  108,  111,  111,  111,  111,   90,   30,  111,
 /*   850 */    32,   94,   95,   35,   49,   50,  111,   52,  111,   54,
 /*   860 */    80,  104,  111,  111,   84,  111,  111,   49,   50,  111,
 /*   870 */    52,   91,   54,   93,   69,  111,   96,   97,   98,  111,
 /*   880 */    80,  111,  111,   83,   84,  111,  111,   69,  111,  111,
 /*   890 */   111,   91,   92,   93,  111,  111,   96,   97,   98,  111,
 /*   900 */   111,   80,  111,  103,   83,   84,    4,  111,   15,   16,
 /*   910 */   111,  111,   91,   92,   93,  111,   14,   96,   97,   98,
 /*   920 */    15,   16,   82,   30,  103,   32,   24,  111,   35,  111,
 /*   930 */    90,   29,  111,   13,   32,   30,   16,   32,  111,  111,
 /*   940 */    35,  101,   49,   50,   24,   52,   26,   54,   80,   29,
 /*   950 */   111,   83,   84,  111,   49,   50,  111,   52,  111,   91,
 /*   960 */    92,   93,   69,  111,   96,   97,   98,  111,   80,  111,
 /*   970 */   111,   83,   84,  111,   69,  111,  111,  111,  111,   91,
 /*   980 */    92,   93,  111,  111,   96,   97,   98,  111,  111,   80,
 /*   990 */   111,  111,   83,   84,  111,   81,   82,  111,  111,   80,
 /*  1000 */    91,   92,   93,   84,   90,   96,   97,   98,  111,   80,
 /*  1010 */    91,  111,   83,   84,  111,   96,   97,   98,  104,  111,
 /*  1020 */    91,   92,   93,  111,  111,   96,   97,   98,   80,   82,
 /*  1030 */   111,   83,   84,  111,  111,  111,  111,   90,   80,   91,
 /*  1040 */    92,   93,   84,  111,   96,   97,   98,   80,  101,   91,
 /*  1050 */    83,   84,  111,  111,   96,   97,   98,  111,   91,   92,
 /*  1060 */    93,  111,  111,   96,   97,   98,   80,  111,  111,   83,
 /*  1070 */    84,  111,  111,  111,  111,  111,  111,   91,   92,   93,
 /*  1080 */   111,  111,   96,   97,   98,  111,   80,  111,  111,   83,
 /*  1090 */    84,  111,  111,  111,  111,  111,   80,   91,   92,   93,
 /*  1100 */    84,  111,   96,   97,   98,  111,   80,   91,  111,   83,
 /*  1110 */    84,  111,   96,   97,   98,  111,  111,   91,   92,   93,
 /*  1120 */   111,  111,   96,   97,   98,   80,  111,  111,   83,   84,
 /*  1130 */   111,  111,  111,  111,  111,   80,   91,   92,   93,   84,
 /*  1140 */   111,   96,   97,   98,   80,  111,   91,   83,   84,  111,
 /*  1150 */   111,   96,   97,   98,  111,   91,   92,   93,  111,  111,
 /*  1160 */    96,   97,   98,   80,  111,  111,   83,   84,  111,  111,
 /*  1170 */   111,  111,  111,  111,   91,   92,   93,  111,  111,   96,
 /*  1180 */    97,   98,  111,   80,  111,  111,   83,   84,  111,  111,
 /*  1190 */   111,  111,  111,   80,   91,   92,   93,   84,  111,   96,
 /*  1200 */    97,   98,  111,   80,   91,  111,   83,   84,  111,   96,
 /*  1210 */    97,   98,  111,  111,   91,   92,   93,  111,  111,   96,
 /*  1220 */    97,   98,   80,  111,  111,   83,   84,  111,  111,  111,
 /*  1230 */   111,  111,   80,   91,   92,   93,   84,  111,   96,   97,
 /*  1240 */    98,   80,  111,   91,   83,   84,  111,  111,   96,   97,
 /*  1250 */    98,  111,   91,   92,   93,  111,  111,   96,   97,   98,
 /*  1260 */    80,  111,  111,   83,   84,  111,  111,  111,  111,  111,
 /*  1270 */   111,   91,   92,   93,  111,  111,   96,   97,   98,  111,
 /*  1280 */    80,  111,  111,   83,   84,  111,  111,  111,  111,  111,
 /*  1290 */   111,   91,   92,   93,  111,  111,   96,   97,   98,  111,
 /*  1300 */    80,  111,  111,   83,   84,  111,  111,  111,  111,  111,
 /*  1310 */   111,   91,   92,   93,  111,  111,   96,   97,   98,   80,
 /*  1320 */   111,  111,   83,   84,  111,  111,  111,  111,  111,  111,
 /*  1330 */    91,   92,   93,  111,  111,   96,   97,   98,   80,  111,
 /*  1340 */   111,   83,   84,  111,  111,  111,  111,  111,  111,   91,
 /*  1350 */    92,   93,  111,  111,   96,   97,   98,   80,  111,  111,
 /*  1360 */    83,   84,  111,  111,  111,  111,  111,  111,   91,   92,
 /*  1370 */    93,  111,  111,   96,   97,   98,  111,   80,  111,  111,
 /*  1380 */    83,   84,  111,  111,  111,  111,  111,  111,   91,   92,
 /*  1390 */    93,  111,  111,   96,   97,   98,  111,   80,  111,  111,
 /*  1400 */    83,   84,  111,  111,  111,  111,  111,  111,   91,   92,
 /*  1410 */    93,  111,  111,   96,   97,   98,   80,  111,  111,   83,
 /*  1420 */    84,  111,  111,  111,  111,  111,  111,   91,   92,   93,
 /*  1430 */   111,  111,   96,   97,   98,   80,  111,  111,   83,   84,
 /*  1440 */   111,  111,  111,  111,  111,  111,   91,   92,   93,  111,
 /*  1450 */   111,   96,   97,   98,   80,  111,  111,   83,   84,  111,
 /*  1460 */   111,  111,  111,  111,  111,   91,   92,   93,  111,  111,
 /*  1470 */    96,   97,   98,  111,   80,  111,  111,   83,   84,  111,
 /*  1480 */   111,  111,  111,  111,  111,   91,   92,   93,  111,  111,
 /*  1490 */    96,   97,   98,  111,   80,  111,  111,   83,   84,  111,
 /*  1500 */   111,  111,  111,  111,  111,   91,   92,   93,  111,  111,
 /*  1510 */    96,   97,   98,   80,  111,  111,   83,   84,  111,  111,
 /*  1520 */   111,  111,  111,  111,   91,   92,   93,  111,  111,   96,
 /*  1530 */    97,   98,   80,  111,  111,   83,   84,  111,  111,  111,
 /*  1540 */   111,  111,  111,   91,   92,   93,  111,  111,   96,   97,
 /*  1550 */    98,   80,  111,  111,   83,   84,  111,  111,  111,  111,
 /*  1560 */   111,  111,   91,   92,   93,  111,  111,   96,   97,   98,
 /*  1570 */   111,   80,  111,  111,   83,   84,  111,  111,  111,  111,
 /*  1580 */   111,  111,   91,   92,   93,  111,  111,   96,   97,   98,
 /*  1590 */   111,   80,  111,  111,   83,   84,  111,  111,  111,  111,
 /*  1600 */   111,  111,   91,   92,   93,  111,  111,   96,   97,   98,
 /*  1610 */    80,  111,  111,   83,   84,  111,  111,  111,  111,  111,
 /*  1620 */   111,   91,   92,   93,  111,  111,   96,   97,   98,   80,
 /*  1630 */   111,  111,   83,   84,  111,  111,  111,  111,  111,  111,
 /*  1640 */    91,   92,   93,  111,   80,   96,   97,   98,   84,  111,
 /*  1650 */    81,   82,  111,  111,  111,   91,  111,   93,  111,   90,
 /*  1660 */    96,   97,   98,   94,   95,   81,   82,  111,  111,   13,
 /*  1670 */   111,  111,   16,  104,   90,  111,  111,  111,   94,   95,
 /*  1680 */    24,  111,   26,  111,  111,   29,  111,  111,  104,
);
    const YY_SHIFT_USE_DFLT = -44;
    const YY_SHIFT_MAX = 198;
    static public $yy_shift_ofst = array(
 /*     0 */   423,  755,  730,  730,  755,  724,  805,  730,  730,  730,
 /*    10 */   730,  893,  730,  730,  730,  730,  730,  730,  730,  730,
 /*    20 */   730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
 /*    30 */   730,  730,  730,  730,  730,  730,  893,  730,  730,  730,
 /*    40 */   730,  818,  818,   -1,   46,   46,   46,  905,  905,  905,
 /*    50 */   905,  905,  905,  490,  443,  584,  537,  396,  255,   93,
 /*    60 */   140,  349,  302,  187,  631,  631,  631,  631,  631,  631,
 /*    70 */   631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
 /*    80 */   631,  631,  631,  631,  631,  666,  666,   -4,   47,  167,
 /*    90 */    -4, 1656,  920,   95,  728,  728,   95,   71,  252,   25,
 /*   100 */    97,    4,    2,  166,  138,   20,  223,  252,  223,  -17,
 /*   110 */   223,  252,  223,  292,  223,  223,  190,   76,  360,  223,
 /*   120 */   327,  223,  223,  145,  145,  145,  145,  145,  145,  145,
 /*   130 */   145,  145,  -44,  260,  197,  225,  156,  109,  -17,  -17,
 /*   140 */   -43,  -17,  -17,  -17,  -17,  -17,  -17,  223,  -17,  -17,
 /*   150 */   -17,  -17,  -17,  -43,  -17,  -17,  145,   18,  331,  437,
 /*   160 */   145,  145,   18,  331,  -44,  -44,  902,  132,  129,  253,
 /*   170 */   274,   -6,  750,  111,  230,  232,  205,  261,  410,  389,
 /*   180 */   341,  394,  405,  406,  409,  407,  348,  388,  381,  362,
 /*   190 */   329,  324,  354,  377,  350,  369,  366,  403,  383,
);
    const YY_REDUCE_USE_DFLT = -27;
    const YY_REDUCE_MAX = 165;
    static public $yy_reduce_ofst = array(
 /*     0 */   -20,  179,  800,  821,  734, 1239, 1220, 1200, 1161, 1180,
 /*    10 */  1258, 1277, 1355, 1336, 1317, 1297, 1142, 1123,  967,  948,
 /*    20 */   929,  888,  909,  986, 1006, 1103, 1083, 1394, 1064, 1026,
 /*    30 */  1045, 1374, 1549, 1491, 1452, 1414, 1511, 1433, 1530, 1471,
 /*    40 */   868, 1564,  780,  757, 1569,  707, 1584, 1113, 1152, 1055,
 /*    50 */   919,  958, 1016,  -26,  -26,  -26,  -26,  -26,  -26,  -26,
 /*    60 */   -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,
 /*    70 */   -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,
 /*    80 */   -26,  -26,  -26,  -26,  -26,  -26,  -26,   89,  668,  914,
 /*    90 */    40,  693,  178,  153,  840,  947,  632,  673,  126,   16,
 /*   100 */    16,  201,  317,   16,  183,  163,  271,  263,  365,  242,
 /*   110 */   411,  218,  412,  270,  270,  364,  244,   16,  270,  458,
 /*   120 */    16,  459,  505,   16,  112,   16,   16,   16,   16,   16,
 /*   130 */    16,   16,   16,  319,  326,  344,  344,  344,  334,  334,
 /*   140 */   328,  334,  334,  334,  334,  334,  334,  344,  334,  334,
 /*   150 */   334,  334,  334,  351,  334,  334,  229,  221,  363,  368,
 /*   160 */   229,  229,  221,  249,  246,  175,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(3, ),
        /* 1 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 2 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 3 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 4 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 5 */ array(15, 16, 27, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 6 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 7 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 8 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 9 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 10 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 11 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 12 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 13 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 14 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 15 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 16 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 17 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 18 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 19 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 20 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 21 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 22 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 23 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 24 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 25 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 26 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 27 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 28 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 29 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 30 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 31 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 32 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 33 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 34 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 35 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 36 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 37 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 38 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 39 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 40 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 41 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 42 */ array(15, 16, 30, 32, 35, 49, 50, 52, 54, 69, ),
        /* 43 */ array(1, 22, 24, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 44 */ array(1, 24, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 45 */ array(1, 24, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 46 */ array(1, 24, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 47 */ array(15, 16, 30, 32, 35, 49, 50, 52, 69, ),
        /* 48 */ array(15, 16, 30, 32, 35, 49, 50, 52, 69, ),
        /* 49 */ array(15, 16, 30, 32, 35, 49, 50, 52, 69, ),
        /* 50 */ array(15, 16, 30, 32, 35, 49, 50, 52, 69, ),
        /* 51 */ array(15, 16, 30, 32, 35, 49, 50, 52, 69, ),
        /* 52 */ array(15, 16, 30, 32, 35, 49, 50, 52, 69, ),
        /* 53 */ array(1, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 54 */ array(1, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 55 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 56 */ array(1, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 57 */ array(1, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 58 */ array(1, 19, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 59 */ array(1, 25, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 60 */ array(1, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 61 */ array(1, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 62 */ array(1, 2, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 63 */ array(1, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 64 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 65 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 66 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 67 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 68 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 69 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 70 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 71 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 72 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 73 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 74 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 75 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 76 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 77 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 78 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 79 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 80 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 81 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 82 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 83 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 84 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 85 */ array(34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 86 */ array(34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 87 */ array(5, 6, 7, 8, 9, 10, 13, 17, 18, 23, 28, ),
        /* 88 */ array(1, 4, 24, 29, 32, ),
        /* 89 */ array(1, 4, 24, 29, ),
        /* 90 */ array(5, 6, 7, 8, 9, 10, 13, 17, 18, 23, 28, ),
        /* 91 */ array(13, 16, 24, 26, 29, ),
        /* 92 */ array(13, 16, 24, 26, 29, ),
        /* 93 */ array(1, 4, 24, 29, ),
        /* 94 */ array(13, 16, 24, 29, ),
        /* 95 */ array(13, 16, 24, 29, ),
        /* 96 */ array(1, 4, 24, 29, ),
        /* 97 */ array(1, 24, 29, ),
        /* 98 */ array(15, 32, ),
        /* 99 */ array(1, 4, 24, 25, 29, ),
        /* 100 */ array(1, 4, 24, 29, ),
        /* 101 */ array(6, 13, 69, 70, ),
        /* 102 */ array(13, 14, 16, 20, ),
        /* 103 */ array(1, 4, 24, 29, ),
        /* 104 */ array(51, 54, 56, ),
        /* 105 */ array(10, 11, 12, ),
        /* 106 */ array(13, 16, ),
        /* 107 */ array(15, 32, ),
        /* 108 */ array(13, 16, ),
        /* 109 */ array(24, 29, ),
        /* 110 */ array(13, 16, ),
        /* 111 */ array(15, 32, ),
        /* 112 */ array(13, 16, ),
        /* 113 */ array(13, 16, ),
        /* 114 */ array(13, 16, ),
        /* 115 */ array(13, 16, ),
        /* 116 */ array(24, 29, ),
        /* 117 */ array(1, 26, ),
        /* 118 */ array(13, 16, ),
        /* 119 */ array(13, 16, ),
        /* 120 */ array(1, 4, ),
        /* 121 */ array(13, 16, ),
        /* 122 */ array(13, 16, ),
        /* 123 */ array(1, ),
        /* 124 */ array(1, ),
        /* 125 */ array(1, ),
        /* 126 */ array(1, ),
        /* 127 */ array(1, ),
        /* 128 */ array(1, ),
        /* 129 */ array(1, ),
        /* 130 */ array(1, ),
        /* 131 */ array(1, ),
        /* 132 */ array(),
        /* 133 */ array(6, 13, 69, 70, ),
        /* 134 */ array(13, 15, 16, ),
        /* 135 */ array(13, 16, 53, ),
        /* 136 */ array(13, 16, 53, ),
        /* 137 */ array(13, 14, 16, ),
        /* 138 */ array(24, 29, ),
        /* 139 */ array(24, 29, ),
        /* 140 */ array(51, 54, ),
        /* 141 */ array(24, 29, ),
        /* 142 */ array(24, 29, ),
        /* 143 */ array(24, 29, ),
        /* 144 */ array(24, 29, ),
        /* 145 */ array(24, 29, ),
        /* 146 */ array(24, 29, ),
        /* 147 */ array(13, 16, ),
        /* 148 */ array(24, 29, ),
        /* 149 */ array(24, 29, ),
        /* 150 */ array(24, 29, ),
        /* 151 */ array(24, 29, ),
        /* 152 */ array(24, 29, ),
        /* 153 */ array(51, 54, ),
        /* 154 */ array(24, 29, ),
        /* 155 */ array(24, 29, ),
        /* 156 */ array(1, ),
        /* 157 */ array(2, ),
        /* 158 */ array(24, ),
        /* 159 */ array(11, ),
        /* 160 */ array(1, ),
        /* 161 */ array(1, ),
        /* 162 */ array(2, ),
        /* 163 */ array(24, ),
        /* 164 */ array(),
        /* 165 */ array(),
        /* 166 */ array(4, 14, 24, 29, 32, ),
        /* 167 */ array(13, 15, 16, 30, ),
        /* 168 */ array(14, 20, ),
        /* 169 */ array(16, 53, ),
        /* 170 */ array(14, 51, ),
        /* 171 */ array(31, 33, ),
        /* 172 */ array(19, 31, ),
        /* 173 */ array(31, 33, ),
        /* 174 */ array(31, 55, ),
        /* 175 */ array(26, 32, ),
        /* 176 */ array(13, 32, ),
        /* 177 */ array(4, 20, ),
        /* 178 */ array(15, ),
        /* 179 */ array(15, ),
        /* 180 */ array(15, ),
        /* 181 */ array(4, ),
        /* 182 */ array(15, ),
        /* 183 */ array(16, ),
        /* 184 */ array(14, ),
        /* 185 */ array(14, ),
        /* 186 */ array(33, ),
        /* 187 */ array(15, ),
        /* 188 */ array(21, ),
        /* 189 */ array(16, ),
        /* 190 */ array(48, ),
        /* 191 */ array(51, ),
        /* 192 */ array(20, ),
        /* 193 */ array(2, ),
        /* 194 */ array(30, ),
        /* 195 */ array(32, ),
        /* 196 */ array(16, ),
        /* 197 */ array(16, ),
        /* 198 */ array(16, ),
        /* 199 */ array(),
        /* 200 */ array(),
        /* 201 */ array(),
        /* 202 */ array(),
        /* 203 */ array(),
        /* 204 */ array(),
        /* 205 */ array(),
        /* 206 */ array(),
        /* 207 */ array(),
        /* 208 */ array(),
        /* 209 */ array(),
        /* 210 */ array(),
        /* 211 */ array(),
        /* 212 */ array(),
        /* 213 */ array(),
        /* 214 */ array(),
        /* 215 */ array(),
        /* 216 */ array(),
        /* 217 */ array(),
        /* 218 */ array(),
        /* 219 */ array(),
        /* 220 */ array(),
        /* 221 */ array(),
        /* 222 */ array(),
        /* 223 */ array(),
        /* 224 */ array(),
        /* 225 */ array(),
        /* 226 */ array(),
        /* 227 */ array(),
        /* 228 */ array(),
        /* 229 */ array(),
        /* 230 */ array(),
        /* 231 */ array(),
        /* 232 */ array(),
        /* 233 */ array(),
        /* 234 */ array(),
        /* 235 */ array(),
        /* 236 */ array(),
        /* 237 */ array(),
        /* 238 */ array(),
        /* 239 */ array(),
        /* 240 */ array(),
        /* 241 */ array(),
        /* 242 */ array(),
        /* 243 */ array(),
        /* 244 */ array(),
        /* 245 */ array(),
        /* 246 */ array(),
        /* 247 */ array(),
        /* 248 */ array(),
        /* 249 */ array(),
        /* 250 */ array(),
        /* 251 */ array(),
        /* 252 */ array(),
        /* 253 */ array(),
        /* 254 */ array(),
        /* 255 */ array(),
        /* 256 */ array(),
        /* 257 */ array(),
        /* 258 */ array(),
        /* 259 */ array(),
        /* 260 */ array(),
        /* 261 */ array(),
        /* 262 */ array(),
        /* 263 */ array(),
        /* 264 */ array(),
        /* 265 */ array(),
        /* 266 */ array(),
        /* 267 */ array(),
        /* 268 */ array(),
        /* 269 */ array(),
        /* 270 */ array(),
        /* 271 */ array(),
        /* 272 */ array(),
        /* 273 */ array(),
        /* 274 */ array(),
        /* 275 */ array(),
        /* 276 */ array(),
        /* 277 */ array(),
        /* 278 */ array(),
        /* 279 */ array(),
);
    static public $yy_default = array(
 /*     0 */   282,  427,  403,  403,  441,  441,  441,  441,  441,  441,
 /*    10 */   441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
 /*    20 */   441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
 /*    30 */   441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
 /*    40 */   441,  441,  441,  327,  310,  327,  327,  441,  441,  441,
 /*    50 */   441,  441,  441,  441,  441,  441,  441,  441,  441,  332,
 /*    60 */   441,  441,  441,  441,  356,  359,  360,  355,  352,  347,
 /*    70 */   428,  350,  351,  338,  332,  329,  401,  334,  402,  304,
 /*    80 */   430,  429,  306,  313,  337,  361,  362,  285,  370,  340,
 /*    90 */   280,  327,  327,  346,  327,  327,  375,  327,  441,  340,
 /*   100 */   340,  441,  441,  340,  376,  441,  441,  441,  441,  327,
 /*   110 */   441,  441,  441,  441,  441,  441,  327,  340,  441,  441,
 /*   120 */   340,  441,  441,  344,  323,  340,  364,  349,  365,  343,
 /*   130 */   366,  342,  410,  441,  441,  384,  377,  441,  320,  321,
 /*   140 */   380,  315,  302,  307,  316,  309,  301,  395,  318,  319,
 /*   150 */   312,  300,  317,  381,  311,  303,  346,  404,  440,  296,
 /*   160 */   324,  375,  405,  440,  409,  409,  370,  441,  363,  441,
 /*   170 */   368,  441,  441,  441,  441,  370,  394,  363,  441,  441,
 /*   180 */   441,  441,  441,  441,  392,  441,  441,  441,  335,  441,
 /*   190 */   372,  368,  363,  392,  441,  370,  441,  441,  441,  290,
 /*   200 */   286,  354,  353,  407,  415,  414,  406,  339,  357,  412,
 /*   210 */   289,  288,  413,  287,  358,  348,  378,  374,  383,  390,
 /*   220 */   392,  391,  281,  283,  385,  379,  373,  371,  369,  416,
 /*   230 */   341,  435,  431,  432,  433,  284,  439,  295,  387,  388,
 /*   240 */   328,  386,  393,  434,  294,  389,  382,  297,  396,  398,
 /*   250 */   372,  411,  298,  325,  397,  326,  400,  438,  436,  419,
 /*   260 */   420,  421,  422,  291,  418,  417,  399,  314,  423,  345,
 /*   270 */   322,  426,  425,  437,  424,  293,  292,  367,  408,  336,
);
    const YYNOCODE = 112;
    const YYSTACKDEPTH = 500;
    const YYNSTATE = 280;
    const YYNRULE = 161;
    const YYERRORSYMBOL = 71;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    public static $yyFallback = array(
    );

    public $yyidx;                    /* Index of top element in stack */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    public $yystack = array();  /* The parser's stack */

    public $yyTokenName = array(
  '$',             'VERT',          'COLON',         'SETSTRICT',   
  'RDEL',          'COMMENT',       'TEXT',          'STRIPON',     
  'STRIPOFF',      'BLOCKSOURCE',   'LITERALSTART',  'LITERALEND',  
  'LITERAL',       'LDEL',          'EQUAL',         'DOLLAR',      
  'ID',            'LDELIF',        'LDELFOR',       'SEMICOLON',   
  'INCDEC',        'TO',            'STEP',          'LDELFOREACH', 
  'SPACE',         'AS',            'APTR',          'SMARTYBLOCKCHILDPARENT',
  'LDELSLASH',     'ATTR',          'INTEGER',       'COMMA',       
  'OPENP',         'CLOSEP',        'MATH',          'UNIMATH',     
  'ANDSYM',        'ISIN',          'ISDIVBY',       'ISNOTDIVBY',  
  'ISEVEN',        'ISNOTEVEN',     'ISEVENBY',      'ISNOTEVENBY', 
  'ISODD',         'ISNOTODD',      'ISODDBY',       'ISNOTODDBY',  
  'QMARK',         'NOT',           'TYPECAST',      'DOT',         
  'SINGLEQUOTESTRING',  'AT',            'OPENB',         'CLOSEB',      
  'PTR',           'EQUALS',        'NOTEQUALS',     'GREATERTHAN', 
  'LESSTHAN',      'GREATEREQUAL',  'LESSEQUAL',     'IDENTITY',    
  'NONEIDENTITY',  'MOD',           'LAND',          'LOR',         
  'LXOR',          'QUOTE',         'DOLLARID',      'error',       
  'start',         'strictmode',    'template',      'template_element',
  'smartytag',     'literal',       'literal_elements',  'literal_element',
  'value',         'modifierlist',  'attributes',    'expr',        
  'variable',      'statements',    'optspace',      'varvar',      
  'foraction',     'statement',     'attribute',     'variablebase',
  'ternary',       'array',         'ifcond',        'lop',         
  'function',      'doublequoted_with_quotes',  'variableinternal',  'indexdef',    
  'objectelement',  'varvarele',     'method',        'params',      
  'modifier',      'modparameters',  'modparameter',  'arrayelements',
  'arrayelement',  'doublequoted',  'doublequotedcontent',
    );

    public static $yyRuleName = array(
 /*   0 */ "start ::= strictmode template",
 /*   1 */ "strictmode ::= SETSTRICT",
 /*   2 */ "strictmode ::=",
 /*   3 */ "template ::= template_element",
 /*   4 */ "template ::= template template_element",
 /*   5 */ "template ::=",
 /*   6 */ "template_element ::= smartytag RDEL",
 /*   7 */ "template_element ::= COMMENT",
 /*   8 */ "template_element ::= literal",
 /*   9 */ "template_element ::= TEXT",
 /*  10 */ "template_element ::= STRIPON",
 /*  11 */ "template_element ::= STRIPOFF",
 /*  12 */ "template_element ::= BLOCKSOURCE",
 /*  13 */ "literal ::= LITERALSTART LITERALEND",
 /*  14 */ "literal ::= LITERALSTART literal_elements LITERALEND",
 /*  15 */ "literal_elements ::= literal_elements literal_element",
 /*  16 */ "literal_elements ::=",
 /*  17 */ "literal_element ::= literal",
 /*  18 */ "literal_element ::= LITERAL",
 /*  19 */ "smartytag ::= LDEL value",
 /*  20 */ "smartytag ::= LDEL value modifierlist attributes",
 /*  21 */ "smartytag ::= LDEL value attributes",
 /*  22 */ "smartytag ::= LDEL expr modifierlist attributes",
 /*  23 */ "smartytag ::= LDEL expr attributes",
 /*  24 */ "smartytag ::= LDEL variable EQUAL expr",
 /*  25 */ "smartytag ::= LDEL DOLLAR ID EQUAL value",
 /*  26 */ "smartytag ::= LDEL DOLLAR ID EQUAL expr",
 /*  27 */ "smartytag ::= LDEL ID attributes",
 /*  28 */ "smartytag ::= LDEL ID",
 /*  29 */ "smartytag ::= LDEL ID modifierlist attributes",
 /*  30 */ "smartytag ::= LDELIF expr",
 /*  31 */ "smartytag ::= LDELIF expr attributes",
 /*  32 */ "smartytag ::= LDELFOR statements SEMICOLON optspace expr SEMICOLON optspace DOLLAR varvar foraction attributes",
 /*  33 */ "foraction ::= EQUAL expr",
 /*  34 */ "foraction ::= INCDEC",
 /*  35 */ "smartytag ::= LDELFOR statement TO expr attributes",
 /*  36 */ "smartytag ::= LDELFOR statement TO expr STEP expr attributes",
 /*  37 */ "smartytag ::= LDELFOREACH attributes",
 /*  38 */ "smartytag ::= LDELFOREACH SPACE value AS DOLLAR varvar attributes",
 /*  39 */ "smartytag ::= LDELFOREACH SPACE value AS DOLLAR varvar APTR DOLLAR varvar attributes",
 /*  40 */ "smartytag ::= LDELFOREACH SPACE expr AS DOLLAR varvar attributes",
 /*  41 */ "smartytag ::= LDELFOREACH SPACE expr AS DOLLAR varvar APTR DOLLAR varvar attributes",
 /*  42 */ "smartytag ::= LDEL SMARTYBLOCKCHILDPARENT",
 /*  43 */ "smartytag ::= LDELSLASH ID",
 /*  44 */ "smartytag ::= LDELSLASH ID modifierlist",
 /*  45 */ "attributes ::= attributes attribute",
 /*  46 */ "attributes ::= attribute",
 /*  47 */ "attributes ::=",
 /*  48 */ "attribute ::= SPACE ID EQUAL ID",
 /*  49 */ "attribute ::= ATTR expr",
 /*  50 */ "attribute ::= ATTR value",
 /*  51 */ "attribute ::= SPACE ID",
 /*  52 */ "attribute ::= SPACE expr",
 /*  53 */ "attribute ::= SPACE value",
 /*  54 */ "attribute ::= SPACE INTEGER EQUAL expr",
 /*  55 */ "statements ::= statement",
 /*  56 */ "statements ::= statements COMMA statement",
 /*  57 */ "statement ::= DOLLAR varvar EQUAL expr",
 /*  58 */ "statement ::= variablebase EQUAL expr",
 /*  59 */ "statement ::= OPENP statement CLOSEP",
 /*  60 */ "expr ::= value",
 /*  61 */ "expr ::= ternary",
 /*  62 */ "expr ::= expr MATH value",
 /*  63 */ "expr ::= expr UNIMATH value",
 /*  64 */ "expr ::= expr ANDSYM value",
 /*  65 */ "expr ::= array",
 /*  66 */ "expr ::= expr modifierlist",
 /*  67 */ "expr ::= expr ifcond expr",
 /*  68 */ "expr ::= expr ISIN array",
 /*  69 */ "expr ::= expr ISIN value",
 /*  70 */ "expr ::= expr lop expr",
 /*  71 */ "expr ::= expr ISDIVBY expr",
 /*  72 */ "expr ::= expr ISNOTDIVBY expr",
 /*  73 */ "expr ::= expr ISEVEN",
 /*  74 */ "expr ::= expr ISNOTEVEN",
 /*  75 */ "expr ::= expr ISEVENBY expr",
 /*  76 */ "expr ::= expr ISNOTEVENBY expr",
 /*  77 */ "expr ::= expr ISODD",
 /*  78 */ "expr ::= expr ISNOTODD",
 /*  79 */ "expr ::= expr ISODDBY expr",
 /*  80 */ "expr ::= expr ISNOTODDBY expr",
 /*  81 */ "ternary ::= OPENP expr CLOSEP QMARK DOLLAR ID COLON expr",
 /*  82 */ "ternary ::= OPENP expr CLOSEP QMARK expr COLON expr",
 /*  83 */ "value ::= variable",
 /*  84 */ "value ::= UNIMATH value",
 /*  85 */ "value ::= NOT value",
 /*  86 */ "value ::= TYPECAST value",
 /*  87 */ "value ::= variable INCDEC",
 /*  88 */ "value ::= INTEGER",
 /*  89 */ "value ::= INTEGER DOT INTEGER",
 /*  90 */ "value ::= ID",
 /*  91 */ "value ::= function",
 /*  92 */ "value ::= OPENP expr CLOSEP",
 /*  93 */ "value ::= SINGLEQUOTESTRING",
 /*  94 */ "value ::= doublequoted_with_quotes",
 /*  95 */ "value ::= value modifierlist",
 /*  96 */ "variable ::= variableinternal",
 /*  97 */ "variablebase ::= DOLLAR varvar",
 /*  98 */ "variableinternal ::= variableinternal indexdef",
 /*  99 */ "variableinternal ::= variablebase indexdef indexdef",
 /* 100 */ "variableinternal ::= variablebase indexdef",
 /* 101 */ "variableinternal ::= variablebase",
 /* 102 */ "variableinternal ::= variableinternal objectelement",
 /* 103 */ "variableinternal ::= DOLLAR varvar AT ID",
 /* 104 */ "indexdef ::= DOT DOLLAR varvar",
 /* 105 */ "indexdef ::= DOT DOLLAR varvar AT ID",
 /* 106 */ "indexdef ::= DOT ID",
 /* 107 */ "indexdef ::= DOT INTEGER",
 /* 108 */ "indexdef ::= DOT LDEL expr RDEL",
 /* 109 */ "indexdef ::= OPENB expr CLOSEB",
 /* 110 */ "varvar ::= varvarele",
 /* 111 */ "varvar ::= varvar varvarele",
 /* 112 */ "varvarele ::= ID",
 /* 113 */ "varvarele ::= LDEL expr RDEL",
 /* 114 */ "objectelement ::= PTR ID",
 /* 115 */ "objectelement ::= PTR DOLLAR varvar",
 /* 116 */ "objectelement ::= PTR LDEL expr RDEL",
 /* 117 */ "objectelement ::= PTR ID LDEL expr RDEL",
 /* 118 */ "objectelement ::= PTR method",
 /* 119 */ "function ::= ID OPENP params CLOSEP",
 /* 120 */ "method ::= ID OPENP params CLOSEP",
 /* 121 */ "params ::= params COMMA expr",
 /* 122 */ "params ::= expr",
 /* 123 */ "params ::=",
 /* 124 */ "modifierlist ::= modifierlist modifier modparameters",
 /* 125 */ "modifierlist ::= modifier modparameters",
 /* 126 */ "modifier ::= VERT AT ID",
 /* 127 */ "modifier ::= VERT ID",
 /* 128 */ "modparameters ::= modparameters modparameter",
 /* 129 */ "modparameters ::=",
 /* 130 */ "modparameter ::= COLON value",
 /* 131 */ "modparameter ::= COLON array",
 /* 132 */ "ifcond ::= EQUALS",
 /* 133 */ "ifcond ::= NOTEQUALS",
 /* 134 */ "ifcond ::= GREATERTHAN",
 /* 135 */ "ifcond ::= LESSTHAN",
 /* 136 */ "ifcond ::= GREATEREQUAL",
 /* 137 */ "ifcond ::= LESSEQUAL",
 /* 138 */ "ifcond ::= IDENTITY",
 /* 139 */ "ifcond ::= NONEIDENTITY",
 /* 140 */ "ifcond ::= MOD",
 /* 141 */ "lop ::= LAND",
 /* 142 */ "lop ::= LOR",
 /* 143 */ "lop ::= LXOR",
 /* 144 */ "array ::= OPENB arrayelements CLOSEB",
 /* 145 */ "arrayelements ::= arrayelement",
 /* 146 */ "arrayelements ::= arrayelements COMMA arrayelement",
 /* 147 */ "arrayelements ::=",
 /* 148 */ "arrayelement ::= value APTR expr",
 /* 149 */ "arrayelement ::= ID APTR expr",
 /* 150 */ "arrayelement ::= expr",
 /* 151 */ "doublequoted_with_quotes ::= QUOTE QUOTE",
 /* 152 */ "doublequoted_with_quotes ::= QUOTE doublequoted QUOTE",
 /* 153 */ "doublequoted ::= doublequoted doublequotedcontent",
 /* 154 */ "doublequoted ::= doublequotedcontent",
 /* 155 */ "doublequotedcontent ::= DOLLARID",
 /* 156 */ "doublequotedcontent ::= LDEL variable RDEL",
 /* 157 */ "doublequotedcontent ::= LDEL expr RDEL",
 /* 158 */ "doublequotedcontent ::= TEXT",
 /* 159 */ "optspace ::= SPACE",
 /* 160 */ "optspace ::=",
    );

    public function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count($this->yyTokenName)) {
            return $this->yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    public static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    public function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;

        return $yymajor;
    }

    public function __destruct()
    {
        while ($this->yystack !== Array()) {
            $this->yy_pop_parser_stack();
        }
    }

    public function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                $expected = array_merge($expected, self::$yyExpectedTokens[$nextstate]);
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;

                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new TP_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
    $this->yyidx = $yyidx;
    $this->yystack = $stack;

        return array_unique($expected);
    }

    public function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;

                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new TP_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token && $token !== '0') {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;

        return true;
    }

   public function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;

        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {

                return $this->yy_find_shift_action($iFallback);
            }

            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    public function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    public function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
#line 128 "Parser.y"

    $this->internalError = true;
    $this->compiler->trigger_template_error("Stack overflow in template parser");
#line 1349 "Parser.php"

            return;
        }
        $yytos = new TP_yyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
    }

    public static $yyRuleInfo = array(
  array( 'lhs' => 72, 'rhs' => 2 ),
  array( 'lhs' => 73, 'rhs' => 1 ),
  array( 'lhs' => 73, 'rhs' => 0 ),
  array( 'lhs' => 74, 'rhs' => 1 ),
  array( 'lhs' => 74, 'rhs' => 2 ),
  array( 'lhs' => 74, 'rhs' => 0 ),
  array( 'lhs' => 75, 'rhs' => 2 ),
  array( 'lhs' => 75, 'rhs' => 1 ),
  array( 'lhs' => 75, 'rhs' => 1 ),
  array( 'lhs' => 75, 'rhs' => 1 ),
  array( 'lhs' => 75, 'rhs' => 1 ),
  array( 'lhs' => 75, 'rhs' => 1 ),
  array( 'lhs' => 75, 'rhs' => 1 ),
  array( 'lhs' => 77, 'rhs' => 2 ),
  array( 'lhs' => 77, 'rhs' => 3 ),
  array( 'lhs' => 78, 'rhs' => 2 ),
  array( 'lhs' => 78, 'rhs' => 0 ),
  array( 'lhs' => 79, 'rhs' => 1 ),
  array( 'lhs' => 79, 'rhs' => 1 ),
  array( 'lhs' => 76, 'rhs' => 2 ),
  array( 'lhs' => 76, 'rhs' => 4 ),
  array( 'lhs' => 76, 'rhs' => 3 ),
  array( 'lhs' => 76, 'rhs' => 4 ),
  array( 'lhs' => 76, 'rhs' => 3 ),
  array( 'lhs' => 76, 'rhs' => 4 ),
  array( 'lhs' => 76, 'rhs' => 5 ),
  array( 'lhs' => 76, 'rhs' => 5 ),
  array( 'lhs' => 76, 'rhs' => 3 ),
  array( 'lhs' => 76, 'rhs' => 2 ),
  array( 'lhs' => 76, 'rhs' => 4 ),
  array( 'lhs' => 76, 'rhs' => 2 ),
  array( 'lhs' => 76, 'rhs' => 3 ),
  array( 'lhs' => 76, 'rhs' => 11 ),
  array( 'lhs' => 88, 'rhs' => 2 ),
  array( 'lhs' => 88, 'rhs' => 1 ),
  array( 'lhs' => 76, 'rhs' => 5 ),
  array( 'lhs' => 76, 'rhs' => 7 ),
  array( 'lhs' => 76, 'rhs' => 2 ),
  array( 'lhs' => 76, 'rhs' => 7 ),
  array( 'lhs' => 76, 'rhs' => 10 ),
  array( 'lhs' => 76, 'rhs' => 7 ),
  array( 'lhs' => 76, 'rhs' => 10 ),
  array( 'lhs' => 76, 'rhs' => 2 ),
  array( 'lhs' => 76, 'rhs' => 2 ),
  array( 'lhs' => 76, 'rhs' => 3 ),
  array( 'lhs' => 82, 'rhs' => 2 ),
  array( 'lhs' => 82, 'rhs' => 1 ),
  array( 'lhs' => 82, 'rhs' => 0 ),
  array( 'lhs' => 90, 'rhs' => 4 ),
  array( 'lhs' => 90, 'rhs' => 2 ),
  array( 'lhs' => 90, 'rhs' => 2 ),
  array( 'lhs' => 90, 'rhs' => 2 ),
  array( 'lhs' => 90, 'rhs' => 2 ),
  array( 'lhs' => 90, 'rhs' => 2 ),
  array( 'lhs' => 90, 'rhs' => 4 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 3 ),
  array( 'lhs' => 89, 'rhs' => 4 ),
  array( 'lhs' => 89, 'rhs' => 3 ),
  array( 'lhs' => 89, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 1 ),
  array( 'lhs' => 83, 'rhs' => 1 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 1 ),
  array( 'lhs' => 83, 'rhs' => 2 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 2 ),
  array( 'lhs' => 83, 'rhs' => 2 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 2 ),
  array( 'lhs' => 83, 'rhs' => 2 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 92, 'rhs' => 8 ),
  array( 'lhs' => 92, 'rhs' => 7 ),
  array( 'lhs' => 80, 'rhs' => 1 ),
  array( 'lhs' => 80, 'rhs' => 2 ),
  array( 'lhs' => 80, 'rhs' => 2 ),
  array( 'lhs' => 80, 'rhs' => 2 ),
  array( 'lhs' => 80, 'rhs' => 2 ),
  array( 'lhs' => 80, 'rhs' => 1 ),
  array( 'lhs' => 80, 'rhs' => 3 ),
  array( 'lhs' => 80, 'rhs' => 1 ),
  array( 'lhs' => 80, 'rhs' => 1 ),
  array( 'lhs' => 80, 'rhs' => 3 ),
  array( 'lhs' => 80, 'rhs' => 1 ),
  array( 'lhs' => 80, 'rhs' => 1 ),
  array( 'lhs' => 80, 'rhs' => 2 ),
  array( 'lhs' => 84, 'rhs' => 1 ),
  array( 'lhs' => 91, 'rhs' => 2 ),
  array( 'lhs' => 98, 'rhs' => 2 ),
  array( 'lhs' => 98, 'rhs' => 3 ),
  array( 'lhs' => 98, 'rhs' => 2 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 2 ),
  array( 'lhs' => 98, 'rhs' => 4 ),
  array( 'lhs' => 99, 'rhs' => 3 ),
  array( 'lhs' => 99, 'rhs' => 5 ),
  array( 'lhs' => 99, 'rhs' => 2 ),
  array( 'lhs' => 99, 'rhs' => 2 ),
  array( 'lhs' => 99, 'rhs' => 4 ),
  array( 'lhs' => 99, 'rhs' => 3 ),
  array( 'lhs' => 87, 'rhs' => 1 ),
  array( 'lhs' => 87, 'rhs' => 2 ),
  array( 'lhs' => 101, 'rhs' => 1 ),
  array( 'lhs' => 101, 'rhs' => 3 ),
  array( 'lhs' => 100, 'rhs' => 2 ),
  array( 'lhs' => 100, 'rhs' => 3 ),
  array( 'lhs' => 100, 'rhs' => 4 ),
  array( 'lhs' => 100, 'rhs' => 5 ),
  array( 'lhs' => 100, 'rhs' => 2 ),
  array( 'lhs' => 96, 'rhs' => 4 ),
  array( 'lhs' => 102, 'rhs' => 4 ),
  array( 'lhs' => 103, 'rhs' => 3 ),
  array( 'lhs' => 103, 'rhs' => 1 ),
  array( 'lhs' => 103, 'rhs' => 0 ),
  array( 'lhs' => 81, 'rhs' => 3 ),
  array( 'lhs' => 81, 'rhs' => 2 ),
  array( 'lhs' => 104, 'rhs' => 3 ),
  array( 'lhs' => 104, 'rhs' => 2 ),
  array( 'lhs' => 105, 'rhs' => 2 ),
  array( 'lhs' => 105, 'rhs' => 0 ),
  array( 'lhs' => 106, 'rhs' => 2 ),
  array( 'lhs' => 106, 'rhs' => 2 ),
  array( 'lhs' => 94, 'rhs' => 1 ),
  array( 'lhs' => 94, 'rhs' => 1 ),
  array( 'lhs' => 94, 'rhs' => 1 ),
  array( 'lhs' => 94, 'rhs' => 1 ),
  array( 'lhs' => 94, 'rhs' => 1 ),
  array( 'lhs' => 94, 'rhs' => 1 ),
  array( 'lhs' => 94, 'rhs' => 1 ),
  array( 'lhs' => 94, 'rhs' => 1 ),
  array( 'lhs' => 94, 'rhs' => 1 ),
  array( 'lhs' => 95, 'rhs' => 1 ),
  array( 'lhs' => 95, 'rhs' => 1 ),
  array( 'lhs' => 95, 'rhs' => 1 ),
  array( 'lhs' => 93, 'rhs' => 3 ),
  array( 'lhs' => 107, 'rhs' => 1 ),
  array( 'lhs' => 107, 'rhs' => 3 ),
  array( 'lhs' => 107, 'rhs' => 0 ),
  array( 'lhs' => 108, 'rhs' => 3 ),
  array( 'lhs' => 108, 'rhs' => 3 ),
  array( 'lhs' => 108, 'rhs' => 1 ),
  array( 'lhs' => 97, 'rhs' => 2 ),
  array( 'lhs' => 97, 'rhs' => 3 ),
  array( 'lhs' => 109, 'rhs' => 2 ),
  array( 'lhs' => 109, 'rhs' => 1 ),
  array( 'lhs' => 110, 'rhs' => 1 ),
  array( 'lhs' => 110, 'rhs' => 3 ),
  array( 'lhs' => 110, 'rhs' => 3 ),
  array( 'lhs' => 110, 'rhs' => 1 ),
  array( 'lhs' => 86, 'rhs' => 1 ),
  array( 'lhs' => 86, 'rhs' => 0 ),
    );

    public static $yyReduceMap = array(
        0 => 0,
        1 => 1,
        2 => 2,
        13 => 2,
        16 => 2,
        160 => 2,
        3 => 3,
        4 => 3,
        6 => 6,
        7 => 7,
        8 => 8,
        9 => 9,
        10 => 10,
        11 => 11,
        12 => 12,
        14 => 14,
        59 => 14,
        109 => 14,
        15 => 15,
        86 => 15,
        87 => 15,
        102 => 15,
        17 => 17,
        18 => 17,
        34 => 17,
        52 => 17,
        53 => 17,
        60 => 17,
        61 => 17,
        65 => 17,
        83 => 17,
        91 => 17,
        96 => 17,
        97 => 17,
        107 => 17,
        110 => 17,
        145 => 17,
        150 => 17,
        159 => 17,
        19 => 19,
        20 => 20,
        22 => 20,
        21 => 21,
        23 => 21,
        24 => 24,
        25 => 25,
        26 => 25,
        27 => 27,
        28 => 28,
        29 => 29,
        30 => 30,
        31 => 31,
        32 => 32,
        33 => 33,
        35 => 35,
        36 => 36,
        37 => 37,
        38 => 38,
        39 => 39,
        40 => 40,
        41 => 41,
        42 => 42,
        43 => 43,
        44 => 44,
        45 => 45,
        46 => 46,
        55 => 46,
        122 => 46,
        130 => 46,
        131 => 46,
        47 => 47,
        123 => 47,
        129 => 47,
        48 => 48,
        49 => 49,
        50 => 49,
        51 => 51,
        54 => 54,
        56 => 56,
        57 => 57,
        58 => 58,
        62 => 62,
        63 => 62,
        64 => 62,
        66 => 66,
        95 => 66,
        67 => 67,
        68 => 68,
        69 => 69,
        70 => 70,
        71 => 71,
        72 => 72,
        73 => 73,
        74 => 74,
        75 => 75,
        76 => 76,
        77 => 77,
        78 => 78,
        79 => 79,
        80 => 80,
        81 => 81,
        82 => 82,
        84 => 84,
        85 => 85,
        88 => 88,
        93 => 88,
        94 => 88,
        89 => 89,
        90 => 90,
        92 => 92,
        98 => 98,
        99 => 99,
        100 => 100,
        101 => 101,
        103 => 103,
        104 => 104,
        105 => 105,
        106 => 106,
        108 => 108,
        111 => 111,
        112 => 112,
        113 => 113,
        114 => 114,
        115 => 115,
        116 => 116,
        117 => 117,
        118 => 118,
        119 => 119,
        120 => 120,
        121 => 121,
        124 => 124,
        125 => 125,
        126 => 126,
        127 => 127,
        128 => 128,
        132 => 132,
        133 => 133,
        134 => 134,
        135 => 135,
        136 => 136,
        137 => 137,
        138 => 138,
        139 => 139,
        140 => 140,
        141 => 141,
        142 => 142,
        143 => 143,
        144 => 144,
        146 => 146,
        147 => 147,
        148 => 148,
        149 => 149,
        151 => 151,
        152 => 152,
        153 => 153,
        154 => 154,
        155 => 155,
        156 => 156,
        157 => 157,
        158 => 158,
    );
#line 137 "Parser.y"
    function yy_r0(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor . $this->root_buffer->to_smarty_php();
    }
#line 1690 "Parser.php"
#line 141 "Parser.y"
    function yy_r1(){
    $this->strict_mode = true;
    $this->_retvalue = "/* strict mode */\n\$_smarty_tpl->strict_mode = true;\n";
    }
#line 1696 "Parser.php"
#line 145 "Parser.y"
    function yy_r2(){
    $this->_retvalue = '';
    }
#line 1701 "Parser.php"
#line 151 "Parser.y"
    function yy_r3(){
    if ($this->yystack[$this->yyidx + 0]->minor !== null) {
        $this->current_buffer->append_subtree($this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 1708 "Parser.php"
#line 168 "Parser.y"
    function yy_r6(){
    if ($this->compiler->has_code && !is_object($this->yystack[$this->yyidx + -1]->minor)) {
        $this->_retvalue = new Helpers\Tag((string) $this->yystack[$this->yyidx + -1]->minor);
    } elseif ($this->compiler->has_code) {
        $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    } else {
        $this->_retvalue = null;
    }
    $this->compiler->has_variable_string = false;
    $this->block_nesting_level = count($this->compiler->_tag_stack);
    }
#line 1721 "Parser.php"
#line 181 "Parser.y"
    function yy_r7(){
    $this->_retvalue = null;
    }
#line 1726 "Parser.php"
#line 186 "Parser.y"
    function yy_r8(){
    $this->_retvalue = new Helpers\Text($this, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 1731 "Parser.php"
#line 191 "Parser.y"
    function yy_r9(){
    if ($this->strip) {
        $this->_retvalue = new Helpers\Text(self::stripString($this->yystack[$this->yyidx + 0]->minor));
    } else {
        $this->_retvalue = new Helpers\Text($this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 1740 "Parser.php"
#line 200 "Parser.y"
    function yy_r10(){
    $this->strip++;
    }
#line 1745 "Parser.php"
#line 204 "Parser.y"
    function yy_r11(){
    if (!$this->strip) {
        $this->compiler->trigger_template_error('Unbalanced {strip} tags');
    }
    $this->strip--;
    }
#line 1753 "Parser.php"
#line 211 "Parser.y"
    function yy_r12(){
// if ($this->strip) {
    //     SMARTY_INTERNAL_COMPILE_BLOCK::blockSource($this->compiler, self::stripString($this->yystack[$this->yyidx + 0]->minor));
// } else {
    //     SMARTY_INTERNAL_COMPILE_BLOCK::blockSource($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
    // }
    }
#line 1762 "Parser.php"
#line 223 "Parser.y"
    function yy_r14(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 1767 "Parser.php"
#line 227 "Parser.y"
    function yy_r15(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor . $this->yystack[$this->yyidx + 0]->minor;
    }
#line 1772 "Parser.php"
#line 235 "Parser.y"
    function yy_r17(){
    $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 1777 "Parser.php"
#line 249 "Parser.y"
    function yy_r19(){
    $this->compiler->assert_no_enforced_modifiers($this->yystack[$this->yyidx + 0]->minor instanceof Wrappers\StaticWrapper);
    if ($this->yystack[$this->yyidx + 0]->minor instanceof Wrappers\StaticWrapper) {
        $this->yystack[$this->yyidx + 0]->minor = (string) $this->yystack[$this->yyidx + 0]->minor;
    }
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructPrintExpression::compileOpen(
        $this->compiler,
        array('value' => $this->yystack[$this->yyidx + 0]->minor),
        array()
    );
    }
#line 1791 "Parser.php"
#line 262 "Parser.y"
    function yy_r20(){
    $this->compiler->assert_expected_modifier($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + -2]->minor instanceof Wrappers\StaticWrapper);
    if ($this->yystack[$this->yyidx + -2]->minor instanceof Wrappers\StaticWrapper) {
        $this->yystack[$this->yyidx + -2]->minor = (string) $this->yystack[$this->yyidx + -2]->minor;
    }
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructPrintExpression::compileOpen(
        $this->compiler,
        array('value' => $this->yystack[$this->yyidx + -2]->minor, 'modifierlist' => $this->yystack[$this->yyidx + -1]->minor),
        $this->yystack[$this->yyidx + 0]->minor
    );
    }
#line 1805 "Parser.php"
#line 275 "Parser.y"
    function yy_r21(){
    $this->compiler->assert_no_enforced_modifiers($this->yystack[$this->yyidx + -1]->minor instanceof Wrappers\StaticWrapper);
    if ($this->yystack[$this->yyidx + -1]->minor instanceof Wrappers\StaticWrapper) {
        $this->yystack[$this->yyidx + -1]->minor = (string) $this->yystack[$this->yyidx + -1]->minor;
    }
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructPrintExpression::compileOpen(
        $this->compiler,
        array('value' => $this->yystack[$this->yyidx + -1]->minor),
        $this->yystack[$this->yyidx + 0]->minor
    );
    }
#line 1819 "Parser.php"
#line 317 "Parser.y"
    function yy_r24(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor . ' = (' . $this->yystack[$this->yyidx + 0]->minor . ');';
    }
#line 1824 "Parser.php"
#line 321 "Parser.y"
    function yy_r25(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructAssign::compileOpen(
        $this->compiler,
        array('value' => $this->yystack[$this->yyidx + 0]->minor, 'var' => "'" . $this->yystack[$this->yyidx + -2]->minor . "'"),
        null
    );
    }
#line 1834 "Parser.php"
#line 340 "Parser.y"
    function yy_r27(){
    $this->compiler->has_code = true;
    switch ($this->yystack[$this->yyidx + -1]->minor) {
        case 'assign':
            $this->_retvalue = Constructs\ConstructAssign::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor, null);
            break;
        case 'include':
            $this->_retvalue = Constructs\ConstructInclude::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor, null);
            break;
        default:
            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 1849 "Parser.php"
#line 354 "Parser.y"
    function yy_r28(){
    $this->compiler->has_code = true;
    switch ($this->yystack[$this->yyidx + 0]->minor) {
        case 'foreachelse':
            $this->_retvalue = Constructs\ConstructForEachElse::compileOpen($this->compiler, null, null);
            break;
        case 'forelse':
            $this->_retvalue = Constructs\ConstructForElse::compileOpen($this->compiler, null, null);
            break;
        case 'else':
            $this->_retvalue = Constructs\ConstructElse::compileOpen($this->compiler, null, null);
            break;
        case 'ldelim':
            $this->_retvalue = new Helpers\Text($this->compiler->smarty->left_delimiter);
            break;
        case 'rdelim':
            $this->_retvalue = new Helpers\Text($this->compiler->smarty->right_delimiter);
            break;
        default:
            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + 0]->minor, array());
    }
    }
#line 1873 "Parser.php"
#line 378 "Parser.y"
    function yy_r29(){
    $this->_retvalue = 'ob_start();\necho ' . $this->compiler->compileTag($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor) . 'echo ';
    $this->compiler->has_code = true;
    $this->_retvalue .= Constructs\ConstructModifier::compileOpen($this->compiler, array(
        'value' => 'ob_get_clean()',
        'modifierlist' => $this->yystack[$this->yyidx + -1]->minor,
    ), null);
    }
#line 1883 "Parser.php"
#line 389 "Parser.y"
    function yy_r30(){
    $tag = trim(substr($this->yystack[$this->yyidx + -1]->minor, $this->lex->ldel_length));
    $this->compiler->has_code = true;
    switch ($tag) {
        case 'if':
            $this->_retvalue = Constructs\ConstructIf::compileOpen($this->compiler, array('cond' => $this->yystack[$this->yyidx + 0]->minor), null);
            break;
        case 'elseif':
            $this->_retvalue = Constructs\ConstructElseIf::compileOpen($this->compiler, array('cond' => $this->yystack[$this->yyidx + 0]->minor), null);
            break;
        case 'while':
            $this->_retvalue = Constructs\ConstructWhile::compileOpen($this->compiler, array('cond' => $this->yystack[$this->yyidx + 0]->minor), null);
            break;
    }
    }
#line 1900 "Parser.php"
#line 405 "Parser.y"
    function yy_r31(){
    $tag = trim(substr($this->yystack[$this->yyidx + -2]->minor, $this->lex->ldel_length));
    $this->compiler->has_code = true;
    switch ($tag) {
        case 'if':
            $this->_retvalue = Constructs\ConstructIf::compileOpen($this->compiler, array('cond' => $this->yystack[$this->yyidx + -1]->minor), $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'elseif':
            $this->_retvalue = Constructs\ConstructElseIf::compileOpen($this->compiler, array('cond' => $this->yystack[$this->yyidx + -1]->minor), $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'while':
            $this->_retvalue = Constructs\ConstructWhile::compileOpen($this->compiler, array('cond' => $this->yystack[$this->yyidx + -1]->minor), $this->yystack[$this->yyidx + 0]->minor);
            break;
    }
    }
#line 1917 "Parser.php"
#line 421 "Parser.y"
    function yy_r32(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructFor::compileOpen(
        $this->compiler,
        array_merge(
            $this->yystack[$this->yyidx + 0]->minor,
            array(
                array('start' => $this->yystack[$this->yyidx + -9]->minor),
                array('ifexp' => $this->yystack[$this->yyidx + -6]->minor),
                array('var' => $this->yystack[$this->yyidx + -2]->minor),
                array('step' => $this->yystack[$this->yyidx + -1]->minor)
            )
        ),
        null
    );
    }
#line 1935 "Parser.php"
#line 438 "Parser.y"
    function yy_r33(){
    $this->_retvalue = '='.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 1940 "Parser.php"
#line 446 "Parser.y"
    function yy_r35(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructFor::compileOpen(
        $this->compiler,
        array_merge(
            $this->yystack[$this->yyidx + 0]->minor,
            array(array('start' => $this->yystack[$this->yyidx + -3]->minor), array('to' => $this->yystack[$this->yyidx + -1]->minor))
        ),
        null
    );
    }
#line 1953 "Parser.php"
#line 458 "Parser.y"
    function yy_r36(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructFor::compileOpen(
        $this->compiler,
        array_merge(
            $this->yystack[$this->yyidx + 0]->minor,
            array(array('start' => $this->yystack[$this->yyidx + -5]->minor), array('to' => $this->yystack[$this->yyidx + -3]->minor), array('step' => $this->yystack[$this->yyidx + -1]->minor))
        ),
        null
    );
    }
#line 1966 "Parser.php"
#line 471 "Parser.y"
    function yy_r37(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructForEach::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor, null);
    }
#line 1972 "Parser.php"
#line 477 "Parser.y"
    function yy_r38(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructForEach::compileOpen(
        $this->compiler,
        array_merge($this->yystack[$this->yyidx + 0]->minor, array(array('from' => $this->yystack[$this->yyidx + -4]->minor), array('item' => $this->yystack[$this->yyidx + -1]->minor))),
        null
    );
    }
#line 1982 "Parser.php"
#line 486 "Parser.y"
    function yy_r39(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructForEach::compileOpen(
        $this->compiler,
        array_merge(
            $this->yystack[$this->yyidx + 0]->minor,
            array(
                array('from' => $this->yystack[$this->yyidx + -7]->minor),
                array('item' => $this->yystack[$this->yyidx + -1]->minor),
                array('key' => $this->yystack[$this->yyidx + -4]->minor),
            )
        ),
        null
    );
    }
#line 1999 "Parser.php"
#line 502 "Parser.y"
    function yy_r40(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructForEach::compileOpen(
        $this->compiler,
        array_merge($this->yystack[$this->yyidx + 0]->minor, array(array('from' => v1), array('item' => $this->yystack[$this->yyidx + -1]->minor))),
        null
    );
    }
#line 2009 "Parser.php"
#line 511 "Parser.y"
    function yy_r41(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructForEach::compileOpen(
        $this->compiler,
        array_merge(
            $this->yystack[$this->yyidx + 0]->minor,
            array(
                array('from' => $this->yystack[$this->yyidx + -4]->minor),
                array('item' => $this->yystack[$this->yyidx + -1]->minor),
                array('key' => v2),
            )
        ),
        null
    );
    }
#line 2026 "Parser.php"
#line 529 "Parser.y"
    function yy_r42(){
    $j = strrpos($this->yystack[$this->yyidx + 0]->minor,'.');
    if ($this->yystack[$this->yyidx + 0]->minor[$j+1] == 'c') {
// {$smarty.block.child}
        // $this->_retvalue = SMARTY_INTERNAL_COMPILE_BLOCK::compileChildBlock($this->compiler);
    } else {
// {$smarty.block.parent}
        // $this->_retvalue = SMARTY_INTERNAL_COMPILE_BLOCK::compileParentBlock($this->compiler);
    }
    }
#line 2038 "Parser.php"
#line 542 "Parser.y"
    function yy_r43(){
    switch ($this->yystack[$this->yyidx + 0]->minor) {
        case 'if':
            $this->_retvalue = Constructs\ConstructIf::compileClose($this->compiler, null, null);
            break;
        case 'for':
            $this->_retvalue = Constructs\ConstructFor::compileClose($this->compiler, null, null);
            break;
        case 'foreach':
            $this->_retvalue = Constructs\ConstructForEach::compileClose($this->compiler, null, null);
            break;
        default:
            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + 0]->minor.'close',array());
    }
    }
#line 2055 "Parser.php"
#line 558 "Parser.y"
    function yy_r44(){
    switch ($this->yystack[$this->yyidx + -1]->minor) {
        case 'if':
            $this->_retvalue = Constructs\ConstructIf::compileClose($this->compiler, null, null);
            break;
        case 'for':
            $this->_retvalue = Constructs\ConstructFor::compileClose($this->compiler, null, null);
            break;
        case 'foreach':
            $this->_retvalue = Constructs\ConstructForEach::compileClose($this->compiler, null, null);
            break;
        default:
            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -1]->minor.'close',array(),array('modifier_list'=>$this->yystack[$this->yyidx + 0]->minor));
    }
    }
#line 2072 "Parser.php"
#line 578 "Parser.y"
    function yy_r45(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    $this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 2078 "Parser.php"
#line 584 "Parser.y"
    function yy_r46(){
    $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2083 "Parser.php"
#line 589 "Parser.y"
    function yy_r47(){
    $this->_retvalue = array();
    }
#line 2088 "Parser.php"
#line 594 "Parser.y"
    function yy_r48(){
    if (preg_match('~^true$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>'true');
    } elseif (preg_match('~^false$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>'false');
    } elseif (preg_match('~^null$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>'null');
    } else {
        $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>"'".$this->yystack[$this->yyidx + 0]->minor."'");
    }
    }
#line 2101 "Parser.php"
#line 606 "Parser.y"
    function yy_r49(){
    $this->_retvalue = array(trim($this->yystack[$this->yyidx + -1]->minor," =\n\r\t")=>$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2106 "Parser.php"
#line 614 "Parser.y"
    function yy_r51(){
    $this->_retvalue = "'".$this->yystack[$this->yyidx + 0]->minor."'";
    }
#line 2111 "Parser.php"
#line 626 "Parser.y"
    function yy_r54(){
    $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2116 "Parser.php"
#line 639 "Parser.y"
    function yy_r56(){
    $this->yystack[$this->yyidx + -2]->minor[]=$this->yystack[$this->yyidx + 0]->minor;
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor;
    }
#line 2122 "Parser.php"
#line 644 "Parser.y"
    function yy_r57(){
    $this->compiler->assert_is_not_strict('Variable variable assignment is not supported in strict mode', $this);
    $this->_retvalue = array('var' => $this->yystack[$this->yyidx + -2]->minor, 'value'=>$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2128 "Parser.php"
#line 649 "Parser.y"
    function yy_r58(){
    $this->_retvalue = array('var' => $this->yystack[$this->yyidx + -2]->minor, 'value'=>$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2133 "Parser.php"
#line 673 "Parser.y"
    function yy_r62(){
    $this->_retvalue = Wrappers\StaticWrapper::static_if_all($this->yystack[$this->yyidx + -2]->minor . trim($this->yystack[$this->yyidx + -1]->minor) . $this->yystack[$this->yyidx + 0]->minor, array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 2138 "Parser.php"
#line 692 "Parser.y"
    function yy_r66(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructModifier::compileOpen($this->compiler, array(
        'value' => $this->yystack[$this->yyidx + -1]->minor,
        'modifierlist' => $this->yystack[$this->yyidx + 0]->minor,
    ), null);
    }
#line 2147 "Parser.php"
#line 702 "Parser.y"
    function yy_r67(){
    $this->_retvalue = new Wrappers\StaticWrapper($this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2152 "Parser.php"
#line 706 "Parser.y"
    function yy_r68(){
    $this->_retvalue = new Wrappers\StaticWrapper('in_array('.$this->yystack[$this->yyidx + -2]->minor.','.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2157 "Parser.php"
#line 710 "Parser.y"
    function yy_r69(){
    $this->_retvalue = new Wrappers\StaticWrapper('in_array('.$this->yystack[$this->yyidx + -2]->minor.',(array)'.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2162 "Parser.php"
#line 714 "Parser.y"
    function yy_r70(){
    $this->_retvalue = new Wrappers\StaticWrapper($this->yystack[$this->yyidx + -2]->minor . $this->yystack[$this->yyidx + -1]->minor . $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2167 "Parser.php"
#line 718 "Parser.y"
    function yy_r71(){
    $this->_retvalue = new Wrappers\StaticWrapper('!('.$this->yystack[$this->yyidx + -2]->minor.' % '.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2172 "Parser.php"
#line 722 "Parser.y"
    function yy_r72(){
    $this->compiler->assert_is_not_strict('`is not div by` is not supported in strict mode', $this);
    $this->_retvalue = new Wrappers\StaticWrapper('('.$this->yystack[$this->yyidx + -2]->minor.' % '.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2178 "Parser.php"
#line 727 "Parser.y"
    function yy_r73(){
    $this->_retvalue = new Wrappers\StaticWrapper('!(1 & '.$this->yystack[$this->yyidx + -1]->minor.')');
    }
#line 2183 "Parser.php"
#line 731 "Parser.y"
    function yy_r74(){
    $this->compiler->assert_is_not_strict('`is not even` is not supported in strict mode', $this);
    $this->_retvalue = new Wrappers\StaticWrapper('(1 & '.$this->yystack[$this->yyidx + -1]->minor.')');
    }
#line 2189 "Parser.php"
#line 736 "Parser.y"
    function yy_r75(){
    $this->compiler->assert_is_not_strict('`is even by` is not supported in strict mode', $this);
    $this->_retvalue = new Wrappers\StaticWrapper('!(1 & '.$this->yystack[$this->yyidx + -2]->minor.' / '.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2195 "Parser.php"
#line 741 "Parser.y"
    function yy_r76(){
    $this->compiler->assert_is_not_strict('`is not even by` is not supported in strict mode', $this);
    $this->_retvalue = new Wrappers\StaticWrapper('(1 & '.$this->yystack[$this->yyidx + -2]->minor.' / '.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2201 "Parser.php"
#line 746 "Parser.y"
    function yy_r77(){
    $this->_retvalue = new Wrappers\StaticWrapper('(1 & '.$this->yystack[$this->yyidx + -1]->minor.')');
    }
#line 2206 "Parser.php"
#line 750 "Parser.y"
    function yy_r78(){
    $this->compiler->assert_is_not_strict('`is not odd` is not supported in strict mode', $this);
    $this->_retvalue = new Wrappers\StaticWrapper('!(1 & '.$this->yystack[$this->yyidx + -1]->minor.')');
    }
#line 2212 "Parser.php"
#line 755 "Parser.y"
    function yy_r79(){
    $this->compiler->assert_is_not_strict('`is odd by` is not supported in strict mode', $this);
    $this->_retvalue = new Wrappers\StaticWrapper('(1 & '.$this->yystack[$this->yyidx + -2]->minor.' / '.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2218 "Parser.php"
#line 760 "Parser.y"
    function yy_r80(){
    $this->compiler->assert_is_not_strict('`is not odd by` is not supported in strict mode', $this);
    $this->_retvalue = new Wrappers\StaticWrapper('!(1 & '.$this->yystack[$this->yyidx + -2]->minor.' / '.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2224 "Parser.php"
#line 768 "Parser.y"
    function yy_r81(){
    $this->_retvalue = $this->yystack[$this->yyidx + -6]->minor.' ? '. $this->compileVariable("'".$this->yystack[$this->yyidx + -2]->minor."'") . ' : '.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2229 "Parser.php"
#line 772 "Parser.y"
    function yy_r82(){
    $this->_retvalue = $this->yystack[$this->yyidx + -5]->minor.' ? '.$this->yystack[$this->yyidx + -2]->minor.' : '.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2234 "Parser.php"
#line 782 "Parser.y"
    function yy_r84(){
    $this->_retvalue = Wrappers\StaticWrapper::static_concat($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2239 "Parser.php"
#line 787 "Parser.y"
    function yy_r85(){
    $this->_retvalue = Wrappers\StaticWrapper::static_concat('!', $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2244 "Parser.php"
#line 800 "Parser.y"
    function yy_r88(){
    $this->_retvalue = new Wrappers\StaticWrapper($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2249 "Parser.php"
#line 804 "Parser.y"
    function yy_r89(){
    $this->_retvalue = new Wrappers\StaticWrapper($this->yystack[$this->yyidx + -2]->minor.'.'.$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2254 "Parser.php"
#line 809 "Parser.y"
    function yy_r90(){
    if (preg_match('~^true$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = new Wrappers\StaticWrapper('true');
    } elseif (preg_match('~^false$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = new Wrappers\StaticWrapper('false');
    } elseif (preg_match('~^null$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = new Wrappers\StaticWrapper('null');
    } else {
        $this->_retvalue = new Wrappers\StaticWrapper(var_export($this->yystack[$this->yyidx + 0]->minor, true));
    }
    }
#line 2267 "Parser.php"
#line 827 "Parser.y"
    function yy_r92(){
    $this->_retvalue = Wrappers\StaticWrapper::static_if_all("(". $this->yystack[$this->yyidx + -1]->minor .")", array($this->yystack[$this->yyidx + -1]->minor));
    }
#line 2272 "Parser.php"
#line 862 "Parser.y"
    function yy_r98(){
    $this->_retvalue = $this->compileSafeLookupWithBase($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2277 "Parser.php"
#line 867 "Parser.y"
    function yy_r99(){
    if ($this->yystack[$this->yyidx + -2]->minor != '\'smarty\'') {
        $this->_retvalue = $this->compileSafeLookupWithBase($this->compileVariable($this->yystack[$this->yyidx + -2]->minor), $this->yystack[$this->yyidx + -1]->minor);
        $this->_retvalue = $this->compileSafeLookupWithBase($this->_retvalue, $this->yystack[$this->yyidx + 0]->minor);
    } else {
        switch (Decompile::decompileString($this->yystack[$this->yyidx + -1]->minor)) {
            case 'foreach':
                $this->_retvalue = new Wrappers\StaticWrapper("\$_smarty_tpl->tpl_vars['smarty']->value['foreach'][" . $this->yystack[$this->yyidx + 0]->minor . "]");
                break;
            case 'capture':
                $this->_retvalue = new Wrappers\StaticWrapper("\$_smarty_tpl->tpl_vars['smarty']->value['capture'][" . $this->yystack[$this->yyidx + 0]->minor . "]");
                break;
            default:
                $this->compiler->trigger_template_error('$smarty.' . trim($this->yystack[$this->yyidx + -1]->minor, "'") . ' is invalid');
        }
    }
    }
#line 2296 "Parser.php"
#line 885 "Parser.y"
    function yy_r100(){
    if ($this->yystack[$this->yyidx + -1]->minor !== '\'smarty\'') {
        $this->_retvalue = $this->compileSafeLookupWithBase($this->compileVariable($this->yystack[$this->yyidx + -1]->minor), $this->yystack[$this->yyidx + 0]->minor);
    } else {
        switch (Decompile::decompileString($this->yystack[$this->yyidx + 0]->minor)) {
            case 'now':
                $this->_retvalue = new Wrappers\StaticWrapper('time()');
                break;
            case 'template':
                $this->_retvalue = new Wrappers\StaticWrapper('basename($_smarty_tpl->source->filepath)');
                break;
            case 'version':
                $this->_retvalue = new Wrappers\StaticWrapper(var_export(\Box\Brainy\Brainy::SMARTY_VERSION, true));
                break;
            case 'ldelim':
                $this->_retvalue = new Wrappers\StaticWrapper(var_export($this->compiler->smarty->left_delimiter, true));
                break;
            case 'rdelim':
                $this->_retvalue = new Wrappers\StaticWrapper(var_export($this->compiler->smarty->right_delimiter, true));
                break;
            default:
                $this->compiler->trigger_template_error('$smarty.' . trim($this->yystack[$this->yyidx + 0]->minor, "'") . ' is invalid');
        }
    }
    }
#line 2323 "Parser.php"
#line 911 "Parser.y"
    function yy_r101(){
    $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2328 "Parser.php"
#line 919 "Parser.y"
    function yy_r103(){
    $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2333 "Parser.php"
#line 925 "Parser.y"
    function yy_r104(){
    $this->compiler->assert_is_not_strict('Variable indicies with dot syntax is not supported in strict mode', $this);
    $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2339 "Parser.php"
#line 930 "Parser.y"
    function yy_r105(){
    $this->compiler->assert_is_not_strict('Variable indicies with dot syntax is not supported in strict mode', $this);
    $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + -2]->minor).'->'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2345 "Parser.php"
#line 935 "Parser.y"
    function yy_r106(){
    $this->_retvalue = "'". $this->yystack[$this->yyidx + 0]->minor ."'";
    }
#line 2350 "Parser.php"
#line 943 "Parser.y"
    function yy_r108(){
    $this->compiler->assert_is_not_strict('Dot syntax with expressions is not supported in strict mode', $this);
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 2356 "Parser.php"
#line 961 "Parser.y"
    function yy_r111(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.'.'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2361 "Parser.php"
#line 966 "Parser.y"
    function yy_r112(){
    $this->_retvalue = '\''.$this->yystack[$this->yyidx + 0]->minor.'\'';
    }
#line 2366 "Parser.php"
#line 971 "Parser.y"
    function yy_r113(){
    $this->compiler->assert_is_not_strict('Variable variables are not supported in strict mode', $this);
    $this->_retvalue = '('.$this->yystack[$this->yyidx + -1]->minor.')';
    }
#line 2372 "Parser.php"
#line 981 "Parser.y"
    function yy_r114(){
    if ($this->security && substr($this->yystack[$this->yyidx + 0]->minor, 0, 1) == '_') {
        $this->compiler->trigger_template_error(self::Err1);
    }
    $this->_retvalue = '->'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2380 "Parser.php"
#line 988 "Parser.y"
    function yy_r115(){
    $this->compiler->assert_is_not_strict('Variable method calls are not supported in strict mode', $this);
    if ($this->security) {
        $this->compiler->trigger_template_error(self::Err2);
    }
    $this->_retvalue = '->{'.$this->compileVariable($this->yystack[$this->yyidx + 0]->minor).'}';
    }
#line 2389 "Parser.php"
#line 996 "Parser.y"
    function yy_r116(){
    $this->compiler->assert_is_not_strict('Variable method calls are not supported in strict mode', $this);
    if ($this->security) {
        $this->compiler->trigger_template_error(self::Err2);
    }
    $this->_retvalue = '->{'.$this->yystack[$this->yyidx + -1]->minor.'}';
    }
#line 2398 "Parser.php"
#line 1004 "Parser.y"
    function yy_r117(){
    $this->compiler->assert_is_not_strict('Variable method calls are not supported in strict mode', $this);
    if ($this->security) {
        $this->compiler->trigger_template_error(self::Err2);
    }
    $this->_retvalue = '->{\''.$this->yystack[$this->yyidx + -3]->minor.'\'.'.$this->yystack[$this->yyidx + -1]->minor.'}';
    }
#line 2407 "Parser.php"
#line 1013 "Parser.y"
    function yy_r118(){
    $this->_retvalue = '->'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2412 "Parser.php"
#line 1021 "Parser.y"
    function yy_r119(){
    if ($this->security && !$this->smarty->security_policy->isTrustedPhpFunction($this->yystack[$this->yyidx + -3]->minor, $this->compiler)) {
        $this->compiler->trigger_template_error('Cannot use untrusted function: ' . $this->yystack[$this->yyidx + -3]->minor);
    }
    if (!(strcasecmp($this->yystack[$this->yyidx + -3]->minor, 'isset') === 0 || strcasecmp($this->yystack[$this->yyidx + -3]->minor, 'empty') === 0 || strcasecmp($this->yystack[$this->yyidx + -3]->minor, 'array') === 0 || is_callable($this->yystack[$this->yyidx + -3]->minor))) {
        $this->compiler->trigger_template_error("unknown function \"" . $this->yystack[$this->yyidx + -3]->minor . "\"");
    }

    $func_name = strtolower($this->yystack[$this->yyidx + -3]->minor);

    $is_language_construct = $func_name === 'isset' || $func_name === 'empty';
    $combined_params = array();
    foreach ($this->yystack[$this->yyidx + -1]->minor as $param) {
        if ($is_language_construct && $param instanceof Wrappers\SafeLookupWrapper) {
            $combined_params[] = $param->getUnsafe();
            continue;
        }
        $combined_params[] = $param;
    }
    $par = implode(',', $combined_params);

    if ($func_name == 'isset') {
        if (count($combined_params) !== 1) {
            $this->compiler->trigger_template_error('Illegal number of paramer in "isset()"');
        }
        $isset_par = str_replace("')->value", "',null,true,false)->value", $par);
        $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". $isset_par .")";

    } elseif (in_array($func_name, array('empty', 'reset', 'current', 'end', 'prev', 'next'))) {

        if ($func_name !== 'empty') {
            $this->compiler->assert_is_not_strict($func_name . ' is not allowed in strict mode', $this);
        }

        if (count($combined_params) != 1) {
            $this->compiler->trigger_template_error('Illegal number of paramer in "' . $func_name . '()"');
        }
        if ($func_name == 'empty') {
            $this->_retvalue = $func_name.'('.str_replace("')->value", "',null,true,false)->value",$combined_params[0]).')';
        } else {
            $this->_retvalue = $func_name.'('.$combined_params[0].')';
        }
    } else {
        $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". $par .")";
    }
    }
#line 2460 "Parser.php"
#line 1071 "Parser.y"
    function yy_r120(){
    if ($this->security && substr($this->yystack[$this->yyidx + -3]->minor,0,1) == '_') {
        $this->compiler->trigger_template_error(self::Err1);
    }
    $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". implode(',',$this->yystack[$this->yyidx + -1]->minor) .")";
    }
#line 2468 "Parser.php"
#line 1080 "Parser.y"
    function yy_r121(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -2]->minor,array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 2473 "Parser.php"
#line 1097 "Parser.y"
    function yy_r124(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -2]->minor,array(array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor)));
    }
#line 2478 "Parser.php"
#line 1101 "Parser.y"
    function yy_r125(){
    $this->_retvalue = array(array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor));
    }
#line 2483 "Parser.php"
#line 1105 "Parser.y"
    function yy_r126(){
    $this->compiler->assert_is_not_strict('@ is not allowed in templates', $this);
    $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2489 "Parser.php"
#line 1110 "Parser.y"
    function yy_r127(){
    $this->_retvalue =  array($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2494 "Parser.php"
#line 1115 "Parser.y"
    function yy_r128(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2499 "Parser.php"
#line 1135 "Parser.y"
    function yy_r132(){
    $this->_retvalue = '==';
    }
#line 2504 "Parser.php"
#line 1139 "Parser.y"
    function yy_r133(){
    $this->_retvalue = '!=';
    }
#line 2509 "Parser.php"
#line 1143 "Parser.y"
    function yy_r134(){
    $this->_retvalue = '>';
    }
#line 2514 "Parser.php"
#line 1147 "Parser.y"
    function yy_r135(){
    $this->_retvalue = '<';
    }
#line 2519 "Parser.php"
#line 1151 "Parser.y"
    function yy_r136(){
    $this->_retvalue = '>=';
    }
#line 2524 "Parser.php"
#line 1155 "Parser.y"
    function yy_r137(){
    $this->_retvalue = '<=';
    }
#line 2529 "Parser.php"
#line 1159 "Parser.y"
    function yy_r138(){
    $this->_retvalue = '===';
    }
#line 2534 "Parser.php"
#line 1163 "Parser.y"
    function yy_r139(){
    $this->_retvalue = '!==';
    }
#line 2539 "Parser.php"
#line 1167 "Parser.y"
    function yy_r140(){
    $this->_retvalue = '%';
    }
#line 2544 "Parser.php"
#line 1171 "Parser.y"
    function yy_r141(){
    $this->_retvalue = '&&';
    }
#line 2549 "Parser.php"
#line 1175 "Parser.y"
    function yy_r142(){
    $this->_retvalue = '||';
    }
#line 2554 "Parser.php"
#line 1179 "Parser.y"
    function yy_r143(){
    $this->compiler->assert_is_not_strict('XOR is not supported in strict mode', $this);
    $this->_retvalue = ' XOR ';
    }
#line 2560 "Parser.php"
#line 1187 "Parser.y"
    function yy_r144(){
    $this->_retvalue = 'array('.$this->yystack[$this->yyidx + -1]->minor.')';
    }
#line 2565 "Parser.php"
#line 1195 "Parser.y"
    function yy_r146(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.','.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2570 "Parser.php"
#line 1199 "Parser.y"
    function yy_r147(){
    return;
    }
#line 2575 "Parser.php"
#line 1203 "Parser.y"
    function yy_r148(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'=>'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2580 "Parser.php"
#line 1207 "Parser.y"
    function yy_r149(){
    $this->_retvalue = '\''.$this->yystack[$this->yyidx + -2]->minor.'\'=>'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2585 "Parser.php"
#line 1219 "Parser.y"
    function yy_r151(){
    $this->_retvalue = "''";
    }
#line 2590 "Parser.php"
#line 1223 "Parser.y"
    function yy_r152(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor->to_smarty_php();
    }
#line 2595 "Parser.php"
#line 1228 "Parser.y"
    function yy_r153(){
    $this->yystack[$this->yyidx + -1]->minor->append_subtree($this->yystack[$this->yyidx + 0]->minor);
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 2601 "Parser.php"
#line 1233 "Parser.y"
    function yy_r154(){
    $this->_retvalue = new Helpers\DoubleQuoted($this);
    $this->_retvalue->append_subtree($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2607 "Parser.php"
#line 1238 "Parser.y"
    function yy_r155(){
    $this->_retvalue = new Helpers\Expression('(string)' . $this->compileVariable("'" . substr($this->yystack[$this->yyidx + 0]->minor, 1) . "'"));
    }
#line 2612 "Parser.php"
#line 1242 "Parser.y"
    function yy_r156(){
    $this->_retvalue = new Helpers\Expression('(string)' . $this->yystack[$this->yyidx + -1]->minor);
    }
#line 2617 "Parser.php"
#line 1246 "Parser.y"
    function yy_r157(){
    $this->_retvalue = new Helpers\Expression('(string)(' . $this->yystack[$this->yyidx + -1]->minor . ')');
    }
#line 2622 "Parser.php"
#line 1250 "Parser.y"
    function yy_r158(){
    $this->_retvalue = new Helpers\DoubleQuotedContent($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2627 "Parser.php"

    private $_retvalue;

    public function yy_reduce($yyruleno)
    {
        $yymsp = $this->yystack[$this->yyidx];

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for ($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            if ($yysize) {
                $this->yyidx++;
                $x = new TP_yyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    public function yy_parse_failed()
    {
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
    }

    public function yy_syntax_error($yymajor, $TOKEN)
    {
#line 121 "Parser.y"

    $this->internalError = true;
    $this->yymajor = $yymajor;
    $this->compiler->trigger_template_error();
#line 2681 "Parser.php"
    }

    public function yy_accept()
    {
        while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
#line 114 "Parser.y"

    $this->successful = !$this->internalError;
    $this->internalError = false;
    $this->retvalue = $this->_retvalue;
#line 2695 "Parser.php"
    }

    public function doParse($yymajor, $yytokenvalue)
    {
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */

        if ($this->yyidx === null || $this->yyidx < 0) {
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new TP_yyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);

        do {
            $yyact = $this->yy_find_shift_action($yymajor);
            if ($yymajor < self::YYERRORSYMBOL &&
                  !$this->yy_is_expected_token($yymajor)) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if (self::YYERRORSYMBOL) {
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit) {
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0 &&
                                 $yymx != self::YYERRORSYMBOL &&
        ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                              ){
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}
