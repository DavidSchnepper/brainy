<?php
/**
 * Brainy Internal Plugin Templateparser
 *
 * This is the template parser.
 * It is generated from the Parser.y file
 * @package Brainy
 * @subpackage Compiler
 * @author Uwe Tews
 * @author Matt Basta
 */

namespace Box\Brainy\Compiler;


class TP_yyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};


#line 17 "Parser.y"
class Parser#line 16 "Parser.php"
{
#line 19 "Parser.y"

    const Err1 = "Security error: Call to private object member not allowed";
    const Err2 = "Security error: Call to dynamic object member not allowed";
    // states whether the parse was successful or not
    public $successful = true;
    public $retvalue = 0;
    public static $prefix_number = 0;
    private $lex;
    private $internalError = false;
    private $strip = 0;

    private $safe_lookups = 0;
    private $strict_mode = false;

    public function __construct($lex, $compiler) {
        $this->lex = $lex;
        $this->compiler = $compiler;
        $this->smarty = $this->compiler->smarty;
        $this->template = $this->compiler->template;
        $this->compiler->has_variable_string = false;
        $this->security = isset($this->smarty->security_policy);
        $this->block_nesting_level = 0;
        $this->current_buffer = $this->root_buffer = new Helpers\TemplateBuffer($this);

        $this->safe_lookups = $this->smarty->safe_lookups;
    }

    /**
     * Strips whitespace from a string
     * @param string $string
     * @return string
     */
    protected static function stripString($string) {
        // Replaces whitespace followed by a `<` with null.
        // `     \n     <foo>` -> `<foo>`
        // `     \n     &nbsp;` -> `&nbsp;`
        $string = preg_replace('/\s+(?=<)/ims', '', $string);
        $string = preg_replace('/\s+(?=&)/ims', ' ', $string);
        // Replaces `>` followed by whitespace with `>`
        // `<div>\n  foo` -> `<div>foo`
        $string = preg_replace('/>\s+(?=\S)/ims', '>', $string);
        // Replaces whitespace followed by anything else with a space.
        // `            data-hello="` -> ` data-hello="`
        $string = preg_replace('/\s+(?=\w)/ims', ' ', $string);

        // Is there work to be done at the end of the string?
        if ($string !== rtrim($string)) {
            $string = rtrim($string);
            // If the last non-whitespace character is not a `>`, add a space.
            if (substr($string, -1) !== '>') {
                $string .= ' ';
            }
        }
        return $string;
    }

    /**
     * @return bool
     */
    public function isStrictMode() {
        return $this->strict_mode;
    }

    /**
     * @param string $variable The name of the variable to look up
     * @param string|void $value The member of the SmartyVariable to access
     * @return string|Wrappers\SafeLookupWrapper
     */
    public function compileVariable($variable, $value = 'value')
    {
        $unsafe = '$_smarty_tpl->tpl_vars[' . $variable . ']->' . $value;
        if ($this->safe_lookups === 0) { // Unsafe lookups
            return $unsafe;
        }
        $safe = '\Box\Brainy\Runtime\Lookups::safeVarLookup($_smarty_tpl->tpl_vars, '. $variable .', ' . $this->safe_lookups . ')->' . $value;
        return new Wrappers\SafeLookupWrapper($unsafe, $safe);
    }

    /**
     * @param string $base
     * @param string $variable
     * @return string|Wrappers\SafeLookupWrapper
     */
    public function compileSafeLookupWithBase($base, $variable)
    {
        $unsafe = $base . '[' . $variable . ']';
        if ($this->safe_lookups === 0) { // Unsafe lookups
            return $unsafe;
        }
        $safe = 'smarty_safe_array_lookup(' . $base . ', '. $variable .', ' . $this->safe_lookups . ')';
        return new Wrappers\SafeLookupWrapper($unsafe, $safe);
    }
#line 112 "Parser.php"

    const TP_VERT                           =  1;
    const TP_COLON                          =  2;
    const TP_SETSTRICT                      =  3;
    const TP_RDEL                           =  4;
    const TP_COMMENT                        =  5;
    const TP_TEXT                           =  6;
    const TP_STRIPON                        =  7;
    const TP_STRIPOFF                       =  8;
    const TP_BLOCKSOURCE                    =  9;
    const TP_LITERALSTART                   = 10;
    const TP_LITERALEND                     = 11;
    const TP_LITERAL                        = 12;
    const TP_LDEL                           = 13;
    const TP_EQUAL                          = 14;
    const TP_DOLLAR                         = 15;
    const TP_ID                             = 16;
    const TP_LDELIF                         = 17;
    const TP_LDELFOR                        = 18;
    const TP_SEMICOLON                      = 19;
    const TP_INCDEC                         = 20;
    const TP_TO                             = 21;
    const TP_STEP                           = 22;
    const TP_LDELFOREACH                    = 23;
    const TP_SPACE                          = 24;
    const TP_AS                             = 25;
    const TP_APTR                           = 26;
    const TP_LDELSETFILTER                  = 27;
    const TP_SMARTYBLOCKCHILDPARENT         = 28;
    const TP_LDELSLASH                      = 29;
    const TP_ATTR                           = 30;
    const TP_INTEGER                        = 31;
    const TP_COMMA                          = 32;
    const TP_OPENP                          = 33;
    const TP_CLOSEP                         = 34;
    const TP_MATH                           = 35;
    const TP_UNIMATH                        = 36;
    const TP_ANDSYM                         = 37;
    const TP_ISIN                           = 38;
    const TP_ISDIVBY                        = 39;
    const TP_ISNOTDIVBY                     = 40;
    const TP_ISEVEN                         = 41;
    const TP_ISNOTEVEN                      = 42;
    const TP_ISEVENBY                       = 43;
    const TP_ISNOTEVENBY                    = 44;
    const TP_ISODD                          = 45;
    const TP_ISNOTODD                       = 46;
    const TP_ISODDBY                        = 47;
    const TP_ISNOTODDBY                     = 48;
    const TP_QMARK                          = 49;
    const TP_NOT                            = 50;
    const TP_TYPECAST                       = 51;
    const TP_DOT                            = 52;
    const TP_SINGLEQUOTESTRING              = 53;
    const TP_AT                             = 54;
    const TP_OPENB                          = 55;
    const TP_CLOSEB                         = 56;
    const TP_PTR                            = 57;
    const TP_EQUALS                         = 58;
    const TP_NOTEQUALS                      = 59;
    const TP_GREATERTHAN                    = 60;
    const TP_LESSTHAN                       = 61;
    const TP_GREATEREQUAL                   = 62;
    const TP_LESSEQUAL                      = 63;
    const TP_IDENTITY                       = 64;
    const TP_NONEIDENTITY                   = 65;
    const TP_MOD                            = 66;
    const TP_LAND                           = 67;
    const TP_LOR                            = 68;
    const TP_LXOR                           = 69;
    const TP_QUOTE                          = 70;
    const TP_DOLLARID                       = 71;
    const YY_NO_ACTION = 465;
    const YY_ACCEPT_ACTION = 464;
    const YY_ERROR_ACTION = 463;

    const YY_SZ_ACTTAB = 2003;
static public $yy_action = array(
 /*     0 */   181,   14,  246,  242,  243,  244,  249,  165,    2,  191,
 /*    10 */     5,  262,  176,  128,   32,   99,  196,  203,   15,  197,
 /*    20 */   113,   29,   39,   39,  190,  152,  205,  258,   38,   38,
 /*    30 */   226,  232,  106,  123,   47,   44,   48,   41,   37,   25,
 /*    40 */   284,  282,   28,   20,  281,  223,   23,   24,  181,  181,
 /*    50 */   181,  107,  323,  350,  165,  256,  254,  278,  279,  280,
 /*    60 */   285,  286,  291,  292,  290,  289,  287,  288,  277,  464,
 /*    70 */    87,   39,   39,  350,  183,  265,  263,   38,   38,  350,
 /*    80 */   105,    2,   47,   44,   48,   41,   37,   25,  284,  282,
 /*    90 */    28,   20,  281,  223,   23,   24,  181,  250,   10,  347,
 /*   100 */    21,  241,  109,  234,  181,  278,  279,  280,  285,  286,
 /*   110 */   291,  292,  290,  289,  287,  288,  277,  181,  235,  347,
 /*   120 */   191,   97,  156,   10,  130,  347,  241,   66,  203,  171,
 /*   130 */   199,  252,   30,  197,   39,  158,  152,  225,  276,  195,
 /*   140 */    38,  226,  232,  106,  171,  169,  164,   30,  174,  135,
 /*   150 */   161,   47,   44,   48,   41,   37,   25,  284,  282,   28,
 /*   160 */    20,  281,  223,   23,   24,  181,   10,   11,  181,  241,
 /*   170 */   169,  350,  166,  216,  278,  279,  280,  285,  286,  291,
 /*   180 */   292,  290,  289,  287,  288,  277,   22,   31,   35,  193,
 /*   190 */   218,  350,   90,  211,  185,  245,  169,  350,  160,   47,
 /*   200 */    44,   48,   41,   37,   25,  284,  282,   28,   20,  281,
 /*   210 */   223,   23,   24,  181,  181,  181,    2,  344,  313,  247,
 /*   220 */   185,  245,  278,  279,  280,  285,  286,  291,  292,  290,
 /*   230 */   289,  287,  288,  277,   35,  188,  293,   39,   39,  272,
 /*   240 */    12,   98,   10,   38,   38,  241,  228,   47,   44,   48,
 /*   250 */    41,   37,   25,  284,  282,   28,   20,  281,  223,   23,
 /*   260 */    24,  181,   10,   18,  271,  241,  162,  255,  273,  257,
 /*   270 */   278,  279,  280,  285,  286,  291,  292,  290,  289,  287,
 /*   280 */   288,  277,   34,  198,  108,  182,   13,  181,  168,    4,
 /*   290 */   169,  240,   38,   16,   33,   47,   44,   48,   41,   37,
 /*   300 */    25,  284,  282,   28,   20,  281,  223,   23,   24,  181,
 /*   310 */    39,  187,  260,  268,    3,  194,   38,  159,  278,  279,
 /*   320 */   280,  285,  286,  291,  292,  290,  289,  287,  288,  277,
 /*   330 */   119,  194,   10,  181,  181,  241,  319,  239,  237,   10,
 /*   340 */   230,  224,  186,   47,   44,   48,   41,   37,   25,  284,
 /*   350 */   282,   28,   20,  281,  223,   23,   24,  181,    6,    9,
 /*   360 */   134,  267,  163,  261,  209,   93,  278,  279,  280,  285,
 /*   370 */   286,  291,  292,  290,  289,  287,  288,  277,  202,  228,
 /*   380 */   233,  181,   42,  259,  219,  229,  169,  197,   17,    7,
 /*   390 */   117,   47,   44,   48,   41,   37,   25,  284,  282,   28,
 /*   400 */    20,  281,  223,   23,   24,  181,   10,  228,  124,  184,
 /*   410 */    19,  150,  217,   94,  278,  279,  280,  285,  286,  291,
 /*   420 */   292,  290,  289,  287,  288,  277,  233,  143,  233,  236,
 /*   430 */   116,   36,  269,  248,   40,    2,  252,  115,  204,   47,
 /*   440 */    44,   48,   41,   37,   25,  284,  282,   28,   20,  281,
 /*   450 */   223,   23,   24,  181,  167,  227,  270,  112,  238,  101,
 /*   460 */    92,   91,  278,  279,  280,  285,  286,  291,  292,  290,
 /*   470 */   289,  287,  288,  277,  233,  233,  233,  139,  111,  212,
 /*   480 */   251,  253,  155,  210,  189,  215,  252,   47,   44,   48,
 /*   490 */    41,   37,   25,  284,  282,   28,   20,  281,  223,   23,
 /*   500 */    24,  181,  264,   42,  221,  240,  283,  138,  137,  136,
 /*   510 */   278,  279,  280,  285,  286,  291,  292,  290,  289,  287,
 /*   520 */   288,  277,  233,  233,  233,  283,   26,  283,  283,  283,
 /*   530 */   283,  283,  283,  283,  283,   47,   44,   48,   41,   37,
 /*   540 */    25,  284,  282,   28,   20,  281,  223,   23,   24,  181,
 /*   550 */   283,  283,  283,  283,  283,  283,  114,  283,  278,  279,
 /*   560 */   280,  285,  286,  291,  292,  290,  289,  287,  288,  277,
 /*   570 */   253,  283,  283,  283,  283,  283,  283,  283,  283,  283,
 /*   580 */   283,  283,  222,   47,   44,   48,   41,   37,   25,  284,
 /*   590 */   282,   28,   20,  281,  223,   23,   24,  181,  283,  283,
 /*   600 */   214,  283,  283,  283,  283,  283,  278,  279,  280,  285,
 /*   610 */   286,  291,  292,  290,  289,  287,  288,  277,  283,  283,
 /*   620 */   283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
 /*   630 */   283,   47,   44,   48,   41,   37,   25,  284,  282,   28,
 /*   640 */    20,  281,  223,   23,   24,  181,  283,  283,  283,  283,
 /*   650 */   283,  283,  283,  283,  278,  279,  280,  285,  286,  291,
 /*   660 */   292,  290,  289,  287,  288,  277,  262,  283,  283,  283,
 /*   670 */   283,  283,  283,   15,  283,  283,  283,  283,  283,   47,
 /*   680 */    44,   48,   41,   37,   25,  284,  282,   28,   20,  281,
 /*   690 */   223,   23,   24,  283,  283,  283,  283,  283,  283,  283,
 /*   700 */   283,  283,  278,  279,  280,  285,  286,  291,  292,  290,
 /*   710 */   289,  287,  288,  277,  283,   47,   44,   48,   41,   37,
 /*   720 */    25,  284,  282,   28,   20,  281,  223,   23,   24,  283,
 /*   730 */   266,  263,  283,  283,  283,  283,  283,  283,  278,  279,
 /*   740 */   280,  285,  286,  291,  292,  290,  289,  287,  288,  277,
 /*   750 */   140,  283,    5,  283,  110,   88,   32,   99,  283,  252,
 /*   760 */   283,  191,  113,  283,  283,  133,  190,  213,  205,  203,
 /*   770 */   200,  283,    8,  168,  283,   46,  147,  152,  283,  220,
 /*   780 */   283,  283,  226,  232,  106,  252,  166,  146,  283,   43,
 /*   790 */    45,  201,  231,  153,    1,  148,  252,  283,  283,  168,
 /*   800 */    22,   31,  252,    5,  252,  122,  192,   32,   99,  104,
 /*   810 */   169,  144,  283,  113,  283,  253,  168,  190,  283,  205,
 /*   820 */   252,  200,   10,    8,  283,  241,   46,  283,  283,  283,
 /*   830 */   191,  253,  283,   39,  121,  207,  283,   70,  203,   38,
 /*   840 */    43,   45,  201,  231,  283,    1,  152,  225,  276,  283,
 /*   850 */   283,  226,  232,  106,    5,  283,  122,  172,   32,   99,
 /*   860 */   104,  173,  275,  283,  113,  283,  283,  283,  190,  283,
 /*   870 */   205,  283,  200,   10,    8,  283,  241,   46,  283,  283,
 /*   880 */   283,  191,  283,  283,   39,  121,  208,  283,   70,  203,
 /*   890 */    38,   43,   45,  201,  231,  283,    1,  152,  225,  276,
 /*   900 */   283,  283,  226,  232,  106,    5,  283,  122,  192,   32,
 /*   910 */    99,  104,  283,  274,  283,  113,  283,   96,  142,  190,
 /*   920 */   283,  205,  283,  200,  283,   27,  145,  252,   46,  283,
 /*   930 */   283,  283,  191,  283,  283,  252,  130,  283,  283,   83,
 /*   940 */   203,  169,   43,   45,  201,  231,  253,    1,  152,  225,
 /*   950 */   276,  283,  283,  226,  232,  106,    5,  283,  122,  170,
 /*   960 */    32,   99,  104,  283,  283,  283,  113,  283,  151,  283,
 /*   970 */   190,  283,  205,  283,  178,  283,    8,  252,  283,   46,
 /*   980 */   283,  283,  283,  191,  283,  283,  283,  130,  253,  283,
 /*   990 */    73,  203,  283,   43,   45,  201,  231,  283,    1,  152,
 /*  1000 */   225,  276,  283,  283,  226,  232,  106,    5,  283,  120,
 /*  1010 */   192,   32,   99,  104,  283,  283,  283,  113,  283,  283,
 /*  1020 */   283,  190,  283,  205,  283,  200,  283,    8,  283,  283,
 /*  1030 */    46,  283,  283,  283,  191,  283,  283,  283,  130,  283,
 /*  1040 */   283,   50,  203,  283,   43,   45,  201,  231,  283,    1,
 /*  1050 */   152,  225,  276,  283,  283,  226,  232,  106,    5,  283,
 /*  1060 */   122,  177,   32,   99,  104,  283,  283,  283,  113,  283,
 /*  1070 */   283,  283,  190,  283,  205,  283,  200,  283,    8,  283,
 /*  1080 */   283,   46,  283,  283,  283,  191,  283,  283,  283,  130,
 /*  1090 */   283,  283,   61,  179,  283,   43,   45,  201,  231,  283,
 /*  1100 */     1,  152,  225,  276,  283,  283,  226,  232,  106,    5,
 /*  1110 */   283,  122,  192,   32,   99,  104,  283,  283,  283,  113,
 /*  1120 */   283,  283,  283,  190,  283,  205,  283,  200,  283,   27,
 /*  1130 */   283,  283,   46,  283,  283,  283,  191,  283,  283,  283,
 /*  1140 */   130,  283,  283,   66,  203,  283,   43,   45,  201,  231,
 /*  1150 */   283,  283,  152,  225,  276,  283,  283,  226,  232,  106,
 /*  1160 */   283,  283,  283,  191,  175,  283,  104,  130,  283,  283,
 /*  1170 */    58,  203,  348,  283,  283,  283,  283,  283,  283,  152,
 /*  1180 */   225,  276,  206,  283,  226,  232,  106,  191,  283,  283,
 /*  1190 */   283,  130,  348,  283,   69,  203,  283,  283,  348,  283,
 /*  1200 */   283,    2,  283,  152,  225,  276,  283,  191,  226,  232,
 /*  1210 */   106,  130,  283,  283,   54,  203,  283,  283,  283,  283,
 /*  1220 */   283,  283,  283,  152,  225,  276,  283,  191,  226,  232,
 /*  1230 */   106,   89,  283,  283,   53,  180,  283,  283,  283,  283,
 /*  1240 */   283,  283,  283,  152,  225,  276,  283,  283,  226,  232,
 /*  1250 */   106,  283,  283,  166,  157,  283,  283,  191,  283,  283,
 /*  1260 */   283,  130,  283,  252,   80,  203,  283,   22,   31,  283,
 /*  1270 */   283,  283,  283,  152,  225,  276,  283,  169,  226,  232,
 /*  1280 */   106,  191,  283,  283,  283,  130,  283,  283,   71,  203,
 /*  1290 */   283,  283,  283,  283,  283,  283,  283,  152,  225,  276,
 /*  1300 */   283,  191,  226,  232,  106,  130,  283,  283,   59,  203,
 /*  1310 */   283,  283,  283,  283,  283,  283,  283,  152,  225,  276,
 /*  1320 */   283,  191,  226,  232,  106,  130,  283,  283,   52,  203,
 /*  1330 */   283,  283,  283,  283,  283,  283,  283,  152,  225,  276,
 /*  1340 */   283,  283,  226,  232,  106,  283,  166,  149,  283,  283,
 /*  1350 */   283,  191,  283,  283,  283,  130,  252,  283,   65,  203,
 /*  1360 */    22,   31,  283,  283,  283,  283,  283,  152,  225,  276,
 /*  1370 */   169,  283,  226,  232,  106,  191,  283,  283,  283,  130,
 /*  1380 */   283,  283,   76,  203,  283,  283,  283,  283,  283,  283,
 /*  1390 */   283,  152,  225,  276,  283,  191,  226,  232,  106,  100,
 /*  1400 */   283,  283,   60,  203,  283,  283,  283,  283,  283,  283,
 /*  1410 */   283,  152,  225,  276,  283,  191,  226,  232,  106,  130,
 /*  1420 */   283,  283,   63,  203,  283,  283,  283,  283,  283,  283,
 /*  1430 */   283,  152,  225,  276,  283,  283,  226,  232,  106,  283,
 /*  1440 */   283,   95,  154,  283,  283,  191,  283,  283,  283,  130,
 /*  1450 */   283,  252,   84,  203,  283,   22,   31,  283,  283,  283,
 /*  1460 */   283,  152,  225,  276,  283,  169,  226,  232,  106,  191,
 /*  1470 */   283,  283,  283,  130,  283,  283,   68,  203,  283,  283,
 /*  1480 */   283,  283,  283,  283,  283,  152,  225,  276,  283,  191,
 /*  1490 */   226,  232,  106,  102,  283,  283,   77,  203,  283,  283,
 /*  1500 */   283,  283,  283,  283,  283,  152,  225,  276,  283,  191,
 /*  1510 */   226,  232,  106,  130,  283,  283,   64,  203,  283,  283,
 /*  1520 */   283,  283,  283,  283,  283,  152,  225,  276,  283,  283,
 /*  1530 */   226,  232,  106,  283,  166,  141,  283,  283,  283,  191,
 /*  1540 */   283,  283,  283,  130,  252,  283,   81,  203,   22,   31,
 /*  1550 */   283,  283,  283,  283,  283,  152,  225,  276,  169,  283,
 /*  1560 */   226,  232,  106,  191,  283,  283,  283,  103,  283,  283,
 /*  1570 */    67,  203,  283,  283,  283,  283,  283,  283,  283,  152,
 /*  1580 */   225,  276,  283,  191,  226,  232,  106,  130,  283,  283,
 /*  1590 */    78,  203,  283,  283,  283,  283,  283,  283,  283,  152,
 /*  1600 */   225,  276,  283,  191,  226,  232,  106,  130,  283,  283,
 /*  1610 */    62,  203,  283,  283,  283,  283,  283,  283,  283,  152,
 /*  1620 */   225,  276,  283,  283,  226,  232,  106,  283,  283,  283,
 /*  1630 */   283,  283,  283,  191,  283,  283,  283,  130,  283,  283,
 /*  1640 */    86,  203,  283,  283,  283,  283,  283,  283,  283,  152,
 /*  1650 */   225,  276,  283,  283,  226,  232,  106,  191,  283,  283,
 /*  1660 */   283,  130,  283,  283,   74,  203,  283,  283,  283,  283,
 /*  1670 */   283,  283,  283,  152,  225,  276,  283,  191,  226,  232,
 /*  1680 */   106,  130,  283,  283,   49,  203,  283,  283,  283,  283,
 /*  1690 */   283,  283,  283,  152,  225,  276,  283,  191,  226,  232,
 /*  1700 */   106,  130,  283,  283,   79,  203,  283,  283,  283,  283,
 /*  1710 */   283,  283,  283,  152,  225,  276,  283,  283,  226,  232,
 /*  1720 */   106,  283,  283,  283,  283,  283,  283,  191,  283,  283,
 /*  1730 */   283,  130,  283,  283,   75,  203,  283,  283,  283,  283,
 /*  1740 */   283,  283,  283,  152,  225,  276,  283,  283,  226,  232,
 /*  1750 */   106,  191,  283,  283,  283,  130,  283,  283,   82,  203,
 /*  1760 */   283,  283,  283,  283,  283,  283,  283,  152,  225,  276,
 /*  1770 */   283,  191,  226,  232,  106,  130,  283,  283,   56,  203,
 /*  1780 */   283,  283,  283,  283,  283,  283,  283,  152,  225,  276,
 /*  1790 */   283,  191,  226,  232,  106,  130,  283,  283,   57,  203,
 /*  1800 */   283,  283,  283,  283,  283,  283,  283,  152,  225,  276,
 /*  1810 */   283,  283,  226,  232,  106,  283,  283,  283,  283,  283,
 /*  1820 */   283,  191,  283,  283,  283,  118,  283,  283,   51,  203,
 /*  1830 */   283,  283,  283,  283,  283,  283,  283,  152,  225,  276,
 /*  1840 */   283,  283,  226,  232,  106,  191,  283,  283,  283,  130,
 /*  1850 */   283,  283,   85,  203,  283,  283,  283,  283,  283,  283,
 /*  1860 */   283,  152,  225,  276,  283,  191,  226,  232,  106,  130,
 /*  1870 */   283,  283,   55,  203,  283,  283,  283,  283,  283,  283,
 /*  1880 */   283,  152,  225,  276,  283,  191,  226,  232,  106,  130,
 /*  1890 */   283,  283,   72,  203,  283,  283,  283,  283,  283,  283,
 /*  1900 */   283,  152,  225,  276,  283,  283,  226,  232,  106,  283,
 /*  1910 */   283,  283,  283,  283,  283,  191,  283,  283,  283,  129,
 /*  1920 */   283,  283,  283,  203,  283,  283,  283,  283,  283,  283,
 /*  1930 */   283,  152,  283,  283,  283,  283,  226,  232,  106,  191,
 /*  1940 */   283,  283,  283,  126,  283,  283,  283,  203,  283,  283,
 /*  1950 */   191,  283,  283,  283,  132,  152,  283,  283,  203,  191,
 /*  1960 */   226,  232,  106,  125,  283,  283,  152,  203,  283,  283,
 /*  1970 */   191,  226,  232,  106,  127,  152,  283,  283,  203,  191,
 /*  1980 */   226,  232,  106,  131,  283,  283,  152,  203,  283,  283,
 /*  1990 */   283,  226,  232,  106,  283,  152,  283,  283,  283,  283,
 /*  2000 */   226,  232,  106,
    );
    static public $yy_lookahead = array(
 /*     0 */     1,   26,    5,    6,    7,    8,    9,   10,   33,   77,
 /*    10 */    13,    6,   86,   81,   17,   18,   90,   85,   13,   93,
 /*    20 */    23,   22,   24,   24,   27,   93,   29,   95,   30,   30,
 /*    30 */    98,   99,  100,   15,   35,   36,   37,   38,   39,   40,
 /*    40 */    41,   42,   43,   44,   45,   46,   47,   48,    1,    1,
 /*    50 */     1,   33,    4,    4,   10,   11,   12,   58,   59,   60,
 /*    60 */    61,   62,   63,   64,   65,   66,   67,   68,   69,   73,
 /*    70 */    74,   24,   24,   24,   25,   70,   71,   30,   30,   30,
 /*    80 */    79,   33,   35,   36,   37,   38,   39,   40,   41,   42,
 /*    90 */    43,   44,   45,   46,   47,   48,    1,   11,   13,    4,
 /*   100 */    13,   16,   15,   16,    1,   58,   59,   60,   61,   62,
 /*   110 */    63,   64,   65,   66,   67,   68,   69,    1,   31,   24,
 /*   120 */    77,   82,   83,   13,   81,   30,   16,   84,   85,   52,
 /*   130 */    90,   92,   55,   93,   24,   19,   93,   94,   95,   54,
 /*   140 */    30,   98,   99,  100,   52,  106,   82,   55,  105,   57,
 /*   150 */    91,   35,   36,   37,   38,   39,   40,   41,   42,   43,
 /*   160 */    44,   45,   46,   47,   48,    1,   13,   14,    1,   16,
 /*   170 */   106,    4,   82,   20,   58,   59,   60,   61,   62,   63,
 /*   180 */    64,   65,   66,   67,   68,   69,   96,   97,   32,   25,
 /*   190 */    34,   24,   75,   76,   77,   78,  106,   30,   91,   35,
 /*   200 */    36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
 /*   210 */    46,   47,   48,    1,    1,    1,   33,    4,    4,   76,
 /*   220 */    77,   78,   58,   59,   60,   61,   62,   63,   64,   65,
 /*   230 */    66,   67,   68,   69,   32,   52,   34,   24,   24,   56,
 /*   240 */    14,   91,   13,   30,   30,   16,   20,   35,   36,   37,
 /*   250 */    38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
 /*   260 */    48,    1,   13,   14,    4,   16,   82,   78,   56,   80,
 /*   270 */    58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
 /*   280 */    68,   69,   13,   54,   15,   16,   24,    1,  106,   32,
 /*   290 */   106,  107,   30,   14,   13,   35,   36,   37,   38,   39,
 /*   300 */    40,   41,   42,   43,   44,   45,   46,   47,   48,    1,
 /*   310 */    24,   16,    4,   56,   33,   52,   30,   19,   58,   59,
 /*   320 */    60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
 /*   330 */    32,   52,   13,    1,    1,   16,    4,  101,  102,   13,
 /*   340 */    16,   31,   16,   35,   36,   37,   38,   39,   40,   41,
 /*   350 */    42,   43,   44,   45,   46,   47,   48,    1,    2,   26,
 /*   360 */   110,  111,   82,    4,   34,   88,   58,   59,   60,   61,
 /*   370 */    62,   63,   64,   65,   66,   67,   68,   69,   54,   20,
 /*   380 */   103,    1,    2,   16,   90,   16,  106,   93,   14,   49,
 /*   390 */    15,   35,   36,   37,   38,   39,   40,   41,   42,   43,
 /*   400 */    44,   45,   46,   47,   48,    1,   13,   20,   16,   16,
 /*   410 */    21,   88,   16,   88,   58,   59,   60,   61,   62,   63,
 /*   420 */    64,   65,   66,   67,   68,   69,  103,   83,  103,   16,
 /*   430 */    15,   14,   56,    4,    2,   33,   92,   15,   34,   35,
 /*   440 */    36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
 /*   450 */    46,   47,   48,    1,   16,   31,    4,   15,    4,   88,
 /*   460 */    88,   88,   58,   59,   60,   61,   62,   63,   64,   65,
 /*   470 */    66,   67,   68,   69,  103,  103,  103,   83,   15,    3,
 /*   480 */    92,  103,  101,  104,   87,   24,   92,   35,   36,   37,
 /*   490 */    38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
 /*   500 */    48,    1,  111,    2,    4,  107,  101,   88,   88,   88,
 /*   510 */    58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
 /*   520 */    68,   69,  103,  103,  103,  112,   87,  112,  112,  112,
 /*   530 */   112,  112,  112,  112,  112,   35,   36,   37,   38,   39,
 /*   540 */    40,   41,   42,   43,   44,   45,   46,   47,   48,    1,
 /*   550 */   112,  112,  112,  112,  112,  112,   89,  112,   58,   59,
 /*   560 */    60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
 /*   570 */   103,  112,  112,  112,  112,  112,  112,  112,  112,  112,
 /*   580 */   112,  112,   34,   35,   36,   37,   38,   39,   40,   41,
 /*   590 */    42,   43,   44,   45,   46,   47,   48,    1,  112,  112,
 /*   600 */     4,  112,  112,  112,  112,  112,   58,   59,   60,   61,
 /*   610 */    62,   63,   64,   65,   66,   67,   68,   69,  112,  112,
 /*   620 */   112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
 /*   630 */   112,   35,   36,   37,   38,   39,   40,   41,   42,   43,
 /*   640 */    44,   45,   46,   47,   48,    1,  112,  112,  112,  112,
 /*   650 */   112,  112,  112,  112,   58,   59,   60,   61,   62,   63,
 /*   660 */    64,   65,   66,   67,   68,   69,    6,  112,  112,  112,
 /*   670 */   112,  112,  112,   13,  112,  112,  112,  112,  112,   35,
 /*   680 */    36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
 /*   690 */    46,   47,   48,  112,  112,  112,  112,  112,  112,  112,
 /*   700 */   112,  112,   58,   59,   60,   61,   62,   63,   64,   65,
 /*   710 */    66,   67,   68,   69,  112,   35,   36,   37,   38,   39,
 /*   720 */    40,   41,   42,   43,   44,   45,   46,   47,   48,  112,
 /*   730 */    70,   71,  112,  112,  112,  112,  112,  112,   58,   59,
 /*   740 */    60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
 /*   750 */    83,  112,   13,  112,   15,   16,   17,   18,  112,   92,
 /*   760 */   112,   77,   23,  112,  112,   81,   27,   28,   29,   85,
 /*   770 */    31,  112,   33,  106,  112,   36,   83,   93,  112,   95,
 /*   780 */   112,  112,   98,   99,  100,   92,   82,   83,  112,   50,
 /*   790 */    51,   52,   53,   83,   55,   83,   92,  112,  112,  106,
 /*   800 */    96,   97,   92,   13,   92,   15,   16,   17,   18,   70,
 /*   810 */   106,   83,  112,   23,  112,  103,  106,   27,  112,   29,
 /*   820 */    92,   31,   13,   33,  112,   16,   36,  112,  112,  112,
 /*   830 */    77,  103,  112,   24,   81,   26,  112,   84,   85,   30,
 /*   840 */    50,   51,   52,   53,  112,   55,   93,   94,   95,  112,
 /*   850 */   112,   98,   99,  100,   13,  112,   15,   16,   17,   18,
 /*   860 */    70,  108,  109,  112,   23,  112,  112,  112,   27,  112,
 /*   870 */    29,  112,   31,   13,   33,  112,   16,   36,  112,  112,
 /*   880 */   112,   77,  112,  112,   24,   81,   26,  112,   84,   85,
 /*   890 */    30,   50,   51,   52,   53,  112,   55,   93,   94,   95,
 /*   900 */   112,  112,   98,   99,  100,   13,  112,   15,   16,   17,
 /*   910 */    18,   70,  112,  109,  112,   23,  112,   82,   83,   27,
 /*   920 */   112,   29,  112,   31,  112,   33,   83,   92,   36,  112,
 /*   930 */   112,  112,   77,  112,  112,   92,   81,  112,  112,   84,
 /*   940 */    85,  106,   50,   51,   52,   53,  103,   55,   93,   94,
 /*   950 */    95,  112,  112,   98,   99,  100,   13,  112,   15,   16,
 /*   960 */    17,   18,   70,  112,  112,  112,   23,  112,   83,  112,
 /*   970 */    27,  112,   29,  112,   31,  112,   33,   92,  112,   36,
 /*   980 */   112,  112,  112,   77,  112,  112,  112,   81,  103,  112,
 /*   990 */    84,   85,  112,   50,   51,   52,   53,  112,   55,   93,
 /*  1000 */    94,   95,  112,  112,   98,   99,  100,   13,  112,   15,
 /*  1010 */    16,   17,   18,   70,  112,  112,  112,   23,  112,  112,
 /*  1020 */   112,   27,  112,   29,  112,   31,  112,   33,  112,  112,
 /*  1030 */    36,  112,  112,  112,   77,  112,  112,  112,   81,  112,
 /*  1040 */   112,   84,   85,  112,   50,   51,   52,   53,  112,   55,
 /*  1050 */    93,   94,   95,  112,  112,   98,   99,  100,   13,  112,
 /*  1060 */    15,   16,   17,   18,   70,  112,  112,  112,   23,  112,
 /*  1070 */   112,  112,   27,  112,   29,  112,   31,  112,   33,  112,
 /*  1080 */   112,   36,  112,  112,  112,   77,  112,  112,  112,   81,
 /*  1090 */   112,  112,   84,   85,  112,   50,   51,   52,   53,  112,
 /*  1100 */    55,   93,   94,   95,  112,  112,   98,   99,  100,   13,
 /*  1110 */   112,   15,   16,   17,   18,   70,  112,  112,  112,   23,
 /*  1120 */   112,  112,  112,   27,  112,   29,  112,   31,  112,   33,
 /*  1130 */   112,  112,   36,  112,  112,  112,   77,  112,  112,  112,
 /*  1140 */    81,  112,  112,   84,   85,  112,   50,   51,   52,   53,
 /*  1150 */   112,  112,   93,   94,   95,  112,  112,   98,   99,  100,
 /*  1160 */   112,  112,  112,   77,  105,  112,   70,   81,  112,  112,
 /*  1170 */    84,   85,    4,  112,  112,  112,  112,  112,  112,   93,
 /*  1180 */    94,   95,   14,  112,   98,   99,  100,   77,  112,  112,
 /*  1190 */   112,   81,   24,  112,   84,   85,  112,  112,   30,  112,
 /*  1200 */   112,   33,  112,   93,   94,   95,  112,   77,   98,   99,
 /*  1210 */   100,   81,  112,  112,   84,   85,  112,  112,  112,  112,
 /*  1220 */   112,  112,  112,   93,   94,   95,  112,   77,   98,   99,
 /*  1230 */   100,   81,  112,  112,   84,   85,  112,  112,  112,  112,
 /*  1240 */   112,  112,  112,   93,   94,   95,  112,  112,   98,   99,
 /*  1250 */   100,  112,  112,   82,   83,  112,  112,   77,  112,  112,
 /*  1260 */   112,   81,  112,   92,   84,   85,  112,   96,   97,  112,
 /*  1270 */   112,  112,  112,   93,   94,   95,  112,  106,   98,   99,
 /*  1280 */   100,   77,  112,  112,  112,   81,  112,  112,   84,   85,
 /*  1290 */   112,  112,  112,  112,  112,  112,  112,   93,   94,   95,
 /*  1300 */   112,   77,   98,   99,  100,   81,  112,  112,   84,   85,
 /*  1310 */   112,  112,  112,  112,  112,  112,  112,   93,   94,   95,
 /*  1320 */   112,   77,   98,   99,  100,   81,  112,  112,   84,   85,
 /*  1330 */   112,  112,  112,  112,  112,  112,  112,   93,   94,   95,
 /*  1340 */   112,  112,   98,   99,  100,  112,   82,   83,  112,  112,
 /*  1350 */   112,   77,  112,  112,  112,   81,   92,  112,   84,   85,
 /*  1360 */    96,   97,  112,  112,  112,  112,  112,   93,   94,   95,
 /*  1370 */   106,  112,   98,   99,  100,   77,  112,  112,  112,   81,
 /*  1380 */   112,  112,   84,   85,  112,  112,  112,  112,  112,  112,
 /*  1390 */   112,   93,   94,   95,  112,   77,   98,   99,  100,   81,
 /*  1400 */   112,  112,   84,   85,  112,  112,  112,  112,  112,  112,
 /*  1410 */   112,   93,   94,   95,  112,   77,   98,   99,  100,   81,
 /*  1420 */   112,  112,   84,   85,  112,  112,  112,  112,  112,  112,
 /*  1430 */   112,   93,   94,   95,  112,  112,   98,   99,  100,  112,
 /*  1440 */   112,   82,   83,  112,  112,   77,  112,  112,  112,   81,
 /*  1450 */   112,   92,   84,   85,  112,   96,   97,  112,  112,  112,
 /*  1460 */   112,   93,   94,   95,  112,  106,   98,   99,  100,   77,
 /*  1470 */   112,  112,  112,   81,  112,  112,   84,   85,  112,  112,
 /*  1480 */   112,  112,  112,  112,  112,   93,   94,   95,  112,   77,
 /*  1490 */    98,   99,  100,   81,  112,  112,   84,   85,  112,  112,
 /*  1500 */   112,  112,  112,  112,  112,   93,   94,   95,  112,   77,
 /*  1510 */    98,   99,  100,   81,  112,  112,   84,   85,  112,  112,
 /*  1520 */   112,  112,  112,  112,  112,   93,   94,   95,  112,  112,
 /*  1530 */    98,   99,  100,  112,   82,   83,  112,  112,  112,   77,
 /*  1540 */   112,  112,  112,   81,   92,  112,   84,   85,   96,   97,
 /*  1550 */   112,  112,  112,  112,  112,   93,   94,   95,  106,  112,
 /*  1560 */    98,   99,  100,   77,  112,  112,  112,   81,  112,  112,
 /*  1570 */    84,   85,  112,  112,  112,  112,  112,  112,  112,   93,
 /*  1580 */    94,   95,  112,   77,   98,   99,  100,   81,  112,  112,
 /*  1590 */    84,   85,  112,  112,  112,  112,  112,  112,  112,   93,
 /*  1600 */    94,   95,  112,   77,   98,   99,  100,   81,  112,  112,
 /*  1610 */    84,   85,  112,  112,  112,  112,  112,  112,  112,   93,
 /*  1620 */    94,   95,  112,  112,   98,   99,  100,  112,  112,  112,
 /*  1630 */   112,  112,  112,   77,  112,  112,  112,   81,  112,  112,
 /*  1640 */    84,   85,  112,  112,  112,  112,  112,  112,  112,   93,
 /*  1650 */    94,   95,  112,  112,   98,   99,  100,   77,  112,  112,
 /*  1660 */   112,   81,  112,  112,   84,   85,  112,  112,  112,  112,
 /*  1670 */   112,  112,  112,   93,   94,   95,  112,   77,   98,   99,
 /*  1680 */   100,   81,  112,  112,   84,   85,  112,  112,  112,  112,
 /*  1690 */   112,  112,  112,   93,   94,   95,  112,   77,   98,   99,
 /*  1700 */   100,   81,  112,  112,   84,   85,  112,  112,  112,  112,
 /*  1710 */   112,  112,  112,   93,   94,   95,  112,  112,   98,   99,
 /*  1720 */   100,  112,  112,  112,  112,  112,  112,   77,  112,  112,
 /*  1730 */   112,   81,  112,  112,   84,   85,  112,  112,  112,  112,
 /*  1740 */   112,  112,  112,   93,   94,   95,  112,  112,   98,   99,
 /*  1750 */   100,   77,  112,  112,  112,   81,  112,  112,   84,   85,
 /*  1760 */   112,  112,  112,  112,  112,  112,  112,   93,   94,   95,
 /*  1770 */   112,   77,   98,   99,  100,   81,  112,  112,   84,   85,
 /*  1780 */   112,  112,  112,  112,  112,  112,  112,   93,   94,   95,
 /*  1790 */   112,   77,   98,   99,  100,   81,  112,  112,   84,   85,
 /*  1800 */   112,  112,  112,  112,  112,  112,  112,   93,   94,   95,
 /*  1810 */   112,  112,   98,   99,  100,  112,  112,  112,  112,  112,
 /*  1820 */   112,   77,  112,  112,  112,   81,  112,  112,   84,   85,
 /*  1830 */   112,  112,  112,  112,  112,  112,  112,   93,   94,   95,
 /*  1840 */   112,  112,   98,   99,  100,   77,  112,  112,  112,   81,
 /*  1850 */   112,  112,   84,   85,  112,  112,  112,  112,  112,  112,
 /*  1860 */   112,   93,   94,   95,  112,   77,   98,   99,  100,   81,
 /*  1870 */   112,  112,   84,   85,  112,  112,  112,  112,  112,  112,
 /*  1880 */   112,   93,   94,   95,  112,   77,   98,   99,  100,   81,
 /*  1890 */   112,  112,   84,   85,  112,  112,  112,  112,  112,  112,
 /*  1900 */   112,   93,   94,   95,  112,  112,   98,   99,  100,  112,
 /*  1910 */   112,  112,  112,  112,  112,   77,  112,  112,  112,   81,
 /*  1920 */   112,  112,  112,   85,  112,  112,  112,  112,  112,  112,
 /*  1930 */   112,   93,  112,  112,  112,  112,   98,   99,  100,   77,
 /*  1940 */   112,  112,  112,   81,  112,  112,  112,   85,  112,  112,
 /*  1950 */    77,  112,  112,  112,   81,   93,  112,  112,   85,   77,
 /*  1960 */    98,   99,  100,   81,  112,  112,   93,   85,  112,  112,
 /*  1970 */    77,   98,   99,  100,   81,   93,  112,  112,   85,   77,
 /*  1980 */    98,   99,  100,   81,  112,  112,   93,   85,  112,  112,
 /*  1990 */   112,   98,   99,  100,  112,   93,  112,  112,  112,  112,
 /*  2000 */    98,   99,  100,
);
    const YY_SHIFT_USE_DFLT = -26;
    const YY_SHIFT_MAX = 208;
    static public $yy_shift_ofst = array(
 /*     0 */   476, 1045,  790,  790, 1045,  739,  790,  994,  790,  790,
 /*    10 */   790,  790,  790,  943,  790,  790,  790,  790,  790,  790,
 /*    20 */   790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
 /*    30 */   841,  790,  790,  790,  790,  790,  790,  790,  790,  943,
 /*    40 */   790,  892,  892, 1096, 1096, 1096, 1096, 1096, 1096,   -1,
 /*    50 */    47,   47,   47,   47,  404,  356,  500,  548,  260,  116,
 /*    60 */   164,  308,  596,  212,  452,  644,  644,  644,  644,  644,
 /*    70 */   644,  644,  644,  644,  644,  644,  644,  644,  644,  644,
 /*    80 */   644,  644,  644,  644,  644,  680,  680,   -3,   48,  214,
 /*    90 */    -3,  860,  809,  110,  110,  213,  213,  286,  380,   18,
 /*   100 */    49,  153,   95,  167,    5,   44,   92,   18,  319,  319,
 /*   110 */   326,  319,  319,  262,   -2,  319,  319,  319,  332,   18,
 /*   120 */   393,  333,  319,  319,  103,  103,  103,  103,  103,  103,
 /*   130 */   103,  103,  103,  -26,  660,  269,  249,   85,  229,   -2,
 /*   140 */    -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
 /*   150 */   319,   -2,   77,   -2,   -2,   77,   -2,   -2,  461,  461,
 /*   160 */   501,  501,  103,  103,  103,   86,  103,  -26,  -26,  -26,
 /*   170 */  1168,   87,  183,  257,  202,  156,  298,  -25,  279,  359,
 /*   180 */   226,  324,  281,  463,  432,  429,  417,  376,  295,  422,
 /*   190 */   438,  454,  402,  442,  424,  413,  389,  374,  367,  330,
 /*   200 */   263,  310,  369,  387,  340,  392,  396,  415,  375,
);
    const YY_REDUCE_USE_DFLT = -75;
    const YY_REDUCE_MAX = 169;
    static public $yy_reduce_ofst = array(
 /*     0 */    -4,  753, 1059,   43,  804, 1150, 1768, 1788, 1130, 1462,
 /*    10 */  1526, 1580, 1180, 1318,  906, 1008, 1298, 1674, 1808, 1600,
 /*    20 */  1506, 1432, 1650, 1110,  855, 1274, 1224, 1714, 1204, 1244,
 /*    30 */  1338, 1368,  957, 1086, 1694, 1392, 1744, 1620, 1412, 1486,
 /*    40 */  1556,  -68,  684, 1862, 1873, 1882, 1893, 1838, 1902, 1264,
 /*    50 */   704, 1171, 1452, 1359,   90,   90,   90,   90,   90,   90,
 /*    60 */    90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
 /*    70 */    90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
 /*    80 */    90,   90,   90,   90,   90,   90,   90,  117,   39,  835,
 /*    90 */   143,  843,  885,  728,  712,  667,  693,  710,  184,  -74,
 /*   100 */    64,  467,   64,   64,  250,  189,  236,   40,  323,  420,
 /*   110 */   419,  372,  373,  344,  394,  371,  277,  325,   64,  294,
 /*   120 */   419,   64,  419,  421,  280,   64,   64,   64,   64,   64,
 /*   130 */    64,   64,   64,   64,  391,  379,  378,  378,  378,  388,
 /*   140 */   388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
 /*   150 */   378,  388,  381,  388,  388,  405,  388,  388,  397,  439,
 /*   160 */   398,  398,  182,  182,  182,    1,  182,  150,   59,  107,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(3, ),
        /* 1 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 2 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 3 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 4 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 5 */ array(13, 15, 16, 17, 18, 23, 27, 28, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 6 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 7 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 8 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 9 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 10 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 11 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 12 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 13 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 14 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 15 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 16 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 17 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 18 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 19 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 20 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 21 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 22 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 23 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 24 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 25 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 26 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 27 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 28 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 29 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 30 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 31 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 32 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 33 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 34 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 35 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 36 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 37 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 38 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 39 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 40 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 41 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 42 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 55, 70, ),
        /* 43 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 70, ),
        /* 44 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 70, ),
        /* 45 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 70, ),
        /* 46 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 70, ),
        /* 47 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 70, ),
        /* 48 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 50, 51, 52, 53, 70, ),
        /* 49 */ array(1, 22, 24, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 50 */ array(1, 24, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 51 */ array(1, 24, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 52 */ array(1, 24, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 53 */ array(1, 24, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 54 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 55 */ array(1, 2, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 56 */ array(1, 4, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 57 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 58 */ array(1, 4, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 59 */ array(1, 19, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 60 */ array(1, 25, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 61 */ array(1, 4, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 62 */ array(1, 4, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 63 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 64 */ array(1, 4, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 65 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 66 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 67 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 68 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 69 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 70 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 71 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 72 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 73 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 74 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 75 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 76 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 77 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 78 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 79 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 80 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 81 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 82 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 83 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 84 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 85 */ array(35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 86 */ array(35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, ),
        /* 87 */ array(5, 6, 7, 8, 9, 10, 13, 17, 18, 23, 27, 29, ),
        /* 88 */ array(1, 4, 24, 30, 33, ),
        /* 89 */ array(1, 4, 24, 30, ),
        /* 90 */ array(5, 6, 7, 8, 9, 10, 13, 17, 18, 23, 27, 29, ),
        /* 91 */ array(13, 16, 24, 26, 30, ),
        /* 92 */ array(13, 16, 24, 26, 30, ),
        /* 93 */ array(13, 16, 24, 30, ),
        /* 94 */ array(13, 16, 24, 30, ),
        /* 95 */ array(1, 4, 24, 30, ),
        /* 96 */ array(1, 4, 24, 30, ),
        /* 97 */ array(1, 24, 30, ),
        /* 98 */ array(1, 2, ),
        /* 99 */ array(15, 33, ),
        /* 100 */ array(1, 4, 24, 25, 30, ),
        /* 101 */ array(13, 14, 16, 20, ),
        /* 102 */ array(1, 4, 24, 30, ),
        /* 103 */ array(1, 4, 24, 30, ),
        /* 104 */ array(6, 13, 70, 71, ),
        /* 105 */ array(10, 11, 12, ),
        /* 106 */ array(52, 55, 57, ),
        /* 107 */ array(15, 33, ),
        /* 108 */ array(13, 16, ),
        /* 109 */ array(13, 16, ),
        /* 110 */ array(13, 16, ),
        /* 111 */ array(13, 16, ),
        /* 112 */ array(13, 16, ),
        /* 113 */ array(24, 30, ),
        /* 114 */ array(24, 30, ),
        /* 115 */ array(13, 16, ),
        /* 116 */ array(13, 16, ),
        /* 117 */ array(13, 16, ),
        /* 118 */ array(1, 4, ),
        /* 119 */ array(15, 33, ),
        /* 120 */ array(13, 16, ),
        /* 121 */ array(1, 26, ),
        /* 122 */ array(13, 16, ),
        /* 123 */ array(13, 16, ),
        /* 124 */ array(1, ),
        /* 125 */ array(1, ),
        /* 126 */ array(1, ),
        /* 127 */ array(1, ),
        /* 128 */ array(1, ),
        /* 129 */ array(1, ),
        /* 130 */ array(1, ),
        /* 131 */ array(1, ),
        /* 132 */ array(1, ),
        /* 133 */ array(),
        /* 134 */ array(6, 13, 70, 71, ),
        /* 135 */ array(13, 15, 16, ),
        /* 136 */ array(13, 14, 16, ),
        /* 137 */ array(13, 16, 54, ),
        /* 138 */ array(13, 16, 54, ),
        /* 139 */ array(24, 30, ),
        /* 140 */ array(24, 30, ),
        /* 141 */ array(24, 30, ),
        /* 142 */ array(24, 30, ),
        /* 143 */ array(24, 30, ),
        /* 144 */ array(24, 30, ),
        /* 145 */ array(24, 30, ),
        /* 146 */ array(24, 30, ),
        /* 147 */ array(24, 30, ),
        /* 148 */ array(24, 30, ),
        /* 149 */ array(24, 30, ),
        /* 150 */ array(13, 16, ),
        /* 151 */ array(24, 30, ),
        /* 152 */ array(52, 55, ),
        /* 153 */ array(24, 30, ),
        /* 154 */ array(24, 30, ),
        /* 155 */ array(52, 55, ),
        /* 156 */ array(24, 30, ),
        /* 157 */ array(24, 30, ),
        /* 158 */ array(24, ),
        /* 159 */ array(24, ),
        /* 160 */ array(2, ),
        /* 161 */ array(2, ),
        /* 162 */ array(1, ),
        /* 163 */ array(1, ),
        /* 164 */ array(1, ),
        /* 165 */ array(11, ),
        /* 166 */ array(1, ),
        /* 167 */ array(),
        /* 168 */ array(),
        /* 169 */ array(),
        /* 170 */ array(4, 14, 24, 30, 33, ),
        /* 171 */ array(13, 15, 16, 31, ),
        /* 172 */ array(33, 52, 56, ),
        /* 173 */ array(32, 56, ),
        /* 174 */ array(32, 34, ),
        /* 175 */ array(32, 34, ),
        /* 176 */ array(19, 32, ),
        /* 177 */ array(26, 33, ),
        /* 178 */ array(14, 52, ),
        /* 179 */ array(4, 20, ),
        /* 180 */ array(14, 20, ),
        /* 181 */ array(16, 54, ),
        /* 182 */ array(13, 33, ),
        /* 183 */ array(15, ),
        /* 184 */ array(2, ),
        /* 185 */ array(4, ),
        /* 186 */ array(14, ),
        /* 187 */ array(56, ),
        /* 188 */ array(16, ),
        /* 189 */ array(15, ),
        /* 190 */ array(16, ),
        /* 191 */ array(4, ),
        /* 192 */ array(33, ),
        /* 193 */ array(15, ),
        /* 194 */ array(31, ),
        /* 195 */ array(16, ),
        /* 196 */ array(21, ),
        /* 197 */ array(14, ),
        /* 198 */ array(16, ),
        /* 199 */ array(34, ),
        /* 200 */ array(52, ),
        /* 201 */ array(31, ),
        /* 202 */ array(16, ),
        /* 203 */ array(20, ),
        /* 204 */ array(49, ),
        /* 205 */ array(16, ),
        /* 206 */ array(16, ),
        /* 207 */ array(15, ),
        /* 208 */ array(15, ),
        /* 209 */ array(),
        /* 210 */ array(),
        /* 211 */ array(),
        /* 212 */ array(),
        /* 213 */ array(),
        /* 214 */ array(),
        /* 215 */ array(),
        /* 216 */ array(),
        /* 217 */ array(),
        /* 218 */ array(),
        /* 219 */ array(),
        /* 220 */ array(),
        /* 221 */ array(),
        /* 222 */ array(),
        /* 223 */ array(),
        /* 224 */ array(),
        /* 225 */ array(),
        /* 226 */ array(),
        /* 227 */ array(),
        /* 228 */ array(),
        /* 229 */ array(),
        /* 230 */ array(),
        /* 231 */ array(),
        /* 232 */ array(),
        /* 233 */ array(),
        /* 234 */ array(),
        /* 235 */ array(),
        /* 236 */ array(),
        /* 237 */ array(),
        /* 238 */ array(),
        /* 239 */ array(),
        /* 240 */ array(),
        /* 241 */ array(),
        /* 242 */ array(),
        /* 243 */ array(),
        /* 244 */ array(),
        /* 245 */ array(),
        /* 246 */ array(),
        /* 247 */ array(),
        /* 248 */ array(),
        /* 249 */ array(),
        /* 250 */ array(),
        /* 251 */ array(),
        /* 252 */ array(),
        /* 253 */ array(),
        /* 254 */ array(),
        /* 255 */ array(),
        /* 256 */ array(),
        /* 257 */ array(),
        /* 258 */ array(),
        /* 259 */ array(),
        /* 260 */ array(),
        /* 261 */ array(),
        /* 262 */ array(),
        /* 263 */ array(),
        /* 264 */ array(),
        /* 265 */ array(),
        /* 266 */ array(),
        /* 267 */ array(),
        /* 268 */ array(),
        /* 269 */ array(),
        /* 270 */ array(),
        /* 271 */ array(),
        /* 272 */ array(),
        /* 273 */ array(),
        /* 274 */ array(),
        /* 275 */ array(),
        /* 276 */ array(),
        /* 277 */ array(),
        /* 278 */ array(),
        /* 279 */ array(),
        /* 280 */ array(),
        /* 281 */ array(),
        /* 282 */ array(),
        /* 283 */ array(),
        /* 284 */ array(),
        /* 285 */ array(),
        /* 286 */ array(),
        /* 287 */ array(),
        /* 288 */ array(),
        /* 289 */ array(),
        /* 290 */ array(),
        /* 291 */ array(),
        /* 292 */ array(),
        /* 293 */ array(),
);
    static public $yy_default = array(
 /*     0 */   296,  449,  425,  425,  463,  463,  463,  463,  463,  463,
 /*    10 */   463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
 /*    20 */   463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
 /*    30 */   463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
 /*    40 */   463,  463,  463,  463,  463,  463,  463,  463,  463,  344,
 /*    50 */   325,  320,  344,  344,  463,  463,  463,  463,  463,  463,
 /*    60 */   349,  463,  463,  463,  463,  369,  424,  349,  423,  376,
 /*    70 */   452,  372,  354,  451,  328,  364,  351,  346,  373,  368,
 /*    80 */   318,  450,  355,  377,  367,  379,  378,  299,  389,  357,
 /*    90 */   294,  344,  344,  344,  344,  363,  395,  344,  337,  463,
 /*   100 */   357,  463,  357,  357,  463,  463,  396,  463,  463,  463,
 /*   110 */   463,  463,  463,  344,  344,  463,  463,  463,  357,  463,
 /*   120 */   463,  357,  463,  463,  340,  383,  382,  381,  366,  359,
 /*   130 */   357,  361,  360,  432,  463,  463,  463,  404,  397,  327,
 /*   140 */   316,  331,  315,  332,  334,  335,  326,  314,  336,  330,
 /*   150 */   417,  333,  401,  324,  317,  400,  322,  321,  462,  462,
 /*   160 */   427,  426,  338,  341,  395,  310,  363,  431,  431,  431,
 /*   170 */   389,  463,  389,  463,  463,  463,  463,  389,  385,  380,
 /*   180 */   380,  463,  416,  463,  414,  463,  414,  463,  463,  463,
 /*   190 */   463,  463,  389,  463,  387,  463,  352,  463,  463,  463,
 /*   200 */   385,  463,  463,  380,  391,  463,  463,  463,  463,  356,
 /*   210 */   420,  297,  295,  339,  415,  461,  329,  345,  421,  353,
 /*   220 */   433,  418,  391,  375,  388,  358,  390,  386,  384,  428,
 /*   230 */   429,  392,  393,  412,  406,  407,  405,  402,  394,  398,
 /*   240 */   430,  414,  303,  304,  305,  302,  301,  298,  300,  306,
 /*   250 */   307,  342,  343,  413,  312,  311,  308,  309,  365,  403,
 /*   260 */   459,  458,  460,  457,  455,  453,  454,  456,  446,  410,
 /*   270 */   408,  419,  409,  411,  448,  447,  362,  445,  434,  435,
 /*   280 */   436,  374,  371,  399,  370,  437,  438,  443,  444,  442,
 /*   290 */   441,  439,  440,  422,
);
    const YYNOCODE = 113;
    const YYSTACKDEPTH = 500;
    const YYNSTATE = 294;
    const YYNRULE = 169;
    const YYERRORSYMBOL = 72;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    public static $yyFallback = array(
    );

    public $yyTraceFILE;
    public $yyTracePrompt;
    public $yyidx;                    /* Index of top element in stack */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    public $yystack = array();  /* The parser's stack */

    public $yyTokenName = array(
  '$',             'VERT',          'COLON',         'SETSTRICT',
  'RDEL',          'COMMENT',       'TEXT',          'STRIPON',
  'STRIPOFF',      'BLOCKSOURCE',   'LITERALSTART',  'LITERALEND',
  'LITERAL',       'LDEL',          'EQUAL',         'DOLLAR',
  'ID',            'LDELIF',        'LDELFOR',       'SEMICOLON',
  'INCDEC',        'TO',            'STEP',          'LDELFOREACH',
  'SPACE',         'AS',            'APTR',          'LDELSETFILTER',
  'SMARTYBLOCKCHILDPARENT',  'LDELSLASH',     'ATTR',          'INTEGER',
  'COMMA',         'OPENP',         'CLOSEP',        'MATH',
  'UNIMATH',       'ANDSYM',        'ISIN',          'ISDIVBY',
  'ISNOTDIVBY',    'ISEVEN',        'ISNOTEVEN',     'ISEVENBY',
  'ISNOTEVENBY',   'ISODD',         'ISNOTODD',      'ISODDBY',
  'ISNOTODDBY',    'QMARK',         'NOT',           'TYPECAST',
  'DOT',           'SINGLEQUOTESTRING',  'AT',            'OPENB',
  'CLOSEB',        'PTR',           'EQUALS',        'NOTEQUALS',
  'GREATERTHAN',   'LESSTHAN',      'GREATEREQUAL',  'LESSEQUAL',
  'IDENTITY',      'NONEIDENTITY',  'MOD',           'LAND',
  'LOR',           'LXOR',          'QUOTE',         'DOLLARID',
  'error',         'start',         'strictmode',    'template',
  'template_element',  'smartytag',     'literal',       'literal_elements',
  'literal_element',  'value',         'modifierlist',  'attributes',
  'expr',          'variable',      'statements',    'optspace',
  'varvar',        'foraction',     'statement',     'modparameters',
  'attribute',     'variablebase',  'ternary',       'array',
  'ifcond',        'lop',           'function',      'doublequoted_with_quotes',
  'variableinternal',  'indexdef',      'objectelement',  'varvarele',
  'method',        'params',        'modifier',      'modparameter',
  'arrayelements',  'arrayelement',  'doublequoted',  'doublequotedcontent',
    );

    public static $yyRuleName = array(
 /*   0 */ "start ::= strictmode template",
 /*   1 */ "strictmode ::= SETSTRICT",
 /*   2 */ "strictmode ::=",
 /*   3 */ "template ::= template_element",
 /*   4 */ "template ::= template template_element",
 /*   5 */ "template ::=",
 /*   6 */ "template_element ::= smartytag RDEL",
 /*   7 */ "template_element ::= COMMENT",
 /*   8 */ "template_element ::= literal",
 /*   9 */ "template_element ::= TEXT",
 /*  10 */ "template_element ::= STRIPON",
 /*  11 */ "template_element ::= STRIPOFF",
 /*  12 */ "template_element ::= BLOCKSOURCE",
 /*  13 */ "literal ::= LITERALSTART LITERALEND",
 /*  14 */ "literal ::= LITERALSTART literal_elements LITERALEND",
 /*  15 */ "literal_elements ::= literal_elements literal_element",
 /*  16 */ "literal_elements ::=",
 /*  17 */ "literal_element ::= literal",
 /*  18 */ "literal_element ::= LITERAL",
 /*  19 */ "smartytag ::= LDEL value",
 /*  20 */ "smartytag ::= LDEL value modifierlist attributes",
 /*  21 */ "smartytag ::= LDEL value attributes",
 /*  22 */ "smartytag ::= LDEL expr modifierlist attributes",
 /*  23 */ "smartytag ::= LDEL expr attributes",
 /*  24 */ "smartytag ::= LDEL variable EQUAL expr",
 /*  25 */ "smartytag ::= LDEL DOLLAR ID EQUAL value",
 /*  26 */ "smartytag ::= LDEL DOLLAR ID EQUAL expr",
 /*  27 */ "smartytag ::= LDEL DOLLAR ID EQUAL expr attributes",
 /*  28 */ "smartytag ::= LDEL ID attributes",
 /*  29 */ "smartytag ::= LDEL ID",
 /*  30 */ "smartytag ::= LDEL ID modifierlist attributes",
 /*  31 */ "smartytag ::= LDELIF expr",
 /*  32 */ "smartytag ::= LDELIF expr attributes",
 /*  33 */ "smartytag ::= LDELFOR statements SEMICOLON optspace expr SEMICOLON optspace DOLLAR varvar foraction attributes",
 /*  34 */ "foraction ::= EQUAL expr",
 /*  35 */ "foraction ::= INCDEC",
 /*  36 */ "smartytag ::= LDELFOR statement TO expr attributes",
 /*  37 */ "smartytag ::= LDELFOR statement TO expr STEP expr attributes",
 /*  38 */ "smartytag ::= LDELFOREACH attributes",
 /*  39 */ "smartytag ::= LDELFOREACH SPACE value AS DOLLAR varvar attributes",
 /*  40 */ "smartytag ::= LDELFOREACH SPACE value AS DOLLAR varvar APTR DOLLAR varvar attributes",
 /*  41 */ "smartytag ::= LDELFOREACH SPACE expr AS DOLLAR varvar attributes",
 /*  42 */ "smartytag ::= LDELFOREACH SPACE expr AS DOLLAR varvar APTR DOLLAR varvar attributes",
 /*  43 */ "smartytag ::= LDELSETFILTER ID modparameters",
 /*  44 */ "smartytag ::= LDELSETFILTER ID modparameters modifierlist",
 /*  45 */ "smartytag ::= LDEL SMARTYBLOCKCHILDPARENT",
 /*  46 */ "smartytag ::= LDELSLASH ID",
 /*  47 */ "smartytag ::= LDELSLASH ID modifierlist",
 /*  48 */ "attributes ::= attributes attribute",
 /*  49 */ "attributes ::= attribute",
 /*  50 */ "attributes ::=",
 /*  51 */ "attribute ::= SPACE ID EQUAL ID",
 /*  52 */ "attribute ::= ATTR expr",
 /*  53 */ "attribute ::= ATTR value",
 /*  54 */ "attribute ::= SPACE ID",
 /*  55 */ "attribute ::= SPACE expr",
 /*  56 */ "attribute ::= SPACE value",
 /*  57 */ "attribute ::= SPACE INTEGER EQUAL expr",
 /*  58 */ "statements ::= statement",
 /*  59 */ "statements ::= statements COMMA statement",
 /*  60 */ "statement ::= DOLLAR varvar EQUAL expr",
 /*  61 */ "statement ::= variablebase EQUAL expr",
 /*  62 */ "statement ::= OPENP statement CLOSEP",
 /*  63 */ "expr ::= value",
 /*  64 */ "expr ::= ternary",
 /*  65 */ "expr ::= expr MATH value",
 /*  66 */ "expr ::= expr UNIMATH value",
 /*  67 */ "expr ::= expr ANDSYM value",
 /*  68 */ "expr ::= array",
 /*  69 */ "expr ::= expr modifierlist",
 /*  70 */ "expr ::= expr ifcond expr",
 /*  71 */ "expr ::= expr ISIN array",
 /*  72 */ "expr ::= expr ISIN value",
 /*  73 */ "expr ::= expr lop expr",
 /*  74 */ "expr ::= expr ISDIVBY expr",
 /*  75 */ "expr ::= expr ISNOTDIVBY expr",
 /*  76 */ "expr ::= expr ISEVEN",
 /*  77 */ "expr ::= expr ISNOTEVEN",
 /*  78 */ "expr ::= expr ISEVENBY expr",
 /*  79 */ "expr ::= expr ISNOTEVENBY expr",
 /*  80 */ "expr ::= expr ISODD",
 /*  81 */ "expr ::= expr ISNOTODD",
 /*  82 */ "expr ::= expr ISODDBY expr",
 /*  83 */ "expr ::= expr ISNOTODDBY expr",
 /*  84 */ "ternary ::= OPENP expr CLOSEP QMARK DOLLAR ID COLON expr",
 /*  85 */ "ternary ::= OPENP expr CLOSEP QMARK expr COLON expr",
 /*  86 */ "value ::= variable",
 /*  87 */ "value ::= UNIMATH value",
 /*  88 */ "value ::= NOT value",
 /*  89 */ "value ::= TYPECAST value",
 /*  90 */ "value ::= variable INCDEC",
 /*  91 */ "value ::= INTEGER",
 /*  92 */ "value ::= INTEGER DOT INTEGER",
 /*  93 */ "value ::= INTEGER DOT",
 /*  94 */ "value ::= DOT INTEGER",
 /*  95 */ "value ::= ID",
 /*  96 */ "value ::= function",
 /*  97 */ "value ::= OPENP expr CLOSEP",
 /*  98 */ "value ::= SINGLEQUOTESTRING",
 /*  99 */ "value ::= doublequoted_with_quotes",
 /* 100 */ "value ::= smartytag RDEL",
 /* 101 */ "value ::= value modifierlist",
 /* 102 */ "variable ::= variableinternal",
 /* 103 */ "variablebase ::= DOLLAR varvar",
 /* 104 */ "variableinternal ::= variableinternal indexdef",
 /* 105 */ "variableinternal ::= variablebase indexdef indexdef",
 /* 106 */ "variableinternal ::= variablebase indexdef",
 /* 107 */ "variableinternal ::= variablebase",
 /* 108 */ "variableinternal ::= variableinternal objectelement",
 /* 109 */ "variableinternal ::= DOLLAR varvar AT ID",
 /* 110 */ "indexdef ::= DOT DOLLAR varvar",
 /* 111 */ "indexdef ::= DOT DOLLAR varvar AT ID",
 /* 112 */ "indexdef ::= DOT ID",
 /* 113 */ "indexdef ::= DOT INTEGER",
 /* 114 */ "indexdef ::= DOT LDEL expr RDEL",
 /* 115 */ "indexdef ::= OPENB ID CLOSEB",
 /* 116 */ "indexdef ::= OPENB ID DOT ID CLOSEB",
 /* 117 */ "indexdef ::= OPENB expr CLOSEB",
 /* 118 */ "varvar ::= varvarele",
 /* 119 */ "varvar ::= varvar varvarele",
 /* 120 */ "varvarele ::= ID",
 /* 121 */ "varvarele ::= LDEL expr RDEL",
 /* 122 */ "objectelement ::= PTR ID",
 /* 123 */ "objectelement ::= PTR DOLLAR varvar",
 /* 124 */ "objectelement ::= PTR LDEL expr RDEL",
 /* 125 */ "objectelement ::= PTR ID LDEL expr RDEL",
 /* 126 */ "objectelement ::= PTR method",
 /* 127 */ "function ::= ID OPENP params CLOSEP",
 /* 128 */ "method ::= ID OPENP params CLOSEP",
 /* 129 */ "params ::= params COMMA expr",
 /* 130 */ "params ::= expr",
 /* 131 */ "params ::=",
 /* 132 */ "modifierlist ::= modifierlist modifier modparameters",
 /* 133 */ "modifierlist ::= modifier modparameters",
 /* 134 */ "modifier ::= VERT AT ID",
 /* 135 */ "modifier ::= VERT ID",
 /* 136 */ "modparameters ::= modparameters modparameter",
 /* 137 */ "modparameters ::=",
 /* 138 */ "modparameter ::= COLON value",
 /* 139 */ "modparameter ::= COLON array",
 /* 140 */ "ifcond ::= EQUALS",
 /* 141 */ "ifcond ::= NOTEQUALS",
 /* 142 */ "ifcond ::= GREATERTHAN",
 /* 143 */ "ifcond ::= LESSTHAN",
 /* 144 */ "ifcond ::= GREATEREQUAL",
 /* 145 */ "ifcond ::= LESSEQUAL",
 /* 146 */ "ifcond ::= IDENTITY",
 /* 147 */ "ifcond ::= NONEIDENTITY",
 /* 148 */ "ifcond ::= MOD",
 /* 149 */ "lop ::= LAND",
 /* 150 */ "lop ::= LOR",
 /* 151 */ "lop ::= LXOR",
 /* 152 */ "array ::= OPENB arrayelements CLOSEB",
 /* 153 */ "arrayelements ::= arrayelement",
 /* 154 */ "arrayelements ::= arrayelements COMMA arrayelement",
 /* 155 */ "arrayelements ::=",
 /* 156 */ "arrayelement ::= value APTR expr",
 /* 157 */ "arrayelement ::= ID APTR expr",
 /* 158 */ "arrayelement ::= expr",
 /* 159 */ "doublequoted_with_quotes ::= QUOTE QUOTE",
 /* 160 */ "doublequoted_with_quotes ::= QUOTE doublequoted QUOTE",
 /* 161 */ "doublequoted ::= doublequoted doublequotedcontent",
 /* 162 */ "doublequoted ::= doublequotedcontent",
 /* 163 */ "doublequotedcontent ::= DOLLARID",
 /* 164 */ "doublequotedcontent ::= LDEL variable RDEL",
 /* 165 */ "doublequotedcontent ::= LDEL expr RDEL",
 /* 166 */ "doublequotedcontent ::= TEXT",
 /* 167 */ "optspace ::= SPACE",
 /* 168 */ "optspace ::=",
    );

    public function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count($this->yyTokenName)) {
            return $this->yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    public static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    public function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        if ($this->yyTraceFILE && $this->yyidx >= 0) {
            fwrite($this->yyTraceFILE,
                $this->yyTracePrompt . 'Popping ' . $this->yyTokenName[$yytos->major] .
                    "\n");
        }
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;

        return $yymajor;
    }

    public function __destruct()
    {
        while ($this->yystack !== Array()) {
            $this->yy_pop_parser_stack();
        }
        if (is_resource($this->yyTraceFILE)) {
            fclose($this->yyTraceFILE);
        }
    }

    public function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                $expected = array_merge($expected, self::$yyExpectedTokens[$nextstate]);
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;

                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new TP_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
    $this->yyidx = $yyidx;
    $this->yystack = $stack;

        return array_unique($expected);
    }

    public function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;

                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new TP_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token && $token !== '0') {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;

        return true;
    }

   public function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;

        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
                if ($this->yyTraceFILE) {
                    fwrite($this->yyTraceFILE, $this->yyTracePrompt . "FALLBACK " .
                        $this->yyTokenName[$iLookAhead] . " => " .
                        $this->yyTokenName[$iFallback] . "\n");
                }

                return $this->yy_find_shift_action($iFallback);
            }

            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    public function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    public function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            if ($this->yyTraceFILE) {
                fprintf($this->yyTraceFILE, "%sStack Overflow!\n", $this->yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
#line 127 "Parser.y"

    $this->internalError = true;
    $this->compiler->trigger_template_error("Stack overflow in template parser");
#line 1456 "Parser.php"

            return;
        }
        $yytos = new TP_yyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
        if ($this->yyTraceFILE && $this->yyidx > 0) {
            fprintf($this->yyTraceFILE, "%sShift %d\n", $this->yyTracePrompt,
                $yyNewState);
            fprintf($this->yyTraceFILE, "%sStack:", $this->yyTracePrompt);
            for ($i = 1; $i <= $this->yyidx; $i++) {
                fprintf($this->yyTraceFILE, " %s",
                    $this->yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite($this->yyTraceFILE,"\n");
        }
    }

    public static $yyRuleInfo = array(
  array( 'lhs' => 73, 'rhs' => 2 ),
  array( 'lhs' => 74, 'rhs' => 1 ),
  array( 'lhs' => 74, 'rhs' => 0 ),
  array( 'lhs' => 75, 'rhs' => 1 ),
  array( 'lhs' => 75, 'rhs' => 2 ),
  array( 'lhs' => 75, 'rhs' => 0 ),
  array( 'lhs' => 76, 'rhs' => 2 ),
  array( 'lhs' => 76, 'rhs' => 1 ),
  array( 'lhs' => 76, 'rhs' => 1 ),
  array( 'lhs' => 76, 'rhs' => 1 ),
  array( 'lhs' => 76, 'rhs' => 1 ),
  array( 'lhs' => 76, 'rhs' => 1 ),
  array( 'lhs' => 76, 'rhs' => 1 ),
  array( 'lhs' => 78, 'rhs' => 2 ),
  array( 'lhs' => 78, 'rhs' => 3 ),
  array( 'lhs' => 79, 'rhs' => 2 ),
  array( 'lhs' => 79, 'rhs' => 0 ),
  array( 'lhs' => 80, 'rhs' => 1 ),
  array( 'lhs' => 80, 'rhs' => 1 ),
  array( 'lhs' => 77, 'rhs' => 2 ),
  array( 'lhs' => 77, 'rhs' => 4 ),
  array( 'lhs' => 77, 'rhs' => 3 ),
  array( 'lhs' => 77, 'rhs' => 4 ),
  array( 'lhs' => 77, 'rhs' => 3 ),
  array( 'lhs' => 77, 'rhs' => 4 ),
  array( 'lhs' => 77, 'rhs' => 5 ),
  array( 'lhs' => 77, 'rhs' => 5 ),
  array( 'lhs' => 77, 'rhs' => 6 ),
  array( 'lhs' => 77, 'rhs' => 3 ),
  array( 'lhs' => 77, 'rhs' => 2 ),
  array( 'lhs' => 77, 'rhs' => 4 ),
  array( 'lhs' => 77, 'rhs' => 2 ),
  array( 'lhs' => 77, 'rhs' => 3 ),
  array( 'lhs' => 77, 'rhs' => 11 ),
  array( 'lhs' => 89, 'rhs' => 2 ),
  array( 'lhs' => 89, 'rhs' => 1 ),
  array( 'lhs' => 77, 'rhs' => 5 ),
  array( 'lhs' => 77, 'rhs' => 7 ),
  array( 'lhs' => 77, 'rhs' => 2 ),
  array( 'lhs' => 77, 'rhs' => 7 ),
  array( 'lhs' => 77, 'rhs' => 10 ),
  array( 'lhs' => 77, 'rhs' => 7 ),
  array( 'lhs' => 77, 'rhs' => 10 ),
  array( 'lhs' => 77, 'rhs' => 3 ),
  array( 'lhs' => 77, 'rhs' => 4 ),
  array( 'lhs' => 77, 'rhs' => 2 ),
  array( 'lhs' => 77, 'rhs' => 2 ),
  array( 'lhs' => 77, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 2 ),
  array( 'lhs' => 83, 'rhs' => 1 ),
  array( 'lhs' => 83, 'rhs' => 0 ),
  array( 'lhs' => 92, 'rhs' => 4 ),
  array( 'lhs' => 92, 'rhs' => 2 ),
  array( 'lhs' => 92, 'rhs' => 2 ),
  array( 'lhs' => 92, 'rhs' => 2 ),
  array( 'lhs' => 92, 'rhs' => 2 ),
  array( 'lhs' => 92, 'rhs' => 2 ),
  array( 'lhs' => 92, 'rhs' => 4 ),
  array( 'lhs' => 86, 'rhs' => 1 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 90, 'rhs' => 4 ),
  array( 'lhs' => 90, 'rhs' => 3 ),
  array( 'lhs' => 90, 'rhs' => 3 ),
  array( 'lhs' => 84, 'rhs' => 1 ),
  array( 'lhs' => 84, 'rhs' => 1 ),
  array( 'lhs' => 84, 'rhs' => 3 ),
  array( 'lhs' => 84, 'rhs' => 3 ),
  array( 'lhs' => 84, 'rhs' => 3 ),
  array( 'lhs' => 84, 'rhs' => 1 ),
  array( 'lhs' => 84, 'rhs' => 2 ),
  array( 'lhs' => 84, 'rhs' => 3 ),
  array( 'lhs' => 84, 'rhs' => 3 ),
  array( 'lhs' => 84, 'rhs' => 3 ),
  array( 'lhs' => 84, 'rhs' => 3 ),
  array( 'lhs' => 84, 'rhs' => 3 ),
  array( 'lhs' => 84, 'rhs' => 3 ),
  array( 'lhs' => 84, 'rhs' => 2 ),
  array( 'lhs' => 84, 'rhs' => 2 ),
  array( 'lhs' => 84, 'rhs' => 3 ),
  array( 'lhs' => 84, 'rhs' => 3 ),
  array( 'lhs' => 84, 'rhs' => 2 ),
  array( 'lhs' => 84, 'rhs' => 2 ),
  array( 'lhs' => 84, 'rhs' => 3 ),
  array( 'lhs' => 84, 'rhs' => 3 ),
  array( 'lhs' => 94, 'rhs' => 8 ),
  array( 'lhs' => 94, 'rhs' => 7 ),
  array( 'lhs' => 81, 'rhs' => 1 ),
  array( 'lhs' => 81, 'rhs' => 2 ),
  array( 'lhs' => 81, 'rhs' => 2 ),
  array( 'lhs' => 81, 'rhs' => 2 ),
  array( 'lhs' => 81, 'rhs' => 2 ),
  array( 'lhs' => 81, 'rhs' => 1 ),
  array( 'lhs' => 81, 'rhs' => 3 ),
  array( 'lhs' => 81, 'rhs' => 2 ),
  array( 'lhs' => 81, 'rhs' => 2 ),
  array( 'lhs' => 81, 'rhs' => 1 ),
  array( 'lhs' => 81, 'rhs' => 1 ),
  array( 'lhs' => 81, 'rhs' => 3 ),
  array( 'lhs' => 81, 'rhs' => 1 ),
  array( 'lhs' => 81, 'rhs' => 1 ),
  array( 'lhs' => 81, 'rhs' => 2 ),
  array( 'lhs' => 81, 'rhs' => 2 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 93, 'rhs' => 2 ),
  array( 'lhs' => 100, 'rhs' => 2 ),
  array( 'lhs' => 100, 'rhs' => 3 ),
  array( 'lhs' => 100, 'rhs' => 2 ),
  array( 'lhs' => 100, 'rhs' => 1 ),
  array( 'lhs' => 100, 'rhs' => 2 ),
  array( 'lhs' => 100, 'rhs' => 4 ),
  array( 'lhs' => 101, 'rhs' => 3 ),
  array( 'lhs' => 101, 'rhs' => 5 ),
  array( 'lhs' => 101, 'rhs' => 2 ),
  array( 'lhs' => 101, 'rhs' => 2 ),
  array( 'lhs' => 101, 'rhs' => 4 ),
  array( 'lhs' => 101, 'rhs' => 3 ),
  array( 'lhs' => 101, 'rhs' => 5 ),
  array( 'lhs' => 101, 'rhs' => 3 ),
  array( 'lhs' => 88, 'rhs' => 1 ),
  array( 'lhs' => 88, 'rhs' => 2 ),
  array( 'lhs' => 103, 'rhs' => 1 ),
  array( 'lhs' => 103, 'rhs' => 3 ),
  array( 'lhs' => 102, 'rhs' => 2 ),
  array( 'lhs' => 102, 'rhs' => 3 ),
  array( 'lhs' => 102, 'rhs' => 4 ),
  array( 'lhs' => 102, 'rhs' => 5 ),
  array( 'lhs' => 102, 'rhs' => 2 ),
  array( 'lhs' => 98, 'rhs' => 4 ),
  array( 'lhs' => 104, 'rhs' => 4 ),
  array( 'lhs' => 105, 'rhs' => 3 ),
  array( 'lhs' => 105, 'rhs' => 1 ),
  array( 'lhs' => 105, 'rhs' => 0 ),
  array( 'lhs' => 82, 'rhs' => 3 ),
  array( 'lhs' => 82, 'rhs' => 2 ),
  array( 'lhs' => 106, 'rhs' => 3 ),
  array( 'lhs' => 106, 'rhs' => 2 ),
  array( 'lhs' => 91, 'rhs' => 2 ),
  array( 'lhs' => 91, 'rhs' => 0 ),
  array( 'lhs' => 107, 'rhs' => 2 ),
  array( 'lhs' => 107, 'rhs' => 2 ),
  array( 'lhs' => 96, 'rhs' => 1 ),
  array( 'lhs' => 96, 'rhs' => 1 ),
  array( 'lhs' => 96, 'rhs' => 1 ),
  array( 'lhs' => 96, 'rhs' => 1 ),
  array( 'lhs' => 96, 'rhs' => 1 ),
  array( 'lhs' => 96, 'rhs' => 1 ),
  array( 'lhs' => 96, 'rhs' => 1 ),
  array( 'lhs' => 96, 'rhs' => 1 ),
  array( 'lhs' => 96, 'rhs' => 1 ),
  array( 'lhs' => 97, 'rhs' => 1 ),
  array( 'lhs' => 97, 'rhs' => 1 ),
  array( 'lhs' => 97, 'rhs' => 1 ),
  array( 'lhs' => 95, 'rhs' => 3 ),
  array( 'lhs' => 108, 'rhs' => 1 ),
  array( 'lhs' => 108, 'rhs' => 3 ),
  array( 'lhs' => 108, 'rhs' => 0 ),
  array( 'lhs' => 109, 'rhs' => 3 ),
  array( 'lhs' => 109, 'rhs' => 3 ),
  array( 'lhs' => 109, 'rhs' => 1 ),
  array( 'lhs' => 99, 'rhs' => 2 ),
  array( 'lhs' => 99, 'rhs' => 3 ),
  array( 'lhs' => 110, 'rhs' => 2 ),
  array( 'lhs' => 110, 'rhs' => 1 ),
  array( 'lhs' => 111, 'rhs' => 1 ),
  array( 'lhs' => 111, 'rhs' => 3 ),
  array( 'lhs' => 111, 'rhs' => 3 ),
  array( 'lhs' => 111, 'rhs' => 1 ),
  array( 'lhs' => 87, 'rhs' => 1 ),
  array( 'lhs' => 87, 'rhs' => 0 ),
    );

    public static $yyReduceMap = array(
        0 => 0,
        1 => 1,
        2 => 2,
        13 => 2,
        16 => 2,
        168 => 2,
        3 => 3,
        4 => 3,
        6 => 6,
        7 => 7,
        8 => 8,
        9 => 9,
        10 => 10,
        11 => 11,
        12 => 12,
        14 => 14,
        62 => 14,
        117 => 14,
        15 => 15,
        89 => 15,
        90 => 15,
        108 => 15,
        17 => 17,
        18 => 17,
        35 => 17,
        55 => 17,
        56 => 17,
        63 => 17,
        64 => 17,
        68 => 17,
        86 => 17,
        96 => 17,
        102 => 17,
        113 => 17,
        153 => 17,
        158 => 17,
        167 => 17,
        19 => 19,
        20 => 20,
        22 => 20,
        21 => 21,
        23 => 21,
        24 => 24,
        25 => 25,
        26 => 25,
        27 => 27,
        28 => 28,
        29 => 29,
        30 => 30,
        31 => 31,
        32 => 32,
        33 => 33,
        34 => 34,
        36 => 36,
        37 => 37,
        38 => 38,
        39 => 39,
        41 => 39,
        40 => 40,
        42 => 40,
        43 => 43,
        44 => 44,
        45 => 45,
        46 => 46,
        47 => 47,
        48 => 48,
        49 => 49,
        58 => 49,
        130 => 49,
        138 => 49,
        139 => 49,
        50 => 50,
        131 => 50,
        137 => 50,
        51 => 51,
        52 => 52,
        53 => 52,
        54 => 54,
        57 => 57,
        59 => 59,
        60 => 60,
        61 => 61,
        65 => 65,
        66 => 65,
        67 => 65,
        69 => 69,
        101 => 69,
        70 => 70,
        73 => 70,
        71 => 71,
        72 => 72,
        74 => 74,
        75 => 75,
        76 => 76,
        77 => 77,
        78 => 78,
        79 => 79,
        80 => 80,
        81 => 81,
        82 => 82,
        83 => 83,
        84 => 84,
        85 => 85,
        87 => 87,
        88 => 88,
        91 => 91,
        98 => 91,
        99 => 91,
        92 => 92,
        93 => 93,
        94 => 94,
        95 => 95,
        97 => 97,
        100 => 100,
        103 => 103,
        118 => 103,
        104 => 104,
        105 => 105,
        106 => 106,
        107 => 107,
        109 => 109,
        110 => 110,
        111 => 111,
        112 => 112,
        114 => 114,
        115 => 115,
        116 => 116,
        119 => 119,
        120 => 120,
        121 => 121,
        122 => 122,
        123 => 123,
        124 => 124,
        125 => 125,
        126 => 126,
        127 => 127,
        128 => 128,
        129 => 129,
        132 => 132,
        133 => 133,
        134 => 134,
        135 => 135,
        136 => 136,
        140 => 140,
        141 => 141,
        142 => 142,
        143 => 143,
        144 => 144,
        145 => 145,
        146 => 146,
        147 => 147,
        148 => 148,
        149 => 149,
        150 => 150,
        151 => 151,
        152 => 152,
        154 => 154,
        155 => 155,
        156 => 156,
        157 => 157,
        159 => 159,
        160 => 160,
        161 => 161,
        162 => 162,
        163 => 163,
        164 => 164,
        165 => 165,
        166 => 166,
    );
#line 136 "Parser.y"
    function yy_r0(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor . $this->root_buffer->to_smarty_php();
    }
#line 1823 "Parser.php"
#line 140 "Parser.y"
    function yy_r1(){
    $this->strict_mode = true;
    $this->_retvalue = "/* strict mode */\n\$_smarty_tpl->strict_mode = true;\n";
    }
#line 1829 "Parser.php"
#line 144 "Parser.y"
    function yy_r2(){
    $this->_retvalue = '';
    }
#line 1834 "Parser.php"
#line 150 "Parser.y"
    function yy_r3(){
    if ($this->yystack[$this->yyidx + 0]->minor !== null) {
        $this->current_buffer->append_subtree($this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 1841 "Parser.php"
#line 167 "Parser.y"
    function yy_r6(){
    if ($this->compiler->has_code) {
        $this->_retvalue = new Helpers\Tag($this, $this->yystack[$this->yyidx + -1]->minor);
    } else {
        $this->_retvalue = null;
    }
    $this->compiler->has_variable_string = false;
    $this->block_nesting_level = count($this->compiler->_tag_stack);
    }
#line 1852 "Parser.php"
#line 178 "Parser.y"
    function yy_r7(){
    $this->_retvalue = null;
    }
#line 1857 "Parser.php"
#line 183 "Parser.y"
    function yy_r8(){
    $this->_retvalue = new Helpers\Text($this, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 1862 "Parser.php"
#line 188 "Parser.y"
    function yy_r9(){
    if ($this->strip) {
        $this->_retvalue = new Helpers\Text($this, self::stripString($this->yystack[$this->yyidx + 0]->minor));
    } else {
        $this->_retvalue = new Helpers\Text($this, $this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 1871 "Parser.php"
#line 197 "Parser.y"
    function yy_r10(){
    $this->strip++;
    }
#line 1876 "Parser.php"
#line 201 "Parser.y"
    function yy_r11(){
    if (!$this->strip) {
        $this->compiler->trigger_template_error('Unbalanced {strip} tags');
    }
    $this->strip--;
    }
#line 1884 "Parser.php"
#line 208 "Parser.y"
    function yy_r12(){
    if ($this->strip) {
        SMARTY_INTERNAL_COMPILE_BLOCK::blockSource($this->compiler, self::stripString($this->yystack[$this->yyidx + 0]->minor));
    } else {
        SMARTY_INTERNAL_COMPILE_BLOCK::blockSource($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 1893 "Parser.php"
#line 220 "Parser.y"
    function yy_r14(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 1898 "Parser.php"
#line 224 "Parser.y"
    function yy_r15(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor . $this->yystack[$this->yyidx + 0]->minor;
    }
#line 1903 "Parser.php"
#line 232 "Parser.y"
    function yy_r17(){
    $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 1908 "Parser.php"
#line 246 "Parser.y"
    function yy_r19(){
    $this->compiler->assert_no_enforced_modifiers($this->yystack[$this->yyidx + 0]->minor instanceof Wrappers\StaticWrapper);
    if ($this->yystack[$this->yyidx + 0]->minor instanceof Wrappers\StaticWrapper) {
        $this->yystack[$this->yyidx + 0]->minor = (string) $this->yystack[$this->yyidx + 0]->minor;
    }
    $this->_retvalue = Constructs\ConstructPrintExpression::compileOpen(
        $this->compiler,
        array('value' => $this->yystack[$this->yyidx + 0]->minor),
        array()
    );
    }
#line 1921 "Parser.php"
#line 258 "Parser.y"
    function yy_r20(){
    $this->compiler->assert_expected_modifier($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + -2]->minor instanceof Wrappers\StaticWrapper);
    if ($this->yystack[$this->yyidx + -2]->minor instanceof Wrappers\StaticWrapper) {
        $this->yystack[$this->yyidx + -2]->minor = (string) $this->yystack[$this->yyidx + -2]->minor;
    }
    $this->_retvalue = Constructs\ConstructPrintExpression::compileOpen(
        $this->compiler,
        array('value' => $this->yystack[$this->yyidx + -2]->minor, 'modifierlist' => $this->yystack[$this->yyidx + -1]->minor),
        $this->yystack[$this->yyidx + 0]->minor
    );
    }
#line 1934 "Parser.php"
#line 270 "Parser.y"
    function yy_r21(){
    $this->compiler->assert_no_enforced_modifiers($this->yystack[$this->yyidx + -1]->minor instanceof Wrappers\StaticWrapper);
    if ($this->yystack[$this->yyidx + -1]->minor instanceof Wrappers\StaticWrapper) {
        $this->yystack[$this->yyidx + -1]->minor = (string) $this->yystack[$this->yyidx + -1]->minor;
    }
    $this->_retvalue = Constructs\ConstructPrintExpression::compileOpen(
        $this->compiler,
        array('value' => $this->yystack[$this->yyidx + -1]->minor),
        $this->yystack[$this->yyidx + 0]->minor
    );
    }
#line 1947 "Parser.php"
#line 309 "Parser.y"
    function yy_r24(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor . ' = (' . $this->yystack[$this->yyidx + 0]->minor . ');';
    }
#line 1952 "Parser.php"
#line 313 "Parser.y"
    function yy_r25(){
    $this->_retvalue = Constructs\ConstructAssign::compileOpen(
        $this->compiler,
        array('value' => $this->yystack[$this->yyidx + 0]->minor, 'var' => "'" . $this->yystack[$this->yyidx + -2]->minor . "'"),
        null
    );
    }
#line 1961 "Parser.php"
#line 329 "Parser.y"
    function yy_r27(){
    $this->compiler->assert_is_not_strict('Passing attributes in an assignment without using {assign} is not supported in strict mode', $this);
    $this->_retvalue = Constructs\ConstructAssign::compileOpen(
        $this->compiler,
        array('value' => $this->yystack[$this->yyidx + -1]->minor, 'var' => "'" . $this->yystack[$this->yyidx + -3]->minor . "'"),
        $this->yystack[$this->yyidx + 0]->minor
    );
    }
#line 1971 "Parser.php"
#line 339 "Parser.y"
    function yy_r28(){
    switch ($this->yystack[$this->yyidx + -1]->minor) {
        case 'forelse':
            $this->_retvalue = Constructs\ConstructForElse::compileOpen($this->compiler, null, null);
            break;
        default:
            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 1982 "Parser.php"
#line 349 "Parser.y"
    function yy_r29(){
    switch ($this->yystack[$this->yyidx + 0]->minor) {
        case 'forelse':
            $this->_retvalue = Constructs\ConstructForElse::compileOpen($this->compiler, null, null);
            break;
        default:
            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + 0]->minor,array());
    }
    }
#line 1993 "Parser.php"
#line 360 "Parser.y"
    function yy_r30(){
    $this->_retvalue = "ob_start();\n".$this->compiler->compileTag($this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor).'echo ';
    $this->_retvalue .= Constructs\ConstructModifier::compileOpen($compiler, array(
        'value' => 'ob_get_clean()',
        'modifierlist' => $this->yystack[$this->yyidx + -1]->minor,
    ));
    }
#line 2002 "Parser.php"
#line 370 "Parser.y"
    function yy_r31(){
    $tag = trim(substr($this->yystack[$this->yyidx + -1]->minor, $this->lex->ldel_length));
    switch ($tag) {
        case 'if':
            $this->_retvalue = Constructs\ConstructIf::compileOpen($this->compiler, array('cond' => $this->yystack[$this->yyidx + 0]->minor), null);
            break;
        case 'elseif':
            break;
        case 'while':
            break;
        default:
            $this->_retvalue = $this->compiler->compileTag(($tag == 'else if')? 'elseif' : $tag,array(),array('if condition'=>$this->yystack[$this->yyidx + 0]->minor));
    }
    }
#line 2018 "Parser.php"
#line 385 "Parser.y"
    function yy_r32(){
    $tag = trim(substr($this->yystack[$this->yyidx + -2]->minor, $this->lex->ldel_length));
    switch ($tag) {
        case 'if':
            $this->_retvalue = Constructs\ConstructIf::compileOpen($this->compiler, array('cond' => $this->yystack[$this->yyidx + -1]->minor), $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'elseif':
            break;
        case 'while':
            break;
        default:
            $this->_retvalue = $this->compiler->compileTag(($tag == 'else if')? 'elseif' : $tag,$this->yystack[$this->yyidx + 0]->minor,array('if condition'=>$this->yystack[$this->yyidx + -1]->minor));
    }
    }
#line 2034 "Parser.php"
#line 401 "Parser.y"
    function yy_r33(){
    $this->_retvalue = Constructs\ConstructFor::compileOpen(
        $this->compiler,
        array_merge(
            $this->yystack[$this->yyidx + 0]->minor,
            array(
                array('start' => $this->yystack[$this->yyidx + -9]->minor),
                array('ifexp' => $this->yystack[$this->yyidx + -6]->minor),
                array('var' => $this->yystack[$this->yyidx + -2]->minor),
                array('step' => $this->yystack[$this->yyidx + -1]->minor)
            )
        ),
        null
    );
    }
#line 2051 "Parser.php"
#line 417 "Parser.y"
    function yy_r34(){
    $this->_retvalue = '='.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2056 "Parser.php"
#line 425 "Parser.y"
    function yy_r36(){
    $this->_retvalue = Constructs\ConstructFor::compileOpen(
        $this->compiler,
        array_merge(
            $this->yystack[$this->yyidx + 0]->minor,
            array(array('start' => $this->yystack[$this->yyidx + -3]->minor), array('to' => $this->yystack[$this->yyidx + -1]->minor))
        ),
        null
    );
    }
#line 2068 "Parser.php"
#line 436 "Parser.y"
    function yy_r37(){
    $this->_retvalue = Constructs\ConstructFor::compileOpen(
        $this->compiler,
        array_merge(
            $this->yystack[$this->yyidx + 0]->minor,
            array(array('start' => $this->yystack[$this->yyidx + -5]->minor), array('to' => $this->yystack[$this->yyidx + -3]->minor), array('step' => $this->yystack[$this->yyidx + -1]->minor))
        ),
        null
    );
    }
#line 2080 "Parser.php"
#line 448 "Parser.y"
    function yy_r38(){
    $this->_retvalue = $this->compiler->compileTag('foreach',$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2085 "Parser.php"
#line 453 "Parser.y"
    function yy_r39(){
    $this->_retvalue = $this->compiler->compileTag('foreach',array_merge($this->yystack[$this->yyidx + 0]->minor,array(array('from'=>$this->yystack[$this->yyidx + -4]->minor),array('item'=>$this->yystack[$this->yyidx + -1]->minor))));
    }
#line 2090 "Parser.php"
#line 457 "Parser.y"
    function yy_r40(){
    $this->_retvalue = $this->compiler->compileTag('foreach',array_merge($this->yystack[$this->yyidx + 0]->minor,array(array('from'=>$this->yystack[$this->yyidx + -7]->minor),array('item'=>$this->yystack[$this->yyidx + -1]->minor),array('key'=>$this->yystack[$this->yyidx + -4]->minor))));
    }
#line 2095 "Parser.php"
#line 470 "Parser.y"
    function yy_r43(){
    $this->_retvalue = $this->compiler->compileTag('setfilter',array(),array('modifier_list'=>array(array_merge(array($this->yystack[$this->yyidx + -1]->minor),$this->yystack[$this->yyidx + 0]->minor))));
    }
#line 2100 "Parser.php"
#line 474 "Parser.y"
    function yy_r44(){
    $this->_retvalue = $this->compiler->compileTag('setfilter',array(),array('modifier_list'=>array_merge(array(array_merge(array($this->yystack[$this->yyidx + -2]->minor),$this->yystack[$this->yyidx + -1]->minor)),$this->yystack[$this->yyidx + 0]->minor)));
    }
#line 2105 "Parser.php"
#line 479 "Parser.y"
    function yy_r45(){
    $j = strrpos($this->yystack[$this->yyidx + 0]->minor,'.');
    if ($this->yystack[$this->yyidx + 0]->minor[$j+1] == 'c') {
        // {$smarty.block.child}
        $this->_retvalue = SMARTY_INTERNAL_COMPILE_BLOCK::compileChildBlock($this->compiler);
    } else {
        // {$smarty.block.parent}
        $this->_retvalue = SMARTY_INTERNAL_COMPILE_BLOCK::compileParentBlock($this->compiler);
    }
    }
#line 2117 "Parser.php"
#line 492 "Parser.y"
    function yy_r46(){
    switch ($this->yystack[$this->yyidx + 0]->minor) {
        case 'for':
            $this->_retvalue = Constructs\ConstructFor::compileClose($this->compiler, null, null);
            break;
        default:
            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + 0]->minor.'close',array());
    }
    }
#line 2128 "Parser.php"
#line 502 "Parser.y"
    function yy_r47(){
    switch ($this->yystack[$this->yyidx + -1]->minor) {
        case 'for':
            $this->_retvalue = Constructs\ConstructFor::compileClose($this->compiler, null, null);
            break;
        default:
            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -1]->minor.'close',array(),array('modifier_list'=>$this->yystack[$this->yyidx + 0]->minor));
    }
    }
#line 2139 "Parser.php"
#line 516 "Parser.y"
    function yy_r48(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    $this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 2145 "Parser.php"
#line 522 "Parser.y"
    function yy_r49(){
    $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2150 "Parser.php"
#line 527 "Parser.y"
    function yy_r50(){
    $this->_retvalue = array();
    }
#line 2155 "Parser.php"
#line 532 "Parser.y"
    function yy_r51(){
    if (preg_match('~^true$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>'true');
    } elseif (preg_match('~^false$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>'false');
    } elseif (preg_match('~^null$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>'null');
    } else {
        $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>"'".$this->yystack[$this->yyidx + 0]->minor."'");
    }
    }
#line 2168 "Parser.php"
#line 544 "Parser.y"
    function yy_r52(){
    $this->_retvalue = array(trim($this->yystack[$this->yyidx + -1]->minor," =\n\r\t")=>$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2173 "Parser.php"
#line 552 "Parser.y"
    function yy_r54(){
    $this->_retvalue = "'".$this->yystack[$this->yyidx + 0]->minor."'";
    }
#line 2178 "Parser.php"
#line 564 "Parser.y"
    function yy_r57(){
    $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2183 "Parser.php"
#line 577 "Parser.y"
    function yy_r59(){
    $this->yystack[$this->yyidx + -2]->minor[]=$this->yystack[$this->yyidx + 0]->minor;
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor;
    }
#line 2189 "Parser.php"
#line 582 "Parser.y"
    function yy_r60(){
    $this->compiler->assert_is_not_strict('Variable variable assignment is not supported in strict mode', $this);
    $this->_retvalue = array('var' => $this->yystack[$this->yyidx + -2]->minor, 'value'=>$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2195 "Parser.php"
#line 587 "Parser.y"
    function yy_r61(){
    $this->_retvalue = array('var' => $this->yystack[$this->yyidx + -2]->minor, 'value'=>$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2200 "Parser.php"
#line 611 "Parser.y"
    function yy_r65(){
    $this->_retvalue = Wrappers\StaticWrapper::static_if_all($this->yystack[$this->yyidx + -2]->minor . trim($this->yystack[$this->yyidx + -1]->minor) . $this->yystack[$this->yyidx + 0]->minor, array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 2205 "Parser.php"
#line 630 "Parser.y"
    function yy_r69(){
    $this->_retvalue = Constructs\ConstructModifier::compileOpen($compiler, array(
        'value' => $this->yystack[$this->yyidx + -1]->minor,
        'modifierlist' => $this->yystack[$this->yyidx + 0]->minor,
    ));
    }
#line 2213 "Parser.php"
#line 639 "Parser.y"
    function yy_r70(){
    $this->_retvalue = new Wrappers\StaticWrapper($this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2218 "Parser.php"
#line 643 "Parser.y"
    function yy_r71(){
    $this->_retvalue = new Wrappers\StaticWrapper('in_array('.$this->yystack[$this->yyidx + -2]->minor.','.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2223 "Parser.php"
#line 647 "Parser.y"
    function yy_r72(){
    $this->_retvalue = new Wrappers\StaticWrapper('in_array('.$this->yystack[$this->yyidx + -2]->minor.',(array)'.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2228 "Parser.php"
#line 655 "Parser.y"
    function yy_r74(){
    $this->_retvalue = new Wrappers\StaticWrapper('!('.$this->yystack[$this->yyidx + -2]->minor.' % '.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2233 "Parser.php"
#line 659 "Parser.y"
    function yy_r75(){
    $this->compiler->assert_is_not_strict('`is not div by` is not supported in strict mode', $this);
    $this->_retvalue = new Wrappers\StaticWrapper('('.$this->yystack[$this->yyidx + -2]->minor.' % '.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2239 "Parser.php"
#line 664 "Parser.y"
    function yy_r76(){
    $this->_retvalue = new Wrappers\StaticWrapper('!(1 & '.$this->yystack[$this->yyidx + -1]->minor.')');
    }
#line 2244 "Parser.php"
#line 668 "Parser.y"
    function yy_r77(){
    $this->compiler->assert_is_not_strict('`is not even` is not supported in strict mode', $this);
    $this->_retvalue = new Wrappers\StaticWrapper('(1 & '.$this->yystack[$this->yyidx + -1]->minor.')');
    }
#line 2250 "Parser.php"
#line 673 "Parser.y"
    function yy_r78(){
    $this->compiler->assert_is_not_strict('`is even by` is not supported in strict mode', $this);
    $this->_retvalue = new Wrappers\StaticWrapper('!(1 & '.$this->yystack[$this->yyidx + -2]->minor.' / '.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2256 "Parser.php"
#line 678 "Parser.y"
    function yy_r79(){
    $this->compiler->assert_is_not_strict('`is not even by` is not supported in strict mode', $this);
    $this->_retvalue = new Wrappers\StaticWrapper('(1 & '.$this->yystack[$this->yyidx + -2]->minor.' / '.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2262 "Parser.php"
#line 683 "Parser.y"
    function yy_r80(){
    $this->_retvalue = new Wrappers\StaticWrapper('(1 & '.$this->yystack[$this->yyidx + -1]->minor.')');
    }
#line 2267 "Parser.php"
#line 687 "Parser.y"
    function yy_r81(){
    $this->compiler->assert_is_not_strict('`is not odd` is not supported in strict mode', $this);
    $this->_retvalue = new Wrappers\StaticWrapper('!(1 & '.$this->yystack[$this->yyidx + -1]->minor.')');
    }
#line 2273 "Parser.php"
#line 692 "Parser.y"
    function yy_r82(){
    $this->compiler->assert_is_not_strict('`is odd by` is not supported in strict mode', $this);
    $this->_retvalue = new Wrappers\StaticWrapper('(1 & '.$this->yystack[$this->yyidx + -2]->minor.' / '.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2279 "Parser.php"
#line 697 "Parser.y"
    function yy_r83(){
    $this->compiler->assert_is_not_strict('`is not odd by` is not supported in strict mode', $this);
    $this->_retvalue = new Wrappers\StaticWrapper('!(1 & '.$this->yystack[$this->yyidx + -2]->minor.' / '.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2285 "Parser.php"
#line 705 "Parser.y"
    function yy_r84(){
    $this->_retvalue = $this->yystack[$this->yyidx + -6]->minor.' ? '. $this->compileVariable("'".$this->yystack[$this->yyidx + -2]->minor."'") . ' : '.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2290 "Parser.php"
#line 709 "Parser.y"
    function yy_r85(){
    $this->_retvalue = $this->yystack[$this->yyidx + -5]->minor.' ? '.$this->yystack[$this->yyidx + -2]->minor.' : '.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2295 "Parser.php"
#line 719 "Parser.y"
    function yy_r87(){
    $this->_retvalue = Wrappers\StaticWrapper::static_concat($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2300 "Parser.php"
#line 724 "Parser.y"
    function yy_r88(){
    $this->_retvalue = Wrappers\StaticWrapper::static_concat('!', $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2305 "Parser.php"
#line 737 "Parser.y"
    function yy_r91(){
    $this->_retvalue = new Wrappers\StaticWrapper($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2310 "Parser.php"
#line 741 "Parser.y"
    function yy_r92(){
    $this->_retvalue = new Wrappers\StaticWrapper($this->yystack[$this->yyidx + -2]->minor.'.'.$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2315 "Parser.php"
#line 745 "Parser.y"
    function yy_r93(){
    $this->_retvalue = new Wrappers\StaticWrapper($this->yystack[$this->yyidx + -1]->minor.'.');
    }
#line 2320 "Parser.php"
#line 749 "Parser.y"
    function yy_r94(){
    $this->_retvalue = new Wrappers\StaticWrapper('.'.$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2325 "Parser.php"
#line 754 "Parser.y"
    function yy_r95(){
    if (preg_match('~^true$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = new Wrappers\StaticWrapper('true');
    } elseif (preg_match('~^false$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = new Wrappers\StaticWrapper('false');
    } elseif (preg_match('~^null$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = new Wrappers\StaticWrapper('null');
    } else {
        $this->_retvalue = new Wrappers\StaticWrapper(var_export($this->yystack[$this->yyidx + 0]->minor, true));
    }
    }
#line 2338 "Parser.php"
#line 772 "Parser.y"
    function yy_r97(){
    $this->_retvalue = Wrappers\StaticWrapper::static_if_all("(". $this->yystack[$this->yyidx + -1]->minor .")", array($this->yystack[$this->yyidx + -1]->minor));
    }
#line 2343 "Parser.php"
#line 788 "Parser.y"
    function yy_r100(){
    $this->_retvalue = 'array(ob_start(),' . $this->yystack[$this->yyidx + -1]->minor . ', ob_get_clean())[2]';
    }
#line 2348 "Parser.php"
#line 808 "Parser.y"
    function yy_r103(){
    $this->compiler->assert_is_not_strict('Variable variables are not supported in strict mode', $this);
    $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 2354 "Parser.php"
#line 813 "Parser.y"
    function yy_r104(){
    $this->_retvalue = $this->compileSafeLookupWithBase($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2359 "Parser.php"
#line 818 "Parser.y"
    function yy_r105(){
    if ($this->yystack[$this->yyidx + -2]->minor == '\'smarty\'') {
        $this->_retvalue = $this->compiler->compileTag('private_special_variable', array(), $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    } else {
        $this->_retvalue = $this->compileSafeLookupWithBase($this->compileVariable($this->yystack[$this->yyidx + -2]->minor), $this->yystack[$this->yyidx + -1]->minor);
        $this->_retvalue = $this->compileSafeLookupWithBase($this->_retvalue, $this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 2369 "Parser.php"
#line 827 "Parser.y"
    function yy_r106(){
    if ($this->yystack[$this->yyidx + -1]->minor == '\'smarty\'') {
        $this->_retvalue = $this->compiler->compileTag('private_special_variable', array(), $this->yystack[$this->yyidx + 0]->minor);
    } else {
        $this->_retvalue = $this->compileSafeLookupWithBase($this->compileVariable($this->yystack[$this->yyidx + -1]->minor), $this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 2378 "Parser.php"
#line 835 "Parser.y"
    function yy_r107(){
    $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2383 "Parser.php"
#line 843 "Parser.y"
    function yy_r109(){
    $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2388 "Parser.php"
#line 849 "Parser.y"
    function yy_r110(){
    $this->compiler->assert_is_not_strict('Variable indicies with dot syntax is not supported in strict mode', $this);
    $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2394 "Parser.php"
#line 854 "Parser.y"
    function yy_r111(){
    $this->compiler->assert_is_not_strict('Variable indicies with dot syntax is not supported in strict mode', $this);
    $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + -2]->minor).'->'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2400 "Parser.php"
#line 859 "Parser.y"
    function yy_r112(){
    $this->_retvalue = "'". $this->yystack[$this->yyidx + 0]->minor ."'";
    }
#line 2405 "Parser.php"
#line 867 "Parser.y"
    function yy_r114(){
    $this->compiler->assert_is_not_strict('Dot syntax with expressions is not supported in strict mode', $this);
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 2411 "Parser.php"
#line 873 "Parser.y"
    function yy_r115(){
    $this->compiler->assert_is_not_strict('Section tags are not supported in strict mode', $this);
    $this->_retvalue = $this->compiler->compileTag('private_special_variable', array(), '\'section\'', '\'' . $this->yystack[$this->yyidx + -1]->minor . '\'') . '[\'index\']';
    }
#line 2417 "Parser.php"
#line 878 "Parser.y"
    function yy_r116(){
    $this->compiler->assert_is_not_strict('Section tags are not supported in strict mode', $this);
    $this->_retvalue = $this->compiler->compileTag('private_special_variable', array(), '\'section\'', '\'' . $this->yystack[$this->yyidx + -3]->minor . '\']') . '[\''.$this->yystack[$this->yyidx + -1]->minor.'\']';
    }
#line 2423 "Parser.php"
#line 897 "Parser.y"
    function yy_r119(){
    $this->compiler->assert_is_not_strict('Variable variables are not supported in strict mode', $this);
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.'.'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2429 "Parser.php"
#line 903 "Parser.y"
    function yy_r120(){
    $this->_retvalue = '\''.$this->yystack[$this->yyidx + 0]->minor.'\'';
    }
#line 2434 "Parser.php"
#line 908 "Parser.y"
    function yy_r121(){
    $this->_retvalue = '('.$this->yystack[$this->yyidx + -1]->minor.')';
    }
#line 2439 "Parser.php"
#line 917 "Parser.y"
    function yy_r122(){
    if ($this->security && substr($this->yystack[$this->yyidx + 0]->minor, 0, 1) == '_') {
        $this->compiler->trigger_template_error(self::Err1);
    }
    $this->_retvalue = '->'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2447 "Parser.php"
#line 924 "Parser.y"
    function yy_r123(){
    $this->compiler->assert_is_not_strict('Variable method calls are not supported in strict mode', $this);
    if ($this->security) {
        $this->compiler->trigger_template_error (self::Err2);
    }
    $this->_retvalue = '->{'.$this->compileVariable($this->yystack[$this->yyidx + 0]->minor).'}';
    }
#line 2456 "Parser.php"
#line 932 "Parser.y"
    function yy_r124(){
    $this->compiler->assert_is_not_strict('Variable method calls are not supported in strict mode', $this);
    if ($this->security) {
        $this->compiler->trigger_template_error (self::Err2);
    }
    $this->_retvalue = '->{'.$this->yystack[$this->yyidx + -1]->minor.'}';
    }
#line 2465 "Parser.php"
#line 940 "Parser.y"
    function yy_r125(){
    $this->compiler->assert_is_not_strict('Variable method calls are not supported in strict mode', $this);
    if ($this->security) {
        $this->compiler->trigger_template_error (self::Err2);
    }
    $this->_retvalue = '->{\''.$this->yystack[$this->yyidx + -3]->minor.'\'.'.$this->yystack[$this->yyidx + -1]->minor.'}';
    }
#line 2474 "Parser.php"
#line 949 "Parser.y"
    function yy_r126(){
    $this->_retvalue = '->'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2479 "Parser.php"
#line 957 "Parser.y"
    function yy_r127(){
    if (!$this->security || $this->smarty->security_policy->isTrustedPhpFunction($this->yystack[$this->yyidx + -3]->minor, $this->compiler)) {
        if (strcasecmp($this->yystack[$this->yyidx + -3]->minor, 'isset') === 0 || strcasecmp($this->yystack[$this->yyidx + -3]->minor, 'empty') === 0 || strcasecmp($this->yystack[$this->yyidx + -3]->minor, 'array') === 0 || is_callable($this->yystack[$this->yyidx + -3]->minor)) {
            $func_name = strtolower($this->yystack[$this->yyidx + -3]->minor);

            $is_language_construct = $func_name === 'isset' || $func_name === 'empty';
            $combined_params = array();
            foreach ($this->yystack[$this->yyidx + -1]->minor as $param) {
                if ($is_language_construct && $param instanceof Wrappers\SafeLookupWrapper) {
                    $combined_params[] = $param->getUnsafe();
                    continue;
                }
                $combined_params[] = $param;
            }
            $par = implode(',', $combined_params);

            if ($func_name == 'isset') {
                if (count($combined_params) == 0) {
                    $this->compiler->trigger_template_error('Illegal number of paramer in "isset()"');
                }
                $isset_par=str_replace("')->value","',null,true,false)->value",$par);
                $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". $isset_par .")";

            } elseif (in_array($func_name, array('empty', 'reset', 'current', 'end', 'prev', 'next'))) {

                if ($func_name !== 'empty') {
                    $this->compiler->assert_is_not_strict($func_name . ' is not allowed in strict mode', $this);
                }

                if (count($combined_params) != 1) {
                    $this->compiler->trigger_template_error('Illegal number of paramer in "empty()"');
                }
                if ($func_name == 'empty') {
                    $this->_retvalue = $func_name.'('.str_replace("')->value","',null,true,false)->value",$combined_params[0]).')';
                } else {
                    $this->_retvalue = $func_name.'('.$combined_params[0].')';
                }
            } else {
                $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". $par .")";
            }
        } else {
            $this->compiler->trigger_template_error("unknown function \"" . $this->yystack[$this->yyidx + -3]->minor . "\"");
        }
    }
    }
#line 2526 "Parser.php"
#line 1006 "Parser.y"
    function yy_r128(){
    if ($this->security && substr($this->yystack[$this->yyidx + -3]->minor,0,1) == '_') {
        $this->compiler->trigger_template_error(self::Err1);
    }
    $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". implode(',',$this->yystack[$this->yyidx + -1]->minor) .")";
    }
#line 2534 "Parser.php"
#line 1015 "Parser.y"
    function yy_r129(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -2]->minor,array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 2539 "Parser.php"
#line 1032 "Parser.y"
    function yy_r132(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -2]->minor,array(array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor)));
    }
#line 2544 "Parser.php"
#line 1036 "Parser.y"
    function yy_r133(){
    $this->_retvalue = array(array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor));
    }
#line 2549 "Parser.php"
#line 1040 "Parser.y"
    function yy_r134(){
    $this->compiler->assert_is_not_strict('@ is not allowed in templates', $this);
    $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2555 "Parser.php"
#line 1045 "Parser.y"
    function yy_r135(){
    $this->_retvalue =  array($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2560 "Parser.php"
#line 1053 "Parser.y"
    function yy_r136(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2565 "Parser.php"
#line 1073 "Parser.y"
    function yy_r140(){
    $this->_retvalue = '==';
    }
#line 2570 "Parser.php"
#line 1077 "Parser.y"
    function yy_r141(){
    $this->_retvalue = '!=';
    }
#line 2575 "Parser.php"
#line 1081 "Parser.y"
    function yy_r142(){
    $this->_retvalue = '>';
    }
#line 2580 "Parser.php"
#line 1085 "Parser.y"
    function yy_r143(){
    $this->_retvalue = '<';
    }
#line 2585 "Parser.php"
#line 1089 "Parser.y"
    function yy_r144(){
    $this->_retvalue = '>=';
    }
#line 2590 "Parser.php"
#line 1093 "Parser.y"
    function yy_r145(){
    $this->_retvalue = '<=';
    }
#line 2595 "Parser.php"
#line 1097 "Parser.y"
    function yy_r146(){
    $this->_retvalue = '===';
    }
#line 2600 "Parser.php"
#line 1101 "Parser.y"
    function yy_r147(){
    $this->_retvalue = '!==';
    }
#line 2605 "Parser.php"
#line 1105 "Parser.y"
    function yy_r148(){
    $this->_retvalue = '%';
    }
#line 2610 "Parser.php"
#line 1109 "Parser.y"
    function yy_r149(){
    $this->_retvalue = '&&';
    }
#line 2615 "Parser.php"
#line 1113 "Parser.y"
    function yy_r150(){
    $this->_retvalue = '||';
    }
#line 2620 "Parser.php"
#line 1117 "Parser.y"
    function yy_r151(){
    $this->compiler->assert_is_not_strict('XOR is not supported in strict mode', $this);
    $this->_retvalue = ' XOR ';
    }
#line 2626 "Parser.php"
#line 1125 "Parser.y"
    function yy_r152(){
    $this->_retvalue = 'array('.$this->yystack[$this->yyidx + -1]->minor.')';
    }
#line 2631 "Parser.php"
#line 1133 "Parser.y"
    function yy_r154(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.','.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2636 "Parser.php"
#line 1137 "Parser.y"
    function yy_r155(){
    return;
    }
#line 2641 "Parser.php"
#line 1141 "Parser.y"
    function yy_r156(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'=>'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2646 "Parser.php"
#line 1145 "Parser.y"
    function yy_r157(){
    $this->_retvalue = '\''.$this->yystack[$this->yyidx + -2]->minor.'\'=>'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2651 "Parser.php"
#line 1157 "Parser.y"
    function yy_r159(){
    $this->_retvalue = "''";
    }
#line 2656 "Parser.php"
#line 1161 "Parser.y"
    function yy_r160(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor->to_smarty_php();
    }
#line 2661 "Parser.php"
#line 1166 "Parser.y"
    function yy_r161(){
    $this->yystack[$this->yyidx + -1]->minor->append_subtree($this->yystack[$this->yyidx + 0]->minor);
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 2667 "Parser.php"
#line 1171 "Parser.y"
    function yy_r162(){
    $this->_retvalue = new Helpers\DoubleQuoted($this, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2672 "Parser.php"
#line 1175 "Parser.y"
    function yy_r163(){
    $this->_retvalue = new Helpers\Code($this, '(string)' . $this->compileVariable("'" . substr($this->yystack[$this->yyidx + 0]->minor,1) . "'"));
    }
#line 2677 "Parser.php"
#line 1179 "Parser.y"
    function yy_r164(){
    $this->_retvalue = new Helpers\Code($this, '(string)'.$this->yystack[$this->yyidx + -1]->minor);
    }
#line 2682 "Parser.php"
#line 1183 "Parser.y"
    function yy_r165(){
    $this->_retvalue = new Helpers\Code($this, '(string)('.$this->yystack[$this->yyidx + -1]->minor.')');
    }
#line 2687 "Parser.php"
#line 1187 "Parser.y"
    function yy_r166(){
    $this->_retvalue = new Helpers\DoubleQuotedContent($this, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2692 "Parser.php"

    private $_retvalue;

    public function yy_reduce($yyruleno)
    {
        $yymsp = $this->yystack[$this->yyidx];
        if ($this->yyTraceFILE && $yyruleno >= 0
              && $yyruleno < count(self::$yyRuleName)) {
            fprintf($this->yyTraceFILE, "%sReduce (%d) [%s].\n",
                $this->yyTracePrompt, $yyruleno,
                self::$yyRuleName[$yyruleno]);
        }

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for ($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            if (!$this->yyTraceFILE && $yysize) {
                $this->yyidx++;
                $x = new TP_yyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    public function yy_parse_failed()
    {
        if ($this->yyTraceFILE) {
            fprintf($this->yyTraceFILE, "%sFail!\n", $this->yyTracePrompt);
        } while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
    }

    public function yy_syntax_error($yymajor, $TOKEN)
    {
#line 120 "Parser.y"

    $this->internalError = true;
    $this->yymajor = $yymajor;
    $this->compiler->trigger_template_error();
#line 2754 "Parser.php"
    }

    public function yy_accept()
    {
        if ($this->yyTraceFILE) {
            fprintf($this->yyTraceFILE, "%sAccept!\n", $this->yyTracePrompt);
        } while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
#line 113 "Parser.y"

    $this->successful = !$this->internalError;
    $this->internalError = false;
    $this->retvalue = $this->_retvalue;
#line 2770 "Parser.php"
    }

    public function doParse($yymajor, $yytokenvalue)
    {
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */

        if ($this->yyidx === null || $this->yyidx < 0) {
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new TP_yyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);

        if ($this->yyTraceFILE) {
            fprintf($this->yyTraceFILE, "%sInput %s\n",
                $this->yyTracePrompt, $this->yyTokenName[$yymajor]);
        }

        do {
            $yyact = $this->yy_find_shift_action($yymajor);
            if ($yymajor < self::YYERRORSYMBOL &&
                  !$this->yy_is_expected_token($yymajor)) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if ($this->yyTraceFILE) {
                    fprintf($this->yyTraceFILE, "%sSyntax Error!\n",
                        $this->yyTracePrompt);
                }
                if (self::YYERRORSYMBOL) {
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit) {
                        if ($this->yyTraceFILE) {
                            fprintf($this->yyTraceFILE, "%sDiscard input token %s\n",
                                $this->yyTracePrompt, $this->yyTokenName[$yymajor]);
                        }
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0 &&
                                 $yymx != self::YYERRORSYMBOL &&
        ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                              ){
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}
