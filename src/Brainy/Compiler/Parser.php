<?php
/**
 * Brainy Internal Plugin Templateparser
 *
 * This is the template parser.
 * It is generated from the Parser.y file
 * @package Brainy
 * @subpackage Compiler
 * @author Uwe Tews
 * @author Matt Basta
 */

namespace Box\Brainy\Compiler;


class TP_yyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};


#line 17 "Parser.y"
class Parser#line 16 "Parser.php"
{
#line 19 "Parser.y"

    public $retvalue = 0;
    private $internalError = false;

    private $lex;
    private $compiler;
    private $smarty;
    private $template;
    private $security;
    public $current_buffer;

    private $safe_lookups = 0;
    private $strict_mode = false;
    private $strip = 0;

    public function __construct($lex, $compiler) {
        $this->lex = $lex;
        $this->compiler = $compiler;
        $this->smarty = $this->compiler->smarty;
        $this->template = $this->compiler->template;
        $this->security = isset($this->smarty->security_policy);
        $this->current_buffer = $this->root_buffer = new Helpers\TemplateBuffer();

        $this->safe_lookups = $this->smarty->safe_lookups;
    }

    /**
     * Strips whitespace from a string
     * @param string $string
     * @return string
     */
    protected static function stripString($string) {
        // Replaces whitespace followed by a `<` with null.
        // `     \n     </foo>` -> `</foo>`
        $string = preg_replace('/\s+(?=<\/)/ims', '', $string);
        // `     \n     <foo>` -> ` <foo>`
        // `     \n     &nbsp;` -> ` &nbsp;`
        $string = preg_replace('/\s+(?=[<&])/ims', ' ', $string);
        // Replaces `>` followed by whitespace with `>`
        // `<div>\n  foo` -> `<div>foo`
        $string = preg_replace('/>\s+(?=\S)/ims', '>', $string);
        // Replaces whitespace followed by anything else with a space.
        // `            data-hello="` -> ` data-hello="`
        $string = preg_replace('/\s+(?=\w)/ims', ' ', $string);

        // Is there work to be done at the end of the string?
        if ($string !== rtrim($string)) {
            $string = rtrim($string);
            // If the last non-whitespace character is not a `>`, add a space.
            if (substr($string, -1) !== '>') {
                $string .= ' ';
            }
        }
        return $string;
    }

    /**
     * @return bool
     */
    public function isStrictMode() {
        return $this->strict_mode;
    }

    /**
     * @param string $variable The name of the variable to look up
     * @param string|void $value The member of the SmartyVariable to access
     * @return string|Wrappers\SafeLookupWrapper
     */
    public function compileVariable($variable, $value = 'value')
    {
        $unsafe = '$_smarty_tpl->tpl_vars[' . $variable . ']->' . $value;
        if ($this->safe_lookups === 0) { // Unsafe lookups
            return $unsafe;
        }
        $safe = '\Box\Brainy\Runtime\Lookups::safeVarLookup($_smarty_tpl->tpl_vars, '. $variable .', ' . $this->safe_lookups . ')->' . $value;
        return new Wrappers\SafeLookupWrapper($unsafe, $safe);
    }

    /**
     * @param string $base
     * @param string $variable
     * @return string|Wrappers\SafeLookupWrapper
     */
    public function compileSafeLookupWithBase($base, $variable)
    {
        $unsafe = $base . '[' . $variable . ']';
        if ($this->safe_lookups === 0) { // Unsafe lookups
            return $unsafe;
        }
        $safe = '\Box\Brainy\Runtime\Lookups::safeArrayLookup(' . $base . ', '. $variable .', ' . $this->safe_lookups . ')';
        return new Wrappers\SafeLookupWrapper($unsafe, $safe);
    }
#line 112 "Parser.php"

    const TP_VERT                           =  1;
    const TP_COLON                          =  2;
    const TP_SETSTRICT                      =  3;
    const TP_LDELEXTENDS                    =  4;
    const TP_RDEL                           =  5;
    const TP_COMMENT                        =  6;
    const TP_STRIPON                        =  7;
    const TP_STRIPOFF                       =  8;
    const TP_TEXT                           =  9;
    const TP_LDELBLOCK                      = 10;
    const TP_CLOSEBLOCK                     = 11;
    const TP_LITERALSTART                   = 12;
    const TP_LITERALEND                     = 13;
    const TP_LITERAL                        = 14;
    const TP_LDEL                           = 15;
    const TP_EQUAL                          = 16;
    const TP_DOLLAR                         = 17;
    const TP_ID                             = 18;
    const TP_LDELIF                         = 19;
    const TP_LDELFOR                        = 20;
    const TP_SEMICOLON                      = 21;
    const TP_INCDEC                         = 22;
    const TP_TO                             = 23;
    const TP_STEP                           = 24;
    const TP_LDELFOREACH                    = 25;
    const TP_SPACE                          = 26;
    const TP_AS                             = 27;
    const TP_APTR                           = 28;
    const TP_LDELSLASH                      = 29;
    const TP_INTEGER                        = 30;
    const TP_COMMA                          = 31;
    const TP_OPENP                          = 32;
    const TP_CLOSEP                         = 33;
    const TP_MATH                           = 34;
    const TP_UNIMATH                        = 35;
    const TP_ANDSYM                         = 36;
    const TP_ISIN                           = 37;
    const TP_ISDIVBY                        = 38;
    const TP_ISEVEN                         = 39;
    const TP_ISODD                          = 40;
    const TP_QMARK                          = 41;
    const TP_NOT                            = 42;
    const TP_TYPECAST                       = 43;
    const TP_DOT                            = 44;
    const TP_SINGLEQUOTESTRING              = 45;
    const TP_OPENB                          = 46;
    const TP_CLOSEB                         = 47;
    const TP_PTR                            = 48;
    const TP_AT                             = 49;
    const TP_EQUALS                         = 50;
    const TP_NOTEQUALS                      = 51;
    const TP_GREATERTHAN                    = 52;
    const TP_LESSTHAN                       = 53;
    const TP_GREATEREQUAL                   = 54;
    const TP_LESSEQUAL                      = 55;
    const TP_IDENTITY                       = 56;
    const TP_NONEIDENTITY                   = 57;
    const TP_MOD                            = 58;
    const TP_LAND                           = 59;
    const TP_LOR                            = 60;
    const TP_LXOR                           = 61;
    const TP_QUOTE                          = 62;
    const TP_DOLLARID                       = 63;
    const YY_NO_ACTION = 385;
    const YY_ACCEPT_ACTION = 384;
    const YY_ERROR_ACTION = 383;

    const YY_SZ_ACTTAB = 1066;
static public $yy_action = array(
 /*     0 */   119,  215,  222,  220,  221,   84,  156,  116,   77,  133,
 /*    10 */    30,  170,  159,    6,   23,   80,  196,   38,  171,   73,
 /*    20 */    85,  200,  189,   32,  131,   28,  108,  152,  210,    7,
 /*    30 */   209,  129,  216,   68,   70,   67,   40,   10,  181,  182,
 /*    40 */    37,  119,  197,  210,    7,  161,  129,  216,  211,  186,
 /*    50 */   185,  183,  184,  206,  207,  230,  231,  229,  228,  225,
 /*    60 */   226,  109,   36,  151,  197,  210,    7,   19,  129,  216,
 /*    70 */   116,  219,  240,  165,   68,   70,   67,   40,   10,  181,
 /*    80 */   182,  119,  166,  210,    7,  232,  129,  216,   88,  238,
 /*    90 */   186,  185,  183,  184,  206,  207,  230,  231,  229,  228,
 /*   100 */   225,  226,  195,  210,    7,  194,  129,  216,  169,  167,
 /*   110 */   168,  172,   87,    4,   68,   70,   67,   40,   10,  181,
 /*   120 */   182,  119,  158,  195,  210,    7,    9,  129,  216,  205,
 /*   130 */   186,  185,  183,  184,  206,  207,  230,  231,  229,  228,
 /*   140 */   225,  226,  295,  102,   14,    8,    9,  157,   33,  130,
 /*   150 */   119,  115,   77,  136,   68,   70,   67,   40,   10,  181,
 /*   160 */   182,  178,  192,   28,   13,  200,  189,   93,   28,    5,
 /*   170 */   186,  185,  183,  184,  206,  207,  230,  231,  229,  228,
 /*   180 */   225,  226,   31,   68,   70,   67,   40,   10,  181,  182,
 /*   190 */   119,  154,  145,   22,  213,  212,  214,  127,    5,  186,
 /*   200 */   185,  183,  184,  206,  207,  230,  231,  229,  228,  225,
 /*   210 */   226,   74,   28,  155,  159,    6,  103,   25,   96,   90,
 /*   220 */   224,   77,  150,   68,   70,   67,   40,   10,  181,  182,
 /*   230 */   119,   29,  223,  100,  200,  189,    3,  282,  211,  186,
 /*   240 */   185,  183,  184,  206,  207,  230,  231,  229,  228,  225,
 /*   250 */   226,  117,  239,   26,  193,  126,  198,  199,   77,  132,
 /*   260 */    77,  140,  188,   68,   70,   67,   40,   10,  181,  182,
 /*   270 */   119,  200,  189,  200,  189,  191,   22,  201,  173,  186,
 /*   280 */   185,  183,  184,  206,  207,  230,  231,  229,  228,  225,
 /*   290 */   226,   99,   28,  147,  148,  106,   28,  153,   77,  137,
 /*   300 */   384,    1,  234,   68,   70,   67,   40,   10,  181,  182,
 /*   310 */   119,  200,  189,  211,   92,  111,  218,  211,  217,  186,
 /*   320 */   185,  183,  184,  206,  207,  230,  231,  229,  228,  225,
 /*   330 */   226,  107,   11,  105,   89,   28,  211,  211,   77,  134,
 /*   340 */    79,  101,  110,   68,   70,   67,   40,   10,  181,  182,
 /*   350 */   119,  200,  189,  120,  235,  211,  211,  142,  113,  186,
 /*   360 */   185,  183,  184,  206,  207,  230,  231,  229,  228,  225,
 /*   370 */   226,   39,  193,  202,  164,  145,   21,  187,   91,   97,
 /*   380 */    27,   28,   24,   68,   70,   67,   40,   10,  181,  182,
 /*   390 */   119,  162,    5,  179,   83,  114,  119,  144,  163,  186,
 /*   400 */   185,  183,  184,  206,  207,  230,  231,  229,  228,  225,
 /*   410 */   226,  138,  204,   81,   12,   86,  149,  175,   94,   17,
 /*   420 */   160,  256,  128,   68,   70,   67,   40,   10,  181,  182,
 /*   430 */   119,  256,  256,  256,  256,  256,  256,  256,  256,  186,
 /*   440 */   185,  183,  184,  206,  207,  230,  231,  229,  228,  225,
 /*   450 */   226,  256,  256,  256,  256,  256,  256,  256,  256,  256,
 /*   460 */   256,  256,  146,   68,   70,   67,   40,   10,  181,  182,
 /*   470 */   119,  256,  256,  256,  256,  256,  256,  256,  256,  186,
 /*   480 */   185,  183,  184,  206,  207,  230,  231,  229,  228,  225,
 /*   490 */   226,  256,  256,  233,  256,  256,  256,  256,  256,   20,
 /*   500 */   256,  256,  256,   68,   70,   67,   40,   10,  181,  182,
 /*   510 */   256,  256,  256,  256,  256,  256,  256,  256,  256,  186,
 /*   520 */   185,  183,  184,  206,  207,  230,  231,  229,  228,  225,
 /*   530 */   226,  256,  256,  256,  256,  256,   77,  135,   68,   70,
 /*   540 */    67,   40,   10,  181,  182,  180,  177,  176,  256,  200,
 /*   550 */   189,  256,  256,  256,  186,  185,  183,  184,  206,  207,
 /*   560 */   230,  231,  229,  228,  225,  226,  215,  222,  220,  221,
 /*   570 */    84,  208,  116,  256,  256,   30,  233,  112,  256,   23,
 /*   580 */    80,  256,   20,  256,   18,   85,  256,  256,  256,  131,
 /*   590 */    82,  256,  215,  222,  220,  221,   84,  256,  116,  211,
 /*   600 */   256,   30,  102,   14,    8,   23,   80,  256,  256,  256,
 /*   610 */   115,   85,  117,  256,   26,  131,  126,  256,  215,  222,
 /*   620 */   220,  221,   84,  256,  116,  256,  256,   30,  256,  174,
 /*   630 */   176,   23,   80,   98,  141,  256,  256,   85,  256,   98,
 /*   640 */   141,  131,  256,  256,  256,  256,  143,  256,   15,  256,
 /*   650 */   256,   72,  143,  256,   16,  256,  256,   72,   69,   71,
 /*   660 */   256,  190,    2,  256,   69,   71,  256,  190,    2,  256,
 /*   670 */    95,   78,  256,  256,  256,  256,   98,  124,   75,  256,
 /*   680 */   256,  256,  256,  143,   75,   15,  256,  256,   72,  122,
 /*   690 */   256,   15,  256,  256,   72,   69,   71,  256,  190,    2,
 /*   700 */   256,   69,   71,  256,  190,    2,  256,  256,  256,   45,
 /*   710 */    77,  139,   98,  141,  256,   75,  256,  256,  203,  227,
 /*   720 */   256,   75,  256,  200,  189,  143,  256,   16,  256,  256,
 /*   730 */    72,  123,  236,   45,   77,  139,  256,   69,   71,  256,
 /*   740 */   190,  256,  203,  227,   65,   77,  139,  200,  189,  256,
 /*   750 */   256,  256,  256,  203,  227,  256,  237,   75,  200,  189,
 /*   760 */   256,  256,  121,   65,   77,  139,  256,  256,  256,  256,
 /*   770 */   256,  256,  203,  227,  256,  256,  256,  200,  189,  256,
 /*   780 */   256,  125,   57,   77,  139,   53,   77,  139,  256,  256,
 /*   790 */   256,  203,  227,  256,  203,  227,  200,  189,  256,  200,
 /*   800 */   189,  256,   64,   77,  139,   48,   77,  139,  256,  256,
 /*   810 */   256,  203,  227,  256,  203,  227,  200,  189,  256,  200,
 /*   820 */   189,   46,   77,  139,   43,   77,  139,  256,  256,  256,
 /*   830 */   203,  227,  256,  203,  227,  200,  189,  256,  200,  189,
 /*   840 */    47,   77,  139,   49,   77,  139,  256,  256,  256,  203,
 /*   850 */   227,  256,  203,  227,  200,  189,  256,  200,  189,   60,
 /*   860 */    77,  139,  256,  256,  256,  256,  256,  256,  203,  227,
 /*   870 */    58,   77,  139,  200,  189,  256,  256,  256,  256,  203,
 /*   880 */   227,   42,   77,  139,  200,  189,  256,  256,  256,  256,
 /*   890 */   203,  227,   59,   77,  139,  200,  189,  256,  256,  256,
 /*   900 */   256,  203,  227,   52,   77,  139,  200,  189,  256,  256,
 /*   910 */   256,  256,  203,  227,  256,  256,  256,  200,  189,  256,
 /*   920 */    44,   77,  139,   54,   77,  139,  256,  256,  256,  203,
 /*   930 */   227,  256,  203,  227,  200,  189,  256,  200,  189,   61,
 /*   940 */    77,  139,   41,   77,  139,  256,  256,  256,  203,  227,
 /*   950 */   256,  203,  227,  200,  189,  256,  200,  189,   51,   77,
 /*   960 */   118,   50,   77,  139,  256,  256,  256,  203,  227,  256,
 /*   970 */   203,  227,  200,  189,  256,  200,  189,   55,   77,  139,
 /*   980 */    66,   77,  139,  256,  256,  256,  203,  227,  256,  203,
 /*   990 */   227,  200,  189,  256,  200,  189,  256,  256,  256,   56,
 /*  1000 */    76,  139,  256,  256,  256,  256,  256,  256,  203,  227,
 /*  1010 */    35,   77,  139,  200,  189,  256,  256,  256,  256,  203,
 /*  1020 */   227,   63,   77,  139,  200,  189,  256,  256,  256,  256,
 /*  1030 */   203,  227,  104,  256,  256,  200,  189,  256,   62,   77,
 /*  1040 */   139,   34,   77,  139,  256,  256,  256,  203,  227,  256,
 /*  1050 */   203,  227,  200,  189,  211,  200,  189,  102,   14,    8,
 /*  1060 */   256,  256,  256,  256,  256,  115,
    );
    static public $yy_lookahead = array(
 /*     0 */     1,    6,    7,    8,    9,   10,   11,   12,   87,   88,
 /*    10 */    15,   73,   74,   75,   19,   20,   67,   68,   69,   70,
 /*    20 */    25,  100,  101,   24,   29,   26,   72,   78,   79,   80,
 /*    30 */     5,   82,   83,   34,   35,   36,   37,   38,   39,   40,
 /*    40 */    76,    1,   78,   79,   80,   81,   82,   83,   94,   50,
 /*    50 */    51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
 /*    60 */    61,   21,   76,   77,   78,   79,   80,   16,   82,   83,
 /*    70 */    12,   13,   14,   22,   34,   35,   36,   37,   38,   39,
 /*    80 */    40,    1,   78,   79,   80,    5,   82,   83,  110,  111,
 /*    90 */    50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
 /*   100 */    60,   61,   78,   79,   80,   81,   82,   83,    6,    7,
 /*   110 */     8,    9,   10,   32,   34,   35,   36,   37,   38,   39,
 /*   120 */    40,    1,   77,   78,   79,   80,   15,   82,   83,   18,
 /*   130 */    50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
 /*   140 */    60,   61,    5,   97,   98,   99,   15,    5,   28,   18,
 /*   150 */     1,  105,   87,   88,   34,   35,   36,   37,   38,   39,
 /*   160 */    40,   96,   94,   26,   16,  100,  101,   17,   26,   32,
 /*   170 */    50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
 /*   180 */    60,   61,   16,   34,   35,   36,   37,   38,   39,   40,
 /*   190 */     1,    5,   44,   31,    5,   33,   47,   18,   32,   50,
 /*   200 */    51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
 /*   210 */    61,   71,   26,   73,   74,   75,   72,   15,   17,   17,
 /*   220 */    18,   87,   88,   34,   35,   36,   37,   38,   39,   40,
 /*   230 */     1,    2,   30,   32,  100,  101,   31,    5,   94,   50,
 /*   240 */    51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
 /*   250 */    61,   44,   47,   46,   22,   48,  102,  103,   87,   88,
 /*   260 */    87,   88,   18,   34,   35,   36,   37,   38,   39,   40,
 /*   270 */     1,  100,  101,  100,  101,    5,   31,  107,   33,   50,
 /*   280 */    51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
 /*   290 */    61,   72,   26,   49,   28,   72,   26,    3,   87,   88,
 /*   300 */    65,   66,   33,   34,   35,   36,   37,   38,   39,   40,
 /*   310 */     1,  100,  101,   94,   72,   72,   83,   94,   85,   50,
 /*   320 */    51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
 /*   330 */    61,   21,   16,   72,   72,   26,   94,   94,   87,   88,
 /*   340 */    84,   31,  106,   34,   35,   36,   37,   38,   39,   40,
 /*   350 */     1,  100,  101,   89,    5,   94,   94,   93,  106,   50,
 /*   360 */    51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
 /*   370 */    61,    2,   22,   30,   33,   44,   41,   18,   17,   17,
 /*   380 */    23,   26,   16,   34,   35,   36,   37,   38,   39,   40,
 /*   390 */     1,   18,   32,   91,   91,  105,    1,   93,   93,   50,
 /*   400 */    51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
 /*   410 */    61,   91,   91,   91,   26,   92,   27,  111,   91,   90,
 /*   420 */    26,  112,   90,   34,   35,   36,   37,   38,   39,   40,
 /*   430 */     1,  112,  112,  112,  112,  112,  112,  112,  112,   50,
 /*   440 */    51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
 /*   450 */    61,  112,  112,  112,  112,  112,  112,  112,  112,  112,
 /*   460 */   112,  112,   33,   34,   35,   36,   37,   38,   39,   40,
 /*   470 */     1,  112,  112,  112,  112,  112,  112,  112,  112,   50,
 /*   480 */    51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
 /*   490 */    61,  112,  112,    9,  112,  112,  112,  112,  112,   15,
 /*   500 */   112,  112,  112,   34,   35,   36,   37,   38,   39,   40,
 /*   510 */   112,  112,  112,  112,  112,  112,  112,  112,  112,   50,
 /*   520 */    51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
 /*   530 */    61,  112,  112,  112,  112,  112,   87,   88,   34,   35,
 /*   540 */    36,   37,   38,   39,   40,   96,   62,   63,  112,  100,
 /*   550 */   101,  112,  112,  112,   50,   51,   52,   53,   54,   55,
 /*   560 */    56,   57,   58,   59,   60,   61,    6,    7,    8,    9,
 /*   570 */    10,   11,   12,  112,  112,   15,    9,   72,  112,   19,
 /*   580 */    20,  112,   15,  112,   16,   25,  112,  112,  112,   29,
 /*   590 */     4,  112,    6,    7,    8,    9,   10,  112,   12,   94,
 /*   600 */   112,   15,   97,   98,   99,   19,   20,  112,  112,  112,
 /*   610 */   105,   25,   44,  112,   46,   29,   48,  112,    6,    7,
 /*   620 */     8,    9,   10,  112,   12,  112,  112,   15,  112,   62,
 /*   630 */    63,   19,   20,   17,   18,  112,  112,   25,  112,   17,
 /*   640 */    18,   29,  112,  112,  112,  112,   30,  112,   32,  112,
 /*   650 */   112,   35,   30,  112,   32,  112,  112,   35,   42,   43,
 /*   660 */   112,   45,   46,  112,   42,   43,  112,   45,   46,  112,
 /*   670 */    17,   18,  112,  112,  112,  112,   17,   18,   62,  112,
 /*   680 */   112,  112,  112,   30,   62,   32,  112,  112,   35,   30,
 /*   690 */   112,   32,  112,  112,   35,   42,   43,  112,   45,   46,
 /*   700 */   112,   42,   43,  112,   45,   46,  112,  112,  112,   86,
 /*   710 */    87,   88,   17,   18,  112,   62,  112,  112,   95,   96,
 /*   720 */   112,   62,  112,  100,  101,   30,  112,   32,  112,  112,
 /*   730 */    35,  108,  109,   86,   87,   88,  112,   42,   43,  112,
 /*   740 */    45,  112,   95,   96,   86,   87,   88,  100,  101,  112,
 /*   750 */   112,  112,  112,   95,   96,  112,  109,   62,  100,  101,
 /*   760 */   112,  112,  104,   86,   87,   88,  112,  112,  112,  112,
 /*   770 */   112,  112,   95,   96,  112,  112,  112,  100,  101,  112,
 /*   780 */   112,  104,   86,   87,   88,   86,   87,   88,  112,  112,
 /*   790 */   112,   95,   96,  112,   95,   96,  100,  101,  112,  100,
 /*   800 */   101,  112,   86,   87,   88,   86,   87,   88,  112,  112,
 /*   810 */   112,   95,   96,  112,   95,   96,  100,  101,  112,  100,
 /*   820 */   101,   86,   87,   88,   86,   87,   88,  112,  112,  112,
 /*   830 */    95,   96,  112,   95,   96,  100,  101,  112,  100,  101,
 /*   840 */    86,   87,   88,   86,   87,   88,  112,  112,  112,   95,
 /*   850 */    96,  112,   95,   96,  100,  101,  112,  100,  101,   86,
 /*   860 */    87,   88,  112,  112,  112,  112,  112,  112,   95,   96,
 /*   870 */    86,   87,   88,  100,  101,  112,  112,  112,  112,   95,
 /*   880 */    96,   86,   87,   88,  100,  101,  112,  112,  112,  112,
 /*   890 */    95,   96,   86,   87,   88,  100,  101,  112,  112,  112,
 /*   900 */   112,   95,   96,   86,   87,   88,  100,  101,  112,  112,
 /*   910 */   112,  112,   95,   96,  112,  112,  112,  100,  101,  112,
 /*   920 */    86,   87,   88,   86,   87,   88,  112,  112,  112,   95,
 /*   930 */    96,  112,   95,   96,  100,  101,  112,  100,  101,   86,
 /*   940 */    87,   88,   86,   87,   88,  112,  112,  112,   95,   96,
 /*   950 */   112,   95,   96,  100,  101,  112,  100,  101,   86,   87,
 /*   960 */    88,   86,   87,   88,  112,  112,  112,   95,   96,  112,
 /*   970 */    95,   96,  100,  101,  112,  100,  101,   86,   87,   88,
 /*   980 */    86,   87,   88,  112,  112,  112,   95,   96,  112,   95,
 /*   990 */    96,  100,  101,  112,  100,  101,  112,  112,  112,   86,
 /*  1000 */    87,   88,  112,  112,  112,  112,  112,  112,   95,   96,
 /*  1010 */    86,   87,   88,  100,  101,  112,  112,  112,  112,   95,
 /*  1020 */    96,   86,   87,   88,  100,  101,  112,  112,  112,  112,
 /*  1030 */    95,   96,   72,  112,  112,  100,  101,  112,   86,   87,
 /*  1040 */    88,   86,   87,   88,  112,  112,  112,   95,   96,  112,
 /*  1050 */    95,   96,  100,  101,   94,  100,  101,   97,   98,   99,
 /*  1060 */   112,  112,  112,  112,  112,  105,
);
    const YY_SHIFT_USE_DFLT = -6;
    const YY_SHIFT_MAX = 150;
    static public $yy_shift_ofst = array(
 /*     0 */   294,  586,  616,  616,  616,  616,   -5,  560,  616,  616,
 /*    10 */   616,  616,  659,  616,  616,  616,  616,  616,  616,  616,
 /*    20 */   616,  616,  616,  616,  616,  616,  616,  616,  659,  616,
 /*    30 */   653,  616,  616,  616,   -1,  309,   -5,  560,  612,  622,
 /*    40 */   622,  389,  429,   80,  349,  120,  269,  229,   40,  189,
 /*    50 */   149,  469,  469,  469,  469,  469,  469,  469,  469,  469,
 /*    60 */   469,  469,  469,  469,  469,  469,  504,  695,  695,  695,
 /*    70 */   695,  695,  695,  102,  102,  484,  568,  207,  137,   58,
 /*    80 */   201,  266,  355,  355,  355,  388,  355,  355,  567,  142,
 /*    90 */   111,  111,  186,  111,   51,  131,  111,  111,  111,  270,
 /*   100 */   201,  201,  395,  355,  355,  355,  355,  394,  355,  394,
 /*   110 */   369,  355,  355,  369,   -6,   -6,   -6,  202,  232,  244,
 /*   120 */   310,  162,  148,  205,  166,  245,  179,   81,  150,   25,
 /*   130 */   316,  373,  350,  350,  350,  350,  350,  350,  366,  350,
 /*   140 */   350,  360,  357,  331,  341,  343,  335,  359,  362,  361,
 /*   150 */   350,
);
    const YY_REDUCE_USE_DFLT = -80;
    const YY_REDUCE_MAX = 116;
    static public $yy_reduce_ofst = array(
 /*     0 */   235,  -51,  623,  647,  658,  677,  -14,  -36,  817,  834,
 /*    10 */   837,  872,  856,  853,  806,  795,  735,  719,  716,  699,
 /*    20 */   738,  754,  784,  891,  773,  757,  875,  955,  935,  894,
 /*    30 */   913,  696,  924,  952,  960,  505,   45,   24,    4,  449,
 /*    40 */    65,   46,   46,   46,   46,   46,   46,   46,   46,   46,
 /*    50 */    46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
 /*    60 */    46,   46,   46,   46,   46,   46,   46,  173,  251,  -79,
 /*    70 */   211,  171,  134,  140,  -62,  -22,  154,  154,  144,  233,
 /*    80 */   264,  223,  242,  -46,  219,  261,  243,  262,  306,   68,
 /*    90 */   321,  322,   68,  327,  323,  302,  320,  303,  302,   68,
 /*   100 */   304,  305,  290,   68,   68,   68,   68,  329,   68,  332,
 /*   110 */   170,   68,   68,  170,  252,  236,  256,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(3, ),
        /* 1 */ array(4, 6, 7, 8, 9, 10, 12, 15, 19, 20, 25, 29, ),
        /* 2 */ array(17, 18, 30, 32, 35, 42, 43, 45, 46, 62, ),
        /* 3 */ array(17, 18, 30, 32, 35, 42, 43, 45, 46, 62, ),
        /* 4 */ array(17, 18, 30, 32, 35, 42, 43, 45, 46, 62, ),
        /* 5 */ array(17, 18, 30, 32, 35, 42, 43, 45, 46, 62, ),
        /* 6 */ array(6, 7, 8, 9, 10, 11, 12, 15, 19, 20, 25, 29, ),
        /* 7 */ array(6, 7, 8, 9, 10, 11, 12, 15, 19, 20, 25, 29, ),
        /* 8 */ array(17, 18, 30, 32, 35, 42, 43, 45, 46, 62, ),
        /* 9 */ array(17, 18, 30, 32, 35, 42, 43, 45, 46, 62, ),
        /* 10 */ array(17, 18, 30, 32, 35, 42, 43, 45, 46, 62, ),
        /* 11 */ array(17, 18, 30, 32, 35, 42, 43, 45, 46, 62, ),
        /* 12 */ array(17, 18, 30, 32, 35, 42, 43, 45, 46, 62, ),
        /* 13 */ array(17, 18, 30, 32, 35, 42, 43, 45, 46, 62, ),
        /* 14 */ array(17, 18, 30, 32, 35, 42, 43, 45, 46, 62, ),
        /* 15 */ array(17, 18, 30, 32, 35, 42, 43, 45, 46, 62, ),
        /* 16 */ array(17, 18, 30, 32, 35, 42, 43, 45, 46, 62, ),
        /* 17 */ array(17, 18, 30, 32, 35, 42, 43, 45, 46, 62, ),
        /* 18 */ array(17, 18, 30, 32, 35, 42, 43, 45, 46, 62, ),
        /* 19 */ array(17, 18, 30, 32, 35, 42, 43, 45, 46, 62, ),
        /* 20 */ array(17, 18, 30, 32, 35, 42, 43, 45, 46, 62, ),
        /* 21 */ array(17, 18, 30, 32, 35, 42, 43, 45, 46, 62, ),
        /* 22 */ array(17, 18, 30, 32, 35, 42, 43, 45, 46, 62, ),
        /* 23 */ array(17, 18, 30, 32, 35, 42, 43, 45, 46, 62, ),
        /* 24 */ array(17, 18, 30, 32, 35, 42, 43, 45, 46, 62, ),
        /* 25 */ array(17, 18, 30, 32, 35, 42, 43, 45, 46, 62, ),
        /* 26 */ array(17, 18, 30, 32, 35, 42, 43, 45, 46, 62, ),
        /* 27 */ array(17, 18, 30, 32, 35, 42, 43, 45, 46, 62, ),
        /* 28 */ array(17, 18, 30, 32, 35, 42, 43, 45, 46, 62, ),
        /* 29 */ array(17, 18, 30, 32, 35, 42, 43, 45, 46, 62, ),
        /* 30 */ array(17, 18, 30, 32, 35, 42, 43, 45, 46, 62, ),
        /* 31 */ array(17, 18, 30, 32, 35, 42, 43, 45, 46, 62, ),
        /* 32 */ array(17, 18, 30, 32, 35, 42, 43, 45, 46, 62, ),
        /* 33 */ array(17, 18, 30, 32, 35, 42, 43, 45, 46, 62, ),
        /* 34 */ array(1, 24, 26, 34, 35, 36, 37, 38, 39, 40, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, ),
        /* 35 */ array(1, 26, 34, 35, 36, 37, 38, 39, 40, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, ),
        /* 36 */ array(6, 7, 8, 9, 10, 11, 12, 15, 19, 20, 25, 29, ),
        /* 37 */ array(6, 7, 8, 9, 10, 11, 12, 15, 19, 20, 25, 29, ),
        /* 38 */ array(6, 7, 8, 9, 10, 12, 15, 19, 20, 25, 29, ),
        /* 39 */ array(17, 18, 30, 32, 35, 42, 43, 45, 46, 62, ),
        /* 40 */ array(17, 18, 30, 32, 35, 42, 43, 45, 46, 62, ),
        /* 41 */ array(1, 27, 34, 35, 36, 37, 38, 39, 40, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, ),
        /* 42 */ array(1, 33, 34, 35, 36, 37, 38, 39, 40, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, ),
        /* 43 */ array(1, 5, 34, 35, 36, 37, 38, 39, 40, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, ),
        /* 44 */ array(1, 5, 34, 35, 36, 37, 38, 39, 40, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, ),
        /* 45 */ array(1, 28, 34, 35, 36, 37, 38, 39, 40, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, ),
        /* 46 */ array(1, 33, 34, 35, 36, 37, 38, 39, 40, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, ),
        /* 47 */ array(1, 2, 34, 35, 36, 37, 38, 39, 40, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, ),
        /* 48 */ array(1, 21, 34, 35, 36, 37, 38, 39, 40, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, ),
        /* 49 */ array(1, 5, 34, 35, 36, 37, 38, 39, 40, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, ),
        /* 50 */ array(1, 34, 35, 36, 37, 38, 39, 40, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, ),
        /* 51 */ array(1, 34, 35, 36, 37, 38, 39, 40, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, ),
        /* 52 */ array(1, 34, 35, 36, 37, 38, 39, 40, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, ),
        /* 53 */ array(1, 34, 35, 36, 37, 38, 39, 40, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, ),
        /* 54 */ array(1, 34, 35, 36, 37, 38, 39, 40, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, ),
        /* 55 */ array(1, 34, 35, 36, 37, 38, 39, 40, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, ),
        /* 56 */ array(1, 34, 35, 36, 37, 38, 39, 40, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, ),
        /* 57 */ array(1, 34, 35, 36, 37, 38, 39, 40, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, ),
        /* 58 */ array(1, 34, 35, 36, 37, 38, 39, 40, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, ),
        /* 59 */ array(1, 34, 35, 36, 37, 38, 39, 40, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, ),
        /* 60 */ array(1, 34, 35, 36, 37, 38, 39, 40, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, ),
        /* 61 */ array(1, 34, 35, 36, 37, 38, 39, 40, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, ),
        /* 62 */ array(1, 34, 35, 36, 37, 38, 39, 40, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, ),
        /* 63 */ array(1, 34, 35, 36, 37, 38, 39, 40, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, ),
        /* 64 */ array(1, 34, 35, 36, 37, 38, 39, 40, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, ),
        /* 65 */ array(1, 34, 35, 36, 37, 38, 39, 40, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, ),
        /* 66 */ array(34, 35, 36, 37, 38, 39, 40, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, ),
        /* 67 */ array(17, 18, 30, 32, 35, 42, 43, 45, 62, ),
        /* 68 */ array(17, 18, 30, 32, 35, 42, 43, 45, 62, ),
        /* 69 */ array(17, 18, 30, 32, 35, 42, 43, 45, 62, ),
        /* 70 */ array(17, 18, 30, 32, 35, 42, 43, 45, 62, ),
        /* 71 */ array(17, 18, 30, 32, 35, 42, 43, 45, 62, ),
        /* 72 */ array(17, 18, 30, 32, 35, 42, 43, 45, 62, ),
        /* 73 */ array(6, 7, 8, 9, 10, ),
        /* 74 */ array(6, 7, 8, 9, 10, ),
        /* 75 */ array(9, 15, 62, 63, ),
        /* 76 */ array(16, 44, 46, 48, ),
        /* 77 */ array(44, 46, 48, ),
        /* 78 */ array(5, 26, 32, ),
        /* 79 */ array(12, 13, 14, ),
        /* 80 */ array(17, 32, ),
        /* 81 */ array(26, 28, ),
        /* 82 */ array(26, ),
        /* 83 */ array(26, ),
        /* 84 */ array(26, ),
        /* 85 */ array(26, ),
        /* 86 */ array(26, ),
        /* 87 */ array(26, ),
        /* 88 */ array(9, 15, 62, 63, ),
        /* 89 */ array(5, 26, ),
        /* 90 */ array(15, 18, ),
        /* 91 */ array(15, 18, ),
        /* 92 */ array(5, 26, ),
        /* 93 */ array(15, 18, ),
        /* 94 */ array(16, 22, ),
        /* 95 */ array(15, 18, ),
        /* 96 */ array(15, 18, ),
        /* 97 */ array(15, 18, ),
        /* 98 */ array(15, 18, ),
        /* 99 */ array(5, 26, ),
        /* 100 */ array(17, 32, ),
        /* 101 */ array(17, 32, ),
        /* 102 */ array(1, ),
        /* 103 */ array(26, ),
        /* 104 */ array(26, ),
        /* 105 */ array(26, ),
        /* 106 */ array(26, ),
        /* 107 */ array(26, ),
        /* 108 */ array(26, ),
        /* 109 */ array(26, ),
        /* 110 */ array(2, ),
        /* 111 */ array(26, ),
        /* 112 */ array(26, ),
        /* 113 */ array(2, ),
        /* 114 */ array(),
        /* 115 */ array(),
        /* 116 */ array(),
        /* 117 */ array(15, 17, 18, 30, ),
        /* 118 */ array(5, 22, ),
        /* 119 */ array(18, 49, ),
        /* 120 */ array(21, 31, ),
        /* 121 */ array(31, 33, ),
        /* 122 */ array(16, 44, ),
        /* 123 */ array(31, 47, ),
        /* 124 */ array(16, 32, ),
        /* 125 */ array(31, 33, ),
        /* 126 */ array(18, ),
        /* 127 */ array(32, ),
        /* 128 */ array(17, ),
        /* 129 */ array(5, ),
        /* 130 */ array(16, ),
        /* 131 */ array(18, ),
        /* 132 */ array(22, ),
        /* 133 */ array(22, ),
        /* 134 */ array(22, ),
        /* 135 */ array(22, ),
        /* 136 */ array(22, ),
        /* 137 */ array(22, ),
        /* 138 */ array(16, ),
        /* 139 */ array(22, ),
        /* 140 */ array(22, ),
        /* 141 */ array(32, ),
        /* 142 */ array(23, ),
        /* 143 */ array(44, ),
        /* 144 */ array(33, ),
        /* 145 */ array(30, ),
        /* 146 */ array(41, ),
        /* 147 */ array(18, ),
        /* 148 */ array(17, ),
        /* 149 */ array(17, ),
        /* 150 */ array(22, ),
        /* 151 */ array(),
        /* 152 */ array(),
        /* 153 */ array(),
        /* 154 */ array(),
        /* 155 */ array(),
        /* 156 */ array(),
        /* 157 */ array(),
        /* 158 */ array(),
        /* 159 */ array(),
        /* 160 */ array(),
        /* 161 */ array(),
        /* 162 */ array(),
        /* 163 */ array(),
        /* 164 */ array(),
        /* 165 */ array(),
        /* 166 */ array(),
        /* 167 */ array(),
        /* 168 */ array(),
        /* 169 */ array(),
        /* 170 */ array(),
        /* 171 */ array(),
        /* 172 */ array(),
        /* 173 */ array(),
        /* 174 */ array(),
        /* 175 */ array(),
        /* 176 */ array(),
        /* 177 */ array(),
        /* 178 */ array(),
        /* 179 */ array(),
        /* 180 */ array(),
        /* 181 */ array(),
        /* 182 */ array(),
        /* 183 */ array(),
        /* 184 */ array(),
        /* 185 */ array(),
        /* 186 */ array(),
        /* 187 */ array(),
        /* 188 */ array(),
        /* 189 */ array(),
        /* 190 */ array(),
        /* 191 */ array(),
        /* 192 */ array(),
        /* 193 */ array(),
        /* 194 */ array(),
        /* 195 */ array(),
        /* 196 */ array(),
        /* 197 */ array(),
        /* 198 */ array(),
        /* 199 */ array(),
        /* 200 */ array(),
        /* 201 */ array(),
        /* 202 */ array(),
        /* 203 */ array(),
        /* 204 */ array(),
        /* 205 */ array(),
        /* 206 */ array(),
        /* 207 */ array(),
        /* 208 */ array(),
        /* 209 */ array(),
        /* 210 */ array(),
        /* 211 */ array(),
        /* 212 */ array(),
        /* 213 */ array(),
        /* 214 */ array(),
        /* 215 */ array(),
        /* 216 */ array(),
        /* 217 */ array(),
        /* 218 */ array(),
        /* 219 */ array(),
        /* 220 */ array(),
        /* 221 */ array(),
        /* 222 */ array(),
        /* 223 */ array(),
        /* 224 */ array(),
        /* 225 */ array(),
        /* 226 */ array(),
        /* 227 */ array(),
        /* 228 */ array(),
        /* 229 */ array(),
        /* 230 */ array(),
        /* 231 */ array(),
        /* 232 */ array(),
        /* 233 */ array(),
        /* 234 */ array(),
        /* 235 */ array(),
        /* 236 */ array(),
        /* 237 */ array(),
        /* 238 */ array(),
        /* 239 */ array(),
        /* 240 */ array(),
);
    static public $yy_default = array(
 /*     0 */   243,  267,  371,  383,  347,  347,  383,  383,  383,  383,
 /*    10 */   383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
 /*    20 */   383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
 /*    30 */   383,  383,  383,  383,  295,  295,  383,  383,  244,  383,
 /*    40 */   383,  300,  383,  383,  383,  373,  383,  383,  383,  383,
 /*    50 */   383,  283,  315,  287,  316,  285,  280,  298,  345,  312,
 /*    60 */   303,  299,  372,  300,  281,  346,  319,  383,  383,  383,
 /*    70 */   383,  383,  383,  383,  246,  383,  320,  320,  327,  383,
 /*    80 */   383,  295,  295,  295,  295,  295,  295,  295,  383,  383,
 /*    90 */   383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
 /*   100 */   383,  383,  311,  284,  289,  291,  292,  382,  293,  382,
 /*   110 */   349,  286,  290,  348,  353,  353,  277,  383,  305,  383,
 /*   120 */   383,  383,  325,  383,  327,  383,  383,  342,  383,  383,
 /*   130 */   340,  383,  323,  322,  307,  354,  314,  308,  383,  305,
 /*   140 */   309,  327,  301,  325,  383,  383,  329,  383,  383,  383,
 /*   150 */   321,  256,  265,  242,  247,  248,  258,  257,  255,  253,
 /*   160 */   381,  261,  294,  302,  304,  288,  266,  251,  252,  250,
 /*   170 */   249,  245,  254,  344,  375,  376,  378,  374,  313,  332,
 /*   180 */   355,  317,  318,  358,  359,  357,  356,  350,  351,  331,
 /*   190 */   330,  263,  296,  324,  262,  260,  241,  259,  333,  334,
 /*   200 */   328,  352,  326,  306,  335,  340,  360,  361,  264,  268,
 /*   210 */   269,  297,  343,  338,  339,  270,  271,  276,  278,  275,
 /*   220 */   274,  272,  273,  337,  336,  366,  367,  310,  365,  364,
 /*   230 */   362,  363,  379,  380,  329,  341,  370,  369,  377,  368,
 /*   240 */   279,
);
    const YYNOCODE = 113;
    const YYSTACKDEPTH = 500;
    const YYNSTATE = 241;
    const YYNRULE = 142;
    const YYERRORSYMBOL = 64;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    public static $yyFallback = array(
    );

    public $yyidx;                    /* Index of top element in stack */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    public $yystack = array();  /* The parser's stack */

    public $yyTokenName = array(
  '$',             'VERT',          'COLON',         'SETSTRICT',   
  'LDELEXTENDS',   'RDEL',          'COMMENT',       'STRIPON',     
  'STRIPOFF',      'TEXT',          'LDELBLOCK',     'CLOSEBLOCK',  
  'LITERALSTART',  'LITERALEND',    'LITERAL',       'LDEL',        
  'EQUAL',         'DOLLAR',        'ID',            'LDELIF',      
  'LDELFOR',       'SEMICOLON',     'INCDEC',        'TO',          
  'STEP',          'LDELFOREACH',   'SPACE',         'AS',          
  'APTR',          'LDELSLASH',     'INTEGER',       'COMMA',       
  'OPENP',         'CLOSEP',        'MATH',          'UNIMATH',     
  'ANDSYM',        'ISIN',          'ISDIVBY',       'ISEVEN',      
  'ISODD',         'QMARK',         'NOT',           'TYPECAST',    
  'DOT',           'SINGLEQUOTESTRING',  'OPENB',         'CLOSEB',      
  'PTR',           'AT',            'EQUALS',        'NOTEQUALS',   
  'GREATERTHAN',   'LESSTHAN',      'GREATEREQUAL',  'LESSEQUAL',   
  'IDENTITY',      'NONEIDENTITY',  'MOD',           'LAND',        
  'LOR',           'LXOR',          'QUOTE',         'DOLLARID',    
  'error',         'start',         'strictmode',    'generic_template',
  'template',      'extended_template',  'extended_template_header',  'extended_template_body',
  'attributes',    'extended_template_body_element',  'extended_template_block',  'nonterminal_template_block_head',
  'template_block_content',  'nonterminal_template_block_close',  'template_element',  'template_block',
  'terminal_template_block_head',  'terminal_template_block_close',  'smartytag',     'literal',     
  'literal_elements',  'literal_element',  'expr',          'variable',    
  'value',         'statements',    'optspace',      'varvar',      
  'foraction',     'statement',     'attribute',     'ternary',     
  'array',         'modifierlist',  'ifcond',        'lop',         
  'function',      'doublequoted_with_quotes',  'indexdef',      'objectelement',
  'params',        'modifier',      'modparameters',  'modparameter',
  'arrayelements',  'arrayelement',  'doublequoted',  'doublequotedcontent',
    );

    public static $yyRuleName = array(
 /*   0 */ "start ::= strictmode generic_template",
 /*   1 */ "strictmode ::= SETSTRICT",
 /*   2 */ "strictmode ::=",
 /*   3 */ "generic_template ::= template",
 /*   4 */ "generic_template ::= extended_template",
 /*   5 */ "extended_template ::= extended_template_header extended_template_body",
 /*   6 */ "extended_template_header ::= LDELEXTENDS attributes RDEL",
 /*   7 */ "extended_template_body ::= extended_template_body_element",
 /*   8 */ "extended_template_body ::= extended_template_body extended_template_body_element",
 /*   9 */ "extended_template_body_element ::= COMMENT",
 /*  10 */ "extended_template_body_element ::= STRIPON",
 /*  11 */ "extended_template_body_element ::= STRIPOFF",
 /*  12 */ "extended_template_body_element ::= extended_template_block",
 /*  13 */ "extended_template_body_element ::= TEXT",
 /*  14 */ "extended_template_block ::= nonterminal_template_block_head template_block_content nonterminal_template_block_close",
 /*  15 */ "extended_template_block ::= nonterminal_template_block_head nonterminal_template_block_close",
 /*  16 */ "nonterminal_template_block_head ::= LDELBLOCK attributes RDEL",
 /*  17 */ "nonterminal_template_block_close ::= CLOSEBLOCK",
 /*  18 */ "template_block_content ::= template_element",
 /*  19 */ "template_block_content ::= template_block_content template_element",
 /*  20 */ "template_block ::= terminal_template_block_head terminal_template_block_close",
 /*  21 */ "template_block ::= terminal_template_block_head template_block_content terminal_template_block_close",
 /*  22 */ "terminal_template_block_head ::= LDELBLOCK attributes RDEL",
 /*  23 */ "terminal_template_block_close ::= CLOSEBLOCK",
 /*  24 */ "template ::= template_element",
 /*  25 */ "template ::= template template_element",
 /*  26 */ "template ::=",
 /*  27 */ "template_element ::= smartytag RDEL",
 /*  28 */ "template_element ::= template_block",
 /*  29 */ "template_element ::= COMMENT",
 /*  30 */ "template_element ::= literal",
 /*  31 */ "template_element ::= TEXT",
 /*  32 */ "template_element ::= STRIPON",
 /*  33 */ "template_element ::= STRIPOFF",
 /*  34 */ "literal ::= LITERALSTART literal_elements LITERALEND",
 /*  35 */ "literal_elements ::= literal_elements literal_element",
 /*  36 */ "literal_elements ::=",
 /*  37 */ "literal_element ::= literal",
 /*  38 */ "literal_element ::= LITERAL",
 /*  39 */ "smartytag ::= LDEL expr",
 /*  40 */ "smartytag ::= LDEL variable EQUAL expr",
 /*  41 */ "smartytag ::= LDEL DOLLAR ID EQUAL value",
 /*  42 */ "smartytag ::= LDEL DOLLAR ID EQUAL expr",
 /*  43 */ "smartytag ::= LDEL ID attributes",
 /*  44 */ "smartytag ::= LDELIF expr",
 /*  45 */ "smartytag ::= LDELFOR statements SEMICOLON optspace expr SEMICOLON optspace DOLLAR varvar foraction attributes",
 /*  46 */ "foraction ::= EQUAL expr",
 /*  47 */ "foraction ::= INCDEC",
 /*  48 */ "smartytag ::= LDELFOR statement TO expr attributes",
 /*  49 */ "smartytag ::= LDELFOR statement TO expr STEP expr attributes",
 /*  50 */ "smartytag ::= LDELFOREACH attributes",
 /*  51 */ "smartytag ::= LDELFOREACH SPACE expr AS DOLLAR varvar attributes",
 /*  52 */ "smartytag ::= LDELFOREACH SPACE expr AS DOLLAR varvar APTR DOLLAR varvar attributes",
 /*  53 */ "smartytag ::= LDELSLASH ID",
 /*  54 */ "attributes ::=",
 /*  55 */ "attributes ::= attributes attribute",
 /*  56 */ "attributes ::= attribute",
 /*  57 */ "attribute ::= SPACE ID EQUAL expr",
 /*  58 */ "attribute ::= SPACE INTEGER EQUAL expr",
 /*  59 */ "attribute ::= SPACE expr",
 /*  60 */ "statements ::= statement",
 /*  61 */ "statements ::= statements COMMA statement",
 /*  62 */ "statement ::= DOLLAR varvar EQUAL expr",
 /*  63 */ "statement ::= OPENP statement CLOSEP",
 /*  64 */ "expr ::= value",
 /*  65 */ "expr ::= ternary",
 /*  66 */ "expr ::= expr MATH value",
 /*  67 */ "expr ::= expr UNIMATH value",
 /*  68 */ "expr ::= expr ANDSYM value",
 /*  69 */ "expr ::= array",
 /*  70 */ "expr ::= expr modifierlist",
 /*  71 */ "expr ::= expr ifcond expr",
 /*  72 */ "expr ::= expr ISIN array",
 /*  73 */ "expr ::= expr ISIN value",
 /*  74 */ "expr ::= expr lop expr",
 /*  75 */ "expr ::= expr ISDIVBY expr",
 /*  76 */ "expr ::= expr ISEVEN",
 /*  77 */ "expr ::= expr ISODD",
 /*  78 */ "ternary ::= OPENP expr CLOSEP QMARK expr COLON expr",
 /*  79 */ "value ::= variable",
 /*  80 */ "value ::= UNIMATH value",
 /*  81 */ "value ::= NOT value",
 /*  82 */ "value ::= TYPECAST value",
 /*  83 */ "value ::= value INCDEC",
 /*  84 */ "value ::= INTEGER",
 /*  85 */ "value ::= INTEGER DOT INTEGER",
 /*  86 */ "value ::= ID",
 /*  87 */ "value ::= function",
 /*  88 */ "value ::= OPENP expr CLOSEP",
 /*  89 */ "value ::= SINGLEQUOTESTRING",
 /*  90 */ "value ::= doublequoted_with_quotes",
 /*  91 */ "variable ::= DOLLAR varvar",
 /*  92 */ "variable ::= variable indexdef",
 /*  93 */ "variable ::= variable objectelement",
 /*  94 */ "indexdef ::= DOT DOLLAR varvar",
 /*  95 */ "indexdef ::= DOT ID",
 /*  96 */ "indexdef ::= DOT INTEGER",
 /*  97 */ "indexdef ::= DOT LDEL expr RDEL",
 /*  98 */ "indexdef ::= OPENB expr CLOSEB",
 /*  99 */ "varvar ::= ID",
 /* 100 */ "varvar ::= LDEL expr RDEL",
 /* 101 */ "objectelement ::= PTR ID",
 /* 102 */ "objectelement ::= PTR ID OPENP params CLOSEP",
 /* 103 */ "function ::= ID OPENP params CLOSEP",
 /* 104 */ "params ::= params COMMA expr",
 /* 105 */ "params ::= expr",
 /* 106 */ "params ::=",
 /* 107 */ "modifierlist ::= modifierlist modifier modparameters",
 /* 108 */ "modifierlist ::= modifier modparameters",
 /* 109 */ "modifier ::= VERT AT ID",
 /* 110 */ "modifier ::= VERT ID",
 /* 111 */ "modparameters ::= modparameters modparameter",
 /* 112 */ "modparameters ::=",
 /* 113 */ "modparameter ::= COLON value",
 /* 114 */ "modparameter ::= COLON array",
 /* 115 */ "ifcond ::= EQUALS",
 /* 116 */ "ifcond ::= NOTEQUALS",
 /* 117 */ "ifcond ::= GREATERTHAN",
 /* 118 */ "ifcond ::= LESSTHAN",
 /* 119 */ "ifcond ::= GREATEREQUAL",
 /* 120 */ "ifcond ::= LESSEQUAL",
 /* 121 */ "ifcond ::= IDENTITY",
 /* 122 */ "ifcond ::= NONEIDENTITY",
 /* 123 */ "ifcond ::= MOD",
 /* 124 */ "lop ::= LAND",
 /* 125 */ "lop ::= LOR",
 /* 126 */ "lop ::= LXOR",
 /* 127 */ "array ::= OPENB arrayelements CLOSEB",
 /* 128 */ "arrayelements ::= arrayelements COMMA arrayelement",
 /* 129 */ "arrayelements ::= arrayelement",
 /* 130 */ "arrayelements ::=",
 /* 131 */ "arrayelement ::= expr APTR expr",
 /* 132 */ "arrayelement ::= expr",
 /* 133 */ "doublequoted_with_quotes ::= QUOTE QUOTE",
 /* 134 */ "doublequoted_with_quotes ::= QUOTE doublequoted QUOTE",
 /* 135 */ "doublequoted ::= doublequoted doublequotedcontent",
 /* 136 */ "doublequoted ::= doublequotedcontent",
 /* 137 */ "doublequotedcontent ::= DOLLARID",
 /* 138 */ "doublequotedcontent ::= LDEL expr RDEL",
 /* 139 */ "doublequotedcontent ::= TEXT",
 /* 140 */ "optspace ::= SPACE",
 /* 141 */ "optspace ::=",
    );

    public function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count($this->yyTokenName)) {
            return $this->yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    public static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    public function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;

        return $yymajor;
    }

    public function __destruct()
    {
        while ($this->yystack !== Array()) {
            $this->yy_pop_parser_stack();
        }
    }

    public function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                $expected = array_merge($expected, self::$yyExpectedTokens[$nextstate]);
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;

                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new TP_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
    $this->yyidx = $yyidx;
    $this->yystack = $stack;

        return array_unique($expected);
    }

    public function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;

                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new TP_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token && $token !== '0') {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;

        return true;
    }

   public function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;

        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {

                return $this->yy_find_shift_action($iFallback);
            }

            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    public function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    public function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
#line 126 "Parser.y"

    $this->internalError = true;
    $this->compiler->trigger_template_error("Stack overflow in template parser");
#line 1147 "Parser.php"

            return;
        }
        $yytos = new TP_yyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
    }

    public static $yyRuleInfo = array(
  array( 'lhs' => 65, 'rhs' => 2 ),
  array( 'lhs' => 66, 'rhs' => 1 ),
  array( 'lhs' => 66, 'rhs' => 0 ),
  array( 'lhs' => 67, 'rhs' => 1 ),
  array( 'lhs' => 67, 'rhs' => 1 ),
  array( 'lhs' => 69, 'rhs' => 2 ),
  array( 'lhs' => 70, 'rhs' => 3 ),
  array( 'lhs' => 71, 'rhs' => 1 ),
  array( 'lhs' => 71, 'rhs' => 2 ),
  array( 'lhs' => 73, 'rhs' => 1 ),
  array( 'lhs' => 73, 'rhs' => 1 ),
  array( 'lhs' => 73, 'rhs' => 1 ),
  array( 'lhs' => 73, 'rhs' => 1 ),
  array( 'lhs' => 73, 'rhs' => 1 ),
  array( 'lhs' => 74, 'rhs' => 3 ),
  array( 'lhs' => 74, 'rhs' => 2 ),
  array( 'lhs' => 75, 'rhs' => 3 ),
  array( 'lhs' => 77, 'rhs' => 1 ),
  array( 'lhs' => 76, 'rhs' => 1 ),
  array( 'lhs' => 76, 'rhs' => 2 ),
  array( 'lhs' => 79, 'rhs' => 2 ),
  array( 'lhs' => 79, 'rhs' => 3 ),
  array( 'lhs' => 80, 'rhs' => 3 ),
  array( 'lhs' => 81, 'rhs' => 1 ),
  array( 'lhs' => 68, 'rhs' => 1 ),
  array( 'lhs' => 68, 'rhs' => 2 ),
  array( 'lhs' => 68, 'rhs' => 0 ),
  array( 'lhs' => 78, 'rhs' => 2 ),
  array( 'lhs' => 78, 'rhs' => 1 ),
  array( 'lhs' => 78, 'rhs' => 1 ),
  array( 'lhs' => 78, 'rhs' => 1 ),
  array( 'lhs' => 78, 'rhs' => 1 ),
  array( 'lhs' => 78, 'rhs' => 1 ),
  array( 'lhs' => 78, 'rhs' => 1 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 84, 'rhs' => 2 ),
  array( 'lhs' => 84, 'rhs' => 0 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 82, 'rhs' => 2 ),
  array( 'lhs' => 82, 'rhs' => 4 ),
  array( 'lhs' => 82, 'rhs' => 5 ),
  array( 'lhs' => 82, 'rhs' => 5 ),
  array( 'lhs' => 82, 'rhs' => 3 ),
  array( 'lhs' => 82, 'rhs' => 2 ),
  array( 'lhs' => 82, 'rhs' => 11 ),
  array( 'lhs' => 92, 'rhs' => 2 ),
  array( 'lhs' => 92, 'rhs' => 1 ),
  array( 'lhs' => 82, 'rhs' => 5 ),
  array( 'lhs' => 82, 'rhs' => 7 ),
  array( 'lhs' => 82, 'rhs' => 2 ),
  array( 'lhs' => 82, 'rhs' => 7 ),
  array( 'lhs' => 82, 'rhs' => 10 ),
  array( 'lhs' => 82, 'rhs' => 2 ),
  array( 'lhs' => 72, 'rhs' => 0 ),
  array( 'lhs' => 72, 'rhs' => 2 ),
  array( 'lhs' => 72, 'rhs' => 1 ),
  array( 'lhs' => 94, 'rhs' => 4 ),
  array( 'lhs' => 94, 'rhs' => 4 ),
  array( 'lhs' => 94, 'rhs' => 2 ),
  array( 'lhs' => 89, 'rhs' => 1 ),
  array( 'lhs' => 89, 'rhs' => 3 ),
  array( 'lhs' => 93, 'rhs' => 4 ),
  array( 'lhs' => 93, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 1 ),
  array( 'lhs' => 86, 'rhs' => 1 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 1 ),
  array( 'lhs' => 86, 'rhs' => 2 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 2 ),
  array( 'lhs' => 86, 'rhs' => 2 ),
  array( 'lhs' => 95, 'rhs' => 7 ),
  array( 'lhs' => 88, 'rhs' => 1 ),
  array( 'lhs' => 88, 'rhs' => 2 ),
  array( 'lhs' => 88, 'rhs' => 2 ),
  array( 'lhs' => 88, 'rhs' => 2 ),
  array( 'lhs' => 88, 'rhs' => 2 ),
  array( 'lhs' => 88, 'rhs' => 1 ),
  array( 'lhs' => 88, 'rhs' => 3 ),
  array( 'lhs' => 88, 'rhs' => 1 ),
  array( 'lhs' => 88, 'rhs' => 1 ),
  array( 'lhs' => 88, 'rhs' => 3 ),
  array( 'lhs' => 88, 'rhs' => 1 ),
  array( 'lhs' => 88, 'rhs' => 1 ),
  array( 'lhs' => 87, 'rhs' => 2 ),
  array( 'lhs' => 87, 'rhs' => 2 ),
  array( 'lhs' => 87, 'rhs' => 2 ),
  array( 'lhs' => 102, 'rhs' => 3 ),
  array( 'lhs' => 102, 'rhs' => 2 ),
  array( 'lhs' => 102, 'rhs' => 2 ),
  array( 'lhs' => 102, 'rhs' => 4 ),
  array( 'lhs' => 102, 'rhs' => 3 ),
  array( 'lhs' => 91, 'rhs' => 1 ),
  array( 'lhs' => 91, 'rhs' => 3 ),
  array( 'lhs' => 103, 'rhs' => 2 ),
  array( 'lhs' => 103, 'rhs' => 5 ),
  array( 'lhs' => 100, 'rhs' => 4 ),
  array( 'lhs' => 104, 'rhs' => 3 ),
  array( 'lhs' => 104, 'rhs' => 1 ),
  array( 'lhs' => 104, 'rhs' => 0 ),
  array( 'lhs' => 97, 'rhs' => 3 ),
  array( 'lhs' => 97, 'rhs' => 2 ),
  array( 'lhs' => 105, 'rhs' => 3 ),
  array( 'lhs' => 105, 'rhs' => 2 ),
  array( 'lhs' => 106, 'rhs' => 2 ),
  array( 'lhs' => 106, 'rhs' => 0 ),
  array( 'lhs' => 107, 'rhs' => 2 ),
  array( 'lhs' => 107, 'rhs' => 2 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 99, 'rhs' => 1 ),
  array( 'lhs' => 99, 'rhs' => 1 ),
  array( 'lhs' => 99, 'rhs' => 1 ),
  array( 'lhs' => 96, 'rhs' => 3 ),
  array( 'lhs' => 108, 'rhs' => 3 ),
  array( 'lhs' => 108, 'rhs' => 1 ),
  array( 'lhs' => 108, 'rhs' => 0 ),
  array( 'lhs' => 109, 'rhs' => 3 ),
  array( 'lhs' => 109, 'rhs' => 1 ),
  array( 'lhs' => 101, 'rhs' => 2 ),
  array( 'lhs' => 101, 'rhs' => 3 ),
  array( 'lhs' => 110, 'rhs' => 2 ),
  array( 'lhs' => 110, 'rhs' => 1 ),
  array( 'lhs' => 111, 'rhs' => 1 ),
  array( 'lhs' => 111, 'rhs' => 3 ),
  array( 'lhs' => 111, 'rhs' => 1 ),
  array( 'lhs' => 90, 'rhs' => 1 ),
  array( 'lhs' => 90, 'rhs' => 0 ),
    );

    public static $yyReduceMap = array(
        0 => 0,
        1 => 1,
        2 => 2,
        36 => 2,
        141 => 2,
        5 => 5,
        6 => 6,
        34 => 6,
        63 => 6,
        98 => 6,
        7 => 7,
        8 => 8,
        9 => 9,
        29 => 9,
        10 => 10,
        11 => 11,
        12 => 12,
        37 => 12,
        38 => 12,
        47 => 12,
        59 => 12,
        64 => 12,
        65 => 12,
        69 => 12,
        79 => 12,
        87 => 12,
        96 => 12,
        129 => 12,
        132 => 12,
        140 => 12,
        13 => 13,
        14 => 14,
        21 => 14,
        15 => 15,
        20 => 15,
        35 => 15,
        82 => 15,
        83 => 15,
        93 => 15,
        16 => 16,
        17 => 17,
        18 => 18,
        19 => 19,
        22 => 22,
        23 => 23,
        24 => 24,
        25 => 24,
        27 => 27,
        28 => 28,
        30 => 30,
        31 => 31,
        32 => 32,
        33 => 33,
        39 => 39,
        40 => 40,
        41 => 41,
        42 => 41,
        43 => 43,
        44 => 44,
        45 => 45,
        46 => 46,
        48 => 48,
        49 => 49,
        50 => 50,
        51 => 51,
        52 => 52,
        53 => 53,
        54 => 54,
        106 => 54,
        112 => 54,
        55 => 55,
        56 => 56,
        60 => 56,
        105 => 56,
        113 => 56,
        114 => 56,
        57 => 57,
        58 => 57,
        61 => 61,
        62 => 62,
        66 => 66,
        67 => 66,
        68 => 66,
        70 => 70,
        71 => 71,
        72 => 72,
        73 => 73,
        74 => 74,
        75 => 75,
        76 => 76,
        77 => 77,
        78 => 78,
        80 => 80,
        81 => 81,
        84 => 84,
        89 => 84,
        90 => 84,
        85 => 85,
        86 => 86,
        88 => 88,
        91 => 91,
        92 => 92,
        94 => 94,
        95 => 95,
        97 => 97,
        99 => 99,
        100 => 100,
        101 => 101,
        102 => 102,
        103 => 103,
        104 => 104,
        107 => 107,
        108 => 108,
        109 => 109,
        110 => 110,
        111 => 111,
        115 => 115,
        116 => 116,
        117 => 117,
        118 => 118,
        119 => 119,
        120 => 120,
        121 => 121,
        122 => 122,
        123 => 123,
        124 => 124,
        125 => 125,
        126 => 126,
        127 => 127,
        128 => 128,
        130 => 130,
        131 => 131,
        133 => 133,
        134 => 134,
        135 => 135,
        136 => 136,
        137 => 137,
        138 => 138,
        139 => 139,
    );
#line 134 "Parser.y"
    function yy_r0(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor . $this->root_buffer->to_smarty_php();
    }
#line 1448 "Parser.php"
#line 138 "Parser.y"
    function yy_r1(){
    $this->strict_mode = true;
    $this->_retvalue = "/* strict mode */\n\$_smarty_tpl->strict_mode = true;\n";
    }
#line 1454 "Parser.php"
#line 142 "Parser.y"
    function yy_r2(){
    $this->_retvalue = '';
    }
#line 1459 "Parser.php"
#line 151 "Parser.y"
    function yy_r5(){

    $this->current_buffer->append_subtree(new Helpers\Tag($this->yystack[$this->yyidx + 0]->minor));

    $header = Constructs\ConstructInclude::compileOpen($this->compiler, $this->yystack[$this->yyidx + -1]->minor);
    $header .= "\$_smarty_tpl->tpl_vars['smarty']->value['blocks'] = array();\n";
    $this->current_buffer->append_subtree(new Helpers\Tag($header));
    }
#line 1469 "Parser.php"
#line 159 "Parser.y"
    function yy_r6(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 1474 "Parser.php"
#line 163 "Parser.y"
    function yy_r7(){
    $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor ?: '';
    }
#line 1479 "Parser.php"
#line 166 "Parser.y"
    function yy_r8(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor . ($this->yystack[$this->yyidx + 0]->minor ?: '');
    }
#line 1484 "Parser.php"
#line 169 "Parser.y"
    function yy_r9(){
    $this->_retvalue = null;
    }
#line 1489 "Parser.php"
#line 172 "Parser.y"
    function yy_r10(){
    $this->strip++;
    $this->_retvalue = null;
    }
#line 1495 "Parser.php"
#line 176 "Parser.y"
    function yy_r11(){
    if (!$this->strip) {
        $this->compiler->trigger_template_error('Unbalanced {strip} tags');
    }
    $this->strip--;
    $this->_retvalue = null;
    }
#line 1504 "Parser.php"
#line 183 "Parser.y"
    function yy_r12(){
    $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 1509 "Parser.php"
#line 187 "Parser.y"
    function yy_r13(){
    if (trim($this->yystack[$this->yyidx + 0]->minor) !== '') {
        $this->trigger_template_error('Unexpected string in template with {extends}: ' . $this->yystack[$this->yyidx + 0]->minor);
    }
    $this->_retvalue = null;
    }
#line 1517 "Parser.php"
#line 194 "Parser.y"
    function yy_r14(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor . $this->yystack[$this->yyidx + -1]->minor->to_smarty_php() . $this->yystack[$this->yyidx + 0]->minor;
    }
#line 1522 "Parser.php"
#line 197 "Parser.y"
    function yy_r15(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor . $this->yystack[$this->yyidx + 0]->minor;
    }
#line 1527 "Parser.php"
#line 200 "Parser.y"
    function yy_r16(){
    $this->_retvalue = Constructs\ConstructBlockNonterminal::compileOpen($this->compiler, $this->yystack[$this->yyidx + -1]->minor);
    }
#line 1532 "Parser.php"
#line 203 "Parser.y"
    function yy_r17(){
    $this->_retvalue = Constructs\ConstructBlockNonterminal::compileClose($this->compiler, array());
    }
#line 1537 "Parser.php"
#line 206 "Parser.y"
    function yy_r18(){
    $this->_retvalue = new Helpers\TemplateBuffer();
    if ($this->yystack[$this->yyidx + 0]->minor) {
        $this->_retvalue->append_subtree($this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 1545 "Parser.php"
#line 212 "Parser.y"
    function yy_r19(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    if ($this->yystack[$this->yyidx + 0]->minor) {
        $this->_retvalue->append_subtree($this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 1553 "Parser.php"
#line 226 "Parser.y"
    function yy_r22(){
    $this->_retvalue = Constructs\ConstructBlockTerminal::compileOpen($this->compiler, $this->yystack[$this->yyidx + -1]->minor);
    }
#line 1558 "Parser.php"
#line 229 "Parser.y"
    function yy_r23(){
    $this->_retvalue = Constructs\ConstructBlockTerminal::compileClose($this->compiler, array());
    }
#line 1563 "Parser.php"
#line 235 "Parser.y"
    function yy_r24(){
    if ($this->yystack[$this->yyidx + 0]->minor !== null) {
        $this->current_buffer->append_subtree($this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 1570 "Parser.php"
#line 252 "Parser.y"
    function yy_r27(){
    if ($this->compiler->has_code && !is_object($this->yystack[$this->yyidx + -1]->minor)) {
        $this->_retvalue = new Helpers\Tag((string) $this->yystack[$this->yyidx + -1]->minor);
    } elseif ($this->compiler->has_code) {
        $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    } else {
        $this->_retvalue = null;
    }
    }
#line 1581 "Parser.php"
#line 262 "Parser.y"
    function yy_r28(){
    $this->_retvalue = new Helpers\Tag($this->yystack[$this->yyidx + 0]->minor);
    }
#line 1586 "Parser.php"
#line 271 "Parser.y"
    function yy_r30(){
    $this->_retvalue = new Helpers\Text($this->yystack[$this->yyidx + 0]->minor);
    }
#line 1591 "Parser.php"
#line 276 "Parser.y"
    function yy_r31(){
    if ($this->strip) {
        $this->_retvalue = new Helpers\Text(self::stripString($this->yystack[$this->yyidx + 0]->minor));
    } else {
        $this->_retvalue = new Helpers\Text($this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 1600 "Parser.php"
#line 285 "Parser.y"
    function yy_r32(){
    $this->strip++;
    }
#line 1605 "Parser.php"
#line 289 "Parser.y"
    function yy_r33(){
    if (!$this->strip) {
        $this->compiler->trigger_template_error('Unbalanced {strip} tags');
    }
    $this->strip--;
    }
#line 1613 "Parser.php"
#line 324 "Parser.y"
    function yy_r39(){
    $this->compiler->assert_no_enforced_modifiers($this->yystack[$this->yyidx + 0]->minor instanceof Wrappers\StaticWrapper);
    if ($this->yystack[$this->yyidx + 0]->minor instanceof Wrappers\StaticWrapper) {
        $this->yystack[$this->yyidx + 0]->minor = (string) $this->yystack[$this->yyidx + 0]->minor;
    }
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructPrintExpression::compileOpen(
        $this->compiler,
        array('value' => $this->yystack[$this->yyidx + 0]->minor, 'modifierlist' => array())
    );
    }
#line 1626 "Parser.php"
#line 340 "Parser.y"
    function yy_r40(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor . ' = (' . $this->yystack[$this->yyidx + 0]->minor . ');';
    }
#line 1631 "Parser.php"
#line 344 "Parser.y"
    function yy_r41(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructAssign::compileOpen(
        $this->compiler,
        array('value' => $this->yystack[$this->yyidx + 0]->minor, 'var' => "'" . $this->yystack[$this->yyidx + -2]->minor . "'")
    );
    }
#line 1640 "Parser.php"
#line 361 "Parser.y"
    function yy_r43(){
    $this->compiler->has_code = true;
    switch ($this->yystack[$this->yyidx + -1]->minor) {
        case 'assign':
            $this->_retvalue = Constructs\ConstructAssign::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'break':
            $this->_retvalue = Constructs\ConstructBreak::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'call':
            $this->_retvalue = Constructs\ConstructCall::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'capture':
            $this->_retvalue = Constructs\ConstructCapture::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'continue':
            $this->_retvalue = Constructs\ConstructContinue::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'else':
            $this->_retvalue = Constructs\ConstructElse::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'foreachelse':
            $this->_retvalue = Constructs\ConstructForEachElse::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'forelse':
            $this->_retvalue = Constructs\ConstructForElse::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'function':
            $this->_retvalue = Constructs\ConstructFunction::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'include':
            $this->_retvalue = Constructs\ConstructInclude::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'ldelim':
            $this->_retvalue = new Helpers\Text($this->compiler->smarty->left_delimiter);
            break;
        case 'rdelim':
            $this->_retvalue = new Helpers\Text($this->compiler->smarty->right_delimiter);
            break;
        default:
            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 1685 "Parser.php"
#line 407 "Parser.y"
    function yy_r44(){
    $tag = trim(substr($this->yystack[$this->yyidx + -1]->minor, $this->lex->ldel_length));
    $this->compiler->has_code = true;
    switch ($tag) {
        case 'if':
            $this->_retvalue = Constructs\ConstructIf::compileOpen($this->compiler, array('cond' => $this->yystack[$this->yyidx + 0]->minor));
            break;
        case 'elseif':
            $this->_retvalue = Constructs\ConstructElseIf::compileOpen($this->compiler, array('cond' => $this->yystack[$this->yyidx + 0]->minor));
            break;
        case 'while':
            $this->_retvalue = Constructs\ConstructWhile::compileOpen($this->compiler, array('cond' => $this->yystack[$this->yyidx + 0]->minor));
            break;
    }
    }
#line 1702 "Parser.php"
#line 423 "Parser.y"
    function yy_r45(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructFor::compileOpen(
        $this->compiler,
        array_merge(
            $this->yystack[$this->yyidx + 0]->minor,
            array(
                array('start' => $this->yystack[$this->yyidx + -9]->minor),
                array('ifexp' => $this->yystack[$this->yyidx + -6]->minor),
                array('var' => $this->yystack[$this->yyidx + -2]->minor),
                array('step' => $this->yystack[$this->yyidx + -1]->minor)
            )
        )
    );
    }
#line 1719 "Parser.php"
#line 439 "Parser.y"
    function yy_r46(){
    $this->_retvalue = '=' . $this->yystack[$this->yyidx + 0]->minor;
    }
#line 1724 "Parser.php"
#line 447 "Parser.y"
    function yy_r48(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructFor::compileOpen(
        $this->compiler,
        array_merge(
            $this->yystack[$this->yyidx + 0]->minor,
            array(array('start' => $this->yystack[$this->yyidx + -3]->minor), array('to' => $this->yystack[$this->yyidx + -1]->minor))
        )
    );
    }
#line 1736 "Parser.php"
#line 458 "Parser.y"
    function yy_r49(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructFor::compileOpen(
        $this->compiler,
        array_merge(
            $this->yystack[$this->yyidx + 0]->minor,
            array(array('start' => $this->yystack[$this->yyidx + -5]->minor), array('to' => $this->yystack[$this->yyidx + -3]->minor), array('step' => $this->yystack[$this->yyidx + -1]->minor))
        )
    );
    }
#line 1748 "Parser.php"
#line 470 "Parser.y"
    function yy_r50(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructForEach::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 1754 "Parser.php"
#line 476 "Parser.y"
    function yy_r51(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructForEach::compileOpen(
        $this->compiler,
        array_merge($this->yystack[$this->yyidx + 0]->minor, array(array('from' => $this->yystack[$this->yyidx + -4]->minor), array('item' => $this->yystack[$this->yyidx + -1]->minor)))
    );
    }
#line 1763 "Parser.php"
#line 485 "Parser.y"
    function yy_r52(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructForEach::compileOpen(
        $this->compiler,
        array_merge(
            $this->yystack[$this->yyidx + 0]->minor,
            array(
                array('from' => $this->yystack[$this->yyidx + -7]->minor),
                array('item' => $this->yystack[$this->yyidx + -1]->minor),
                array('key' => $this->yystack[$this->yyidx + -4]->minor),
            )
        )
    );
    }
#line 1779 "Parser.php"
#line 502 "Parser.y"
    function yy_r53(){
    switch ($this->yystack[$this->yyidx + 0]->minor) {
        case 'capture':
            $this->_retvalue = Constructs\ConstructCapture::compileClose($this->compiler, null);
            break;
        case 'for':
            $this->_retvalue = Constructs\ConstructFor::compileClose($this->compiler, null);
            break;
        case 'foreach':
            $this->_retvalue = Constructs\ConstructForEach::compileClose($this->compiler, null);
            break;
        case 'function':
            $this->_retvalue = Constructs\ConstructFunction::compileClose($this->compiler, null);
            break;
        case 'if':
            $this->_retvalue = Constructs\ConstructIf::compileClose($this->compiler, null);
            break;
        case 'while':
            $this->_retvalue = Constructs\ConstructWhile::compileClose($this->compiler, null);
            break;
        default:
            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + 0]->minor . 'close', array());
    }
    }
#line 1805 "Parser.php"
#line 531 "Parser.y"
    function yy_r54(){
    $this->_retvalue = array();
    }
#line 1810 "Parser.php"
#line 535 "Parser.y"
    function yy_r55(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    $this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 1816 "Parser.php"
#line 540 "Parser.y"
    function yy_r56(){
    $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);
    }
#line 1821 "Parser.php"
#line 544 "Parser.y"
    function yy_r57(){
    $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor => $this->yystack[$this->yyidx + 0]->minor);
    }
#line 1826 "Parser.php"
#line 565 "Parser.y"
    function yy_r61(){
    $this->yystack[$this->yyidx + -2]->minor[]=$this->yystack[$this->yyidx + 0]->minor;
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor;
    }
#line 1832 "Parser.php"
#line 570 "Parser.y"
    function yy_r62(){
    $this->_retvalue = array('var' => $this->yystack[$this->yyidx + -2]->minor, 'value'=>$this->yystack[$this->yyidx + 0]->minor);
    }
#line 1837 "Parser.php"
#line 594 "Parser.y"
    function yy_r66(){
    $this->_retvalue = Wrappers\StaticWrapper::static_if_all($this->yystack[$this->yyidx + -2]->minor . trim($this->yystack[$this->yyidx + -1]->minor) . $this->yystack[$this->yyidx + 0]->minor, array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 1842 "Parser.php"
#line 613 "Parser.y"
    function yy_r70(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructModifier::compileOpen($this->compiler, array(
        'value' => $this->yystack[$this->yyidx + -1]->minor,
        'modifierlist' => $this->yystack[$this->yyidx + 0]->minor,
    ));
    }
#line 1851 "Parser.php"
#line 623 "Parser.y"
    function yy_r71(){
    $this->_retvalue = new Wrappers\StaticWrapper($this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor);
    }
#line 1856 "Parser.php"
#line 627 "Parser.y"
    function yy_r72(){
    $this->_retvalue = new Wrappers\StaticWrapper('in_array('.$this->yystack[$this->yyidx + -2]->minor.','.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 1861 "Parser.php"
#line 631 "Parser.y"
    function yy_r73(){
    $this->_retvalue = new Wrappers\StaticWrapper('in_array('.$this->yystack[$this->yyidx + -2]->minor.',(array)'.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 1866 "Parser.php"
#line 635 "Parser.y"
    function yy_r74(){
    $this->_retvalue = new Wrappers\StaticWrapper($this->yystack[$this->yyidx + -2]->minor . $this->yystack[$this->yyidx + -1]->minor . $this->yystack[$this->yyidx + 0]->minor);
    }
#line 1871 "Parser.php"
#line 639 "Parser.y"
    function yy_r75(){
    $this->_retvalue = new Wrappers\StaticWrapper('!('.$this->yystack[$this->yyidx + -2]->minor.' % '.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 1876 "Parser.php"
#line 643 "Parser.y"
    function yy_r76(){
    $this->_retvalue = new Wrappers\StaticWrapper('!(1 & '.$this->yystack[$this->yyidx + -1]->minor.')');
    }
#line 1881 "Parser.php"
#line 647 "Parser.y"
    function yy_r77(){
    $this->_retvalue = new Wrappers\StaticWrapper('(1 & '.$this->yystack[$this->yyidx + -1]->minor.')');
    }
#line 1886 "Parser.php"
#line 655 "Parser.y"
    function yy_r78(){
    $this->_retvalue = Wrappers\StaticWrapper::static_if_all($this->yystack[$this->yyidx + -5]->minor . ' ? ' . $this->yystack[$this->yyidx + -2]->minor . ' : ' . $this->yystack[$this->yyidx + 0]->minor, array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 1891 "Parser.php"
#line 665 "Parser.y"
    function yy_r80(){
    $this->_retvalue = Wrappers\StaticWrapper::static_concat($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 1896 "Parser.php"
#line 670 "Parser.y"
    function yy_r81(){
    $this->_retvalue = Wrappers\StaticWrapper::static_concat('!', $this->yystack[$this->yyidx + 0]->minor);
    }
#line 1901 "Parser.php"
#line 683 "Parser.y"
    function yy_r84(){
    $this->_retvalue = new Wrappers\StaticWrapper($this->yystack[$this->yyidx + 0]->minor);
    }
#line 1906 "Parser.php"
#line 687 "Parser.y"
    function yy_r85(){
    $this->_retvalue = new Wrappers\StaticWrapper($this->yystack[$this->yyidx + -2]->minor.'.'.$this->yystack[$this->yyidx + 0]->minor);
    }
#line 1911 "Parser.php"
#line 692 "Parser.y"
    function yy_r86(){
    if (preg_match('~^true$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = new Wrappers\StaticWrapper('true');
    } elseif (preg_match('~^false$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = new Wrappers\StaticWrapper('false');
    } elseif (preg_match('~^null$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = new Wrappers\StaticWrapper('null');
    } else {
        $this->_retvalue = new Wrappers\StaticWrapper(var_export($this->yystack[$this->yyidx + 0]->minor, true));
    }
    }
#line 1924 "Parser.php"
#line 710 "Parser.y"
    function yy_r88(){
    $this->_retvalue = Wrappers\StaticWrapper::static_if_all("(". $this->yystack[$this->yyidx + -1]->minor .")", array($this->yystack[$this->yyidx + -1]->minor));
    }
#line 1929 "Parser.php"
#line 729 "Parser.y"
    function yy_r91(){
    if ($this->yystack[$this->yyidx + 0]->minor === "'smarty'") {
        $this->_retvalue = new Wrappers\SmartyVarLookupWrapper();
    } else {
        $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 1938 "Parser.php"
#line 737 "Parser.y"
    function yy_r92(){
    if ($this->yystack[$this->yyidx + -1]->minor instanceof Wrappers\SmartyVarLookupWrapper) {
        $decompiled = Decompile::decompileString($this->yystack[$this->yyidx + 0]->minor);
        switch ($decompiled) {
            case 'now':
                $this->_retvalue = new Wrappers\StaticWrapper('time()');
                break;
            case 'template':
                $this->compiler->assert_is_not_strict('$smarty.template is not supported in strict mode', $this);
                $this->_retvalue = new Wrappers\StaticWrapper('basename($_smarty_tpl->source->filepath)');
                break;
            case 'version':
                $this->_retvalue = new Wrappers\StaticWrapper(var_export(\Box\Brainy\Brainy::SMARTY_VERSION, true));
                break;
            case 'ldelim':
                $this->_retvalue = new Wrappers\StaticWrapper(var_export($this->compiler->smarty->left_delimiter, true));
                break;
            case 'rdelim':
                $this->_retvalue = new Wrappers\StaticWrapper(var_export($this->compiler->smarty->right_delimiter, true));
                break;
            case 'foreach':
            case 'capture':
            case 'block':
                $this->_retvalue = new Wrappers\SmartyVarPoisonWrapper($decompiled);
                break;
            default:
                $this->compiler->trigger_template_error('$smarty[' . $this->yystack[$this->yyidx + 0]->minor . '] is invalid');
        }

    } elseif ($this->yystack[$this->yyidx + -1]->minor instanceof Wrappers\SmartyVarPoisonWrapper) {
        if ($this->yystack[$this->yyidx + -1]->minor->type === 'block') {
            $decompiled = Decompile::decompileString($this->yystack[$this->yyidx + 0]->minor);
            switch ($decompiled) {
                case 'child':
                    $data = $this->compiler->assertIsInTag('block');
                    $childBlockVar = $data['childVar'];

                    $this->_retvalue = "($childBlockVar ? $childBlockVar(\$_smarty_tpl) ?: '' : '')";
                    break;
                default:
                    $this->compiler->trigger_template_error('$smarty.block[' . $this->yystack[$this->yyidx + 0]->minor . '] is invalid');
            }
        } else {
            // foreach and capture
            $this->_retvalue = new Wrappers\StaticWrapper("\$_smarty_tpl->tpl_vars['smarty']->value[" . var_export($this->yystack[$this->yyidx + -1]->minor->type, true) . "][" . $this->yystack[$this->yyidx + 0]->minor . "]");
        }

    } else {
        $this->_retvalue = $this->compileSafeLookupWithBase($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 1991 "Parser.php"
#line 795 "Parser.y"
    function yy_r94(){
    $this->compiler->assert_is_not_strict('Variable indicies with dot syntax is not supported in strict mode', $this);
    $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + 0]->minor);
    }
#line 1997 "Parser.php"
#line 800 "Parser.y"
    function yy_r95(){
    $this->_retvalue = var_export($this->yystack[$this->yyidx + 0]->minor, true);
    }
#line 2002 "Parser.php"
#line 808 "Parser.y"
    function yy_r97(){
    $this->compiler->assert_is_not_strict('Dot syntax with expressions is not supported in strict mode', $this);
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 2008 "Parser.php"
#line 821 "Parser.y"
    function yy_r99(){
    $this->_retvalue = '\''.$this->yystack[$this->yyidx + 0]->minor.'\'';
    }
#line 2013 "Parser.php"
#line 826 "Parser.y"
    function yy_r100(){
    $this->compiler->assert_is_not_strict('Variable variables are not supported in strict mode', $this);
    $this->_retvalue = '('.$this->yystack[$this->yyidx + -1]->minor.')';
    }
#line 2019 "Parser.php"
#line 837 "Parser.y"
    function yy_r101(){
    if ($this->security && substr($this->yystack[$this->yyidx + 0]->minor, 0, 1) == '_') {
        $this->compiler->trigger_template_error('Call to private object member "' . $this->yystack[$this->yyidx + 0]->minor . '" not allowed');
    }
    $this->_retvalue = '->'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2027 "Parser.php"
#line 845 "Parser.y"
    function yy_r102(){
    if ($this->security && substr($this->yystack[$this->yyidx + -3]->minor, 0, 1) == '_') {
        $this->compiler->trigger_template_error('Call to private object member "' . $this->yystack[$this->yyidx + -3]->minor . '" not allowed');
    }
    $this->_retvalue = '->' . $this->yystack[$this->yyidx + -3]->minor . "(" . implode(',', $this->yystack[$this->yyidx + -1]->minor) . ")";
    }
#line 2035 "Parser.php"
#line 856 "Parser.y"
    function yy_r103(){
    if ($this->security && !$this->smarty->security_policy->isTrustedPhpFunction($this->yystack[$this->yyidx + -3]->minor, $this->compiler)) {
        $this->compiler->trigger_template_error('Cannot use untrusted function: ' . $this->yystack[$this->yyidx + -3]->minor);
    }
    if (!(strcasecmp($this->yystack[$this->yyidx + -3]->minor, 'isset') === 0 || strcasecmp($this->yystack[$this->yyidx + -3]->minor, 'empty') === 0 || strcasecmp($this->yystack[$this->yyidx + -3]->minor, 'array') === 0 || is_callable($this->yystack[$this->yyidx + -3]->minor))) {
        $this->compiler->trigger_template_error("unknown function \"" . $this->yystack[$this->yyidx + -3]->minor . "\"");
    }

    $func_name = strtolower($this->yystack[$this->yyidx + -3]->minor);

    $is_language_construct = $func_name === 'isset' || $func_name === 'empty';
    $combined_params = array();
    foreach ($this->yystack[$this->yyidx + -1]->minor as $param) {
        if ($is_language_construct && $param instanceof Wrappers\SafeLookupWrapper) {
            $combined_params[] = $param->getUnsafe();
            continue;
        }
        $combined_params[] = $param;
    }
    $par = implode(',', $combined_params);

    if ($func_name == 'isset') {
        if (count($combined_params) !== 1) {
            $this->compiler->trigger_template_error('Illegal number of paramer in "isset()"');
        }
        $isset_par = str_replace("')->value", "',null,true,false)->value", $par);
        $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". $isset_par .")";

    } elseif (in_array($func_name, array('empty', 'reset', 'current', 'end', 'prev', 'next'))) {

        if ($func_name !== 'empty') {
            $this->compiler->assert_is_not_strict($func_name . ' is not allowed in strict mode', $this);
        }

        if (count($combined_params) != 1) {
            $this->compiler->trigger_template_error('Illegal number of paramer in "' . $func_name . '()"');
        }
        if ($func_name == 'empty') {
            $this->_retvalue = $func_name.'('.str_replace("')->value", "',null,true,false)->value",$combined_params[0]).')';
        } else {
            $this->_retvalue = $func_name.'('.$combined_params[0].')';
        }
    } else {
        $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". $par .")";
    }
    }
#line 2083 "Parser.php"
#line 907 "Parser.y"
    function yy_r104(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -2]->minor,array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 2088 "Parser.php"
#line 924 "Parser.y"
    function yy_r107(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -2]->minor,array(array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor)));
    }
#line 2093 "Parser.php"
#line 928 "Parser.y"
    function yy_r108(){
    $this->_retvalue = array(array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor));
    }
#line 2098 "Parser.php"
#line 932 "Parser.y"
    function yy_r109(){
    $this->compiler->assert_is_not_strict('@ is not allowed in templates', $this);
    $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2104 "Parser.php"
#line 937 "Parser.y"
    function yy_r110(){
    $this->_retvalue =  array($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2109 "Parser.php"
#line 942 "Parser.y"
    function yy_r111(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2114 "Parser.php"
#line 962 "Parser.y"
    function yy_r115(){
    $this->_retvalue = '==';
    }
#line 2119 "Parser.php"
#line 966 "Parser.y"
    function yy_r116(){
    $this->_retvalue = '!=';
    }
#line 2124 "Parser.php"
#line 970 "Parser.y"
    function yy_r117(){
    $this->_retvalue = '>';
    }
#line 2129 "Parser.php"
#line 974 "Parser.y"
    function yy_r118(){
    $this->_retvalue = '<';
    }
#line 2134 "Parser.php"
#line 978 "Parser.y"
    function yy_r119(){
    $this->_retvalue = '>=';
    }
#line 2139 "Parser.php"
#line 982 "Parser.y"
    function yy_r120(){
    $this->_retvalue = '<=';
    }
#line 2144 "Parser.php"
#line 986 "Parser.y"
    function yy_r121(){
    $this->_retvalue = '===';
    }
#line 2149 "Parser.php"
#line 990 "Parser.y"
    function yy_r122(){
    $this->_retvalue = '!==';
    }
#line 2154 "Parser.php"
#line 994 "Parser.y"
    function yy_r123(){
    $this->_retvalue = '%';
    }
#line 2159 "Parser.php"
#line 998 "Parser.y"
    function yy_r124(){
    $this->_retvalue = '&&';
    }
#line 2164 "Parser.php"
#line 1002 "Parser.y"
    function yy_r125(){
    $this->_retvalue = '||';
    }
#line 2169 "Parser.php"
#line 1006 "Parser.y"
    function yy_r126(){
    $this->compiler->assert_is_not_strict('XOR is not supported in strict mode', $this);
    $this->_retvalue = ' XOR ';
    }
#line 2175 "Parser.php"
#line 1014 "Parser.y"
    function yy_r127(){
    $this->_retvalue = 'array('.$this->yystack[$this->yyidx + -1]->minor.')';
    }
#line 2180 "Parser.php"
#line 1018 "Parser.y"
    function yy_r128(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.','.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2185 "Parser.php"
#line 1024 "Parser.y"
    function yy_r130(){
    return;
    }
#line 2190 "Parser.php"
#line 1028 "Parser.y"
    function yy_r131(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'=>'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2195 "Parser.php"
#line 1040 "Parser.y"
    function yy_r133(){
    $this->_retvalue = "''";
    }
#line 2200 "Parser.php"
#line 1044 "Parser.y"
    function yy_r134(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor->to_smarty_php();
    }
#line 2205 "Parser.php"
#line 1049 "Parser.y"
    function yy_r135(){
    $this->yystack[$this->yyidx + -1]->minor->append_subtree($this->yystack[$this->yyidx + 0]->minor);
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 2211 "Parser.php"
#line 1054 "Parser.y"
    function yy_r136(){
    $this->_retvalue = new Helpers\DoubleQuoted($this);
    $this->_retvalue->append_subtree($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2217 "Parser.php"
#line 1059 "Parser.y"
    function yy_r137(){
    $this->_retvalue = new Helpers\Expression('(string)' . $this->compileVariable("'" . substr($this->yystack[$this->yyidx + 0]->minor, 1) . "'"));
    }
#line 2222 "Parser.php"
#line 1063 "Parser.y"
    function yy_r138(){
    $this->_retvalue = new Helpers\Expression('(string)(' . $this->yystack[$this->yyidx + -1]->minor . ')');
    }
#line 2227 "Parser.php"
#line 1067 "Parser.y"
    function yy_r139(){
    $this->_retvalue = new Helpers\DoubleQuotedContent($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2232 "Parser.php"

    private $_retvalue;

    public function yy_reduce($yyruleno)
    {
        $yymsp = $this->yystack[$this->yyidx];

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for ($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            if ($yysize) {
                $this->yyidx++;
                $x = new TP_yyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    public function yy_parse_failed()
    {
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
    }

    public function yy_syntax_error($yymajor, $TOKEN)
    {
#line 119 "Parser.y"

    $this->internalError = true;
    $this->yymajor = $yymajor;
    $this->compiler->trigger_template_error();
#line 2286 "Parser.php"
    }

    public function yy_accept()
    {
        while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
#line 113 "Parser.y"

    $this->internalError = false;
    $this->retvalue = $this->_retvalue;
#line 2299 "Parser.php"
    }

    public function doParse($yymajor, $yytokenvalue)
    {
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */

        if ($this->yyidx === null || $this->yyidx < 0) {
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new TP_yyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);

        do {
            $yyact = $this->yy_find_shift_action($yymajor);
            if ($yymajor < self::YYERRORSYMBOL &&
                  !$this->yy_is_expected_token($yymajor)) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if (self::YYERRORSYMBOL) {
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit) {
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0 &&
                                 $yymx != self::YYERRORSYMBOL &&
        ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                              ){
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}
