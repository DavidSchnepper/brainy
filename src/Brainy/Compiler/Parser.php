<?php
/**
 * Brainy Internal Plugin Templateparser
 *
 * This is the template parser.
 * It is generated from the Parser.y file
 * @package Brainy
 * @subpackage Compiler
 * @author Uwe Tews
 * @author Matt Basta
 */

namespace Box\Brainy\Compiler;


class TP_yyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};


#line 17 "Parser.y"
class Parser#line 16 "Parser.php"
{
#line 19 "Parser.y"

    public $successful = true;
    public $retvalue = 0;
    public static $prefix_number = 0;
    private $lex;
    private $internalError = false;
    private $strip = 0;

    private $safe_lookups = 0;
    private $strict_mode = false;

    public function __construct($lex, $compiler) {
        $this->lex = $lex;
        $this->compiler = $compiler;
        $this->smarty = $this->compiler->smarty;
        $this->template = $this->compiler->template;
        $this->compiler->has_variable_string = false;
        $this->security = isset($this->smarty->security_policy);
        $this->block_nesting_level = 0;
        $this->current_buffer = $this->root_buffer = new Helpers\TemplateBuffer();

        $this->safe_lookups = $this->smarty->safe_lookups;
    }

    /**
     * Strips whitespace from a string
     * @param string $string
     * @return string
     */
    protected static function stripString($string) {
        // Replaces whitespace followed by a `<` with null.
        // `     \n     </foo>` -> `</foo>`
        $string = preg_replace('/\s+(?=<\/)/ims', '', $string);
        // `     \n     <foo>` -> ` <foo>`
        // `     \n     &nbsp;` -> ` &nbsp;`
        $string = preg_replace('/\s+(?=[<&])/ims', ' ', $string);
        // Replaces `>` followed by whitespace with `>`
        // `<div>\n  foo` -> `<div>foo`
        $string = preg_replace('/>\s+(?=\S)/ims', '>', $string);
        // Replaces whitespace followed by anything else with a space.
        // `            data-hello="` -> ` data-hello="`
        $string = preg_replace('/\s+(?=\w)/ims', ' ', $string);

        // Is there work to be done at the end of the string?
        if ($string !== rtrim($string)) {
            $string = rtrim($string);
            // If the last non-whitespace character is not a `>`, add a space.
            if (substr($string, -1) !== '>') {
                $string .= ' ';
            }
        }
        return $string;
    }

    /**
     * @return bool
     */
    public function isStrictMode() {
        return $this->strict_mode;
    }

    /**
     * @param string $variable The name of the variable to look up
     * @param string|void $value The member of the SmartyVariable to access
     * @return string|Wrappers\SafeLookupWrapper
     */
    public function compileVariable($variable, $value = 'value')
    {
        $unsafe = '$_smarty_tpl->tpl_vars[' . $variable . ']->' . $value;
        if ($this->safe_lookups === 0) { // Unsafe lookups
            return $unsafe;
        }
        $safe = '\Box\Brainy\Runtime\Lookups::safeVarLookup($_smarty_tpl->tpl_vars, '. $variable .', ' . $this->safe_lookups . ')->' . $value;
        return new Wrappers\SafeLookupWrapper($unsafe, $safe);
    }

    /**
     * @param string $base
     * @param string $variable
     * @return string|Wrappers\SafeLookupWrapper
     */
    public function compileSafeLookupWithBase($base, $variable)
    {
        $unsafe = $base . '[' . $variable . ']';
        if ($this->safe_lookups === 0) { // Unsafe lookups
            return $unsafe;
        }
        $safe = '\Box\Brainy\Runtime\Lookups::safeArrayLookup(' . $base . ', '. $variable .', ' . $this->safe_lookups . ')';
        return new Wrappers\SafeLookupWrapper($unsafe, $safe);
    }
#line 110 "Parser.php"

    const TP_VERT                           =  1;
    const TP_COLON                          =  2;
    const TP_SETSTRICT                      =  3;
    const TP_RDEL                           =  4;
    const TP_COMMENT                        =  5;
    const TP_TEXT                           =  6;
    const TP_STRIPON                        =  7;
    const TP_STRIPOFF                       =  8;
    const TP_BLOCKSOURCE                    =  9;
    const TP_LITERALSTART                   = 10;
    const TP_LITERALEND                     = 11;
    const TP_LITERAL                        = 12;
    const TP_LDEL                           = 13;
    const TP_EQUAL                          = 14;
    const TP_DOLLAR                         = 15;
    const TP_ID                             = 16;
    const TP_LDELIF                         = 17;
    const TP_LDELFOR                        = 18;
    const TP_SEMICOLON                      = 19;
    const TP_INCDEC                         = 20;
    const TP_TO                             = 21;
    const TP_STEP                           = 22;
    const TP_LDELFOREACH                    = 23;
    const TP_SPACE                          = 24;
    const TP_AS                             = 25;
    const TP_APTR                           = 26;
    const TP_SMARTYBLOCKCHILDPARENT         = 27;
    const TP_LDELSLASH                      = 28;
    const TP_INTEGER                        = 29;
    const TP_COMMA                          = 30;
    const TP_OPENP                          = 31;
    const TP_CLOSEP                         = 32;
    const TP_MATH                           = 33;
    const TP_UNIMATH                        = 34;
    const TP_ANDSYM                         = 35;
    const TP_ISIN                           = 36;
    const TP_ISDIVBY                        = 37;
    const TP_ISEVEN                         = 38;
    const TP_ISODD                          = 39;
    const TP_QMARK                          = 40;
    const TP_NOT                            = 41;
    const TP_TYPECAST                       = 42;
    const TP_DOT                            = 43;
    const TP_SINGLEQUOTESTRING              = 44;
    const TP_OPENB                          = 45;
    const TP_CLOSEB                         = 46;
    const TP_PTR                            = 47;
    const TP_AT                             = 48;
    const TP_EQUALS                         = 49;
    const TP_NOTEQUALS                      = 50;
    const TP_GREATERTHAN                    = 51;
    const TP_LESSTHAN                       = 52;
    const TP_GREATEREQUAL                   = 53;
    const TP_LESSEQUAL                      = 54;
    const TP_IDENTITY                       = 55;
    const TP_NONEIDENTITY                   = 56;
    const TP_MOD                            = 57;
    const TP_LAND                           = 58;
    const TP_LOR                            = 59;
    const TP_LXOR                           = 60;
    const TP_QUOTE                          = 61;
    const TP_DOLLARID                       = 62;
    const YY_NO_ACTION = 334;
    const YY_ACCEPT_ACTION = 333;
    const YY_ERROR_ACTION = 332;

    const YY_SZ_ACTTAB = 972;
static public $yy_action = array(
 /*     0 */   110,  152,  150,  155,  145,  149,  102,  185,  159,    5,
 /*    10 */    94,   11,   14,   25,   74,   48,   72,  109,  103,   77,
 /*    20 */     9,   24,  195,   27,  129,  170,  201,  102,  209,  194,
 /*    30 */   175,  171,   62,   66,   63,   33,   16,  169,  161,  110,
 /*    40 */   121,  105,  156,   18,    7,  117,   88,  186,  157,  158,
 /*    50 */   162,  163,  168,  167,  166,  164,  165,  182,  183,  202,
 /*    60 */   184,   68,  140,  122,  153,   10,   72,  126,  200,   86,
 /*    70 */    19,   62,   66,   63,   33,   16,  169,  161,  110,    8,
 /*    80 */   175,  171,  144,  122,  153,   82,  230,  157,  158,  162,
 /*    90 */   163,  168,  167,  166,  164,  165,  182,  183,  202,  105,
 /*   100 */   115,   18,  185,  117,   10,   72,  135,  114,   72,  123,
 /*   110 */    62,   66,   63,   33,   16,  169,  161,  110,  176,  175,
 /*   120 */   171,   87,  175,  171,   72,  116,  157,  158,  162,  163,
 /*   130 */   168,  167,  166,  164,  165,  182,  183,  202,  175,  171,
 /*   140 */     9,   27,  196,  125,   72,  124,   72,  132,  197,   62,
 /*   150 */    66,   63,   33,   16,  169,  161,  110,   29,  175,  171,
 /*   160 */   175,  171,   30,   72,  127,  157,  158,  162,  163,  168,
 /*   170 */   167,  166,  164,  165,  182,  183,  202,  175,  171,    3,
 /*   180 */     2,    4,  188,  207,   79,  204,  137,  131,   62,   66,
 /*   190 */    63,   33,   16,  169,  161,  110,  244,  208,  193,  113,
 /*   200 */   192,  333,   61,  130,  157,  158,  162,  163,  168,  167,
 /*   210 */   166,  164,  165,  182,  183,  202,   27,  154,   98,   83,
 /*   220 */     6,   28,  143,    3,   71,   72,  128,   62,   66,   63,
 /*   230 */    33,   16,  169,  161,  110,  177,   92,   21,   17,  175,
 /*   240 */   171,    3,  141,  157,  158,  162,  163,  168,  167,  166,
 /*   250 */   164,  165,  182,  183,  202,   26,  137,   27,   96,  101,
 /*   260 */   191,  148,  142,   90,  141,  141,   62,   66,   63,   33,
 /*   270 */    16,  169,  161,  110,   81,   99,  199,  187,   22,  151,
 /*   280 */    89,  141,  157,  158,  162,  163,  168,  167,  166,  164,
 /*   290 */   165,  182,  183,  202,  160,   91,   34,  174,   20,  110,
 /*   300 */   147,   27,   50,   72,  138,   62,   66,   63,   33,   16,
 /*   310 */   169,  161,  170,  201,   78,  118,  104,  175,  171,   23,
 /*   320 */   198,  157,  158,  162,  163,  168,  167,  166,  164,  165,
 /*   330 */   182,  183,  202,  110,   80,  179,  223,   76,  133,   42,
 /*   340 */    72,  138,   53,   72,  138,  223,  119,  172,  146,  170,
 /*   350 */   201,   93,  170,  201,  175,  171,  223,  175,  171,   75,
 /*   360 */   223,  108,  106,  205,  223,   62,   66,   63,   33,   16,
 /*   370 */   169,  161,  110,  223,  223,  223,  223,  223,  223,  223,
 /*   380 */   223,  157,  158,  162,  163,  168,  167,  166,  164,  165,
 /*   390 */   182,  183,  202,  100,  223,  223,  120,  223,  223,  141,
 /*   400 */   223,  223,  223,  223,   62,   66,   63,   33,   16,  169,
 /*   410 */   161,  110,  223,  223,  189,  223,  223,  223,  223,  223,
 /*   420 */   157,  158,  162,  163,  168,  167,  166,  164,  165,  182,
 /*   430 */   183,  202,  223,  223,  223,  203,  223,  223,  223,  223,
 /*   440 */   223,  223,   13,   62,   66,   63,   33,   16,  169,  161,
 /*   450 */   110,  223,  223,  223,  223,  223,  223,  223,  223,  157,
 /*   460 */   158,  162,  163,  168,  167,  166,  164,  165,  182,  183,
 /*   470 */   202,  223,  223,  223,  223,  223,  223,  223,  223,  223,
 /*   480 */   223,  223,   62,   66,   63,   33,   16,  169,  161,  110,
 /*   490 */   180,  178,  223,  223,  223,  190,  223,  223,  157,  158,
 /*   500 */   162,  163,  168,  167,  166,  164,  165,  182,  183,  202,
 /*   510 */   203,  223,  223,  223,  223,  223,  223,   13,   43,   72,
 /*   520 */   138,   62,   66,   63,   33,   16,  169,  161,  170,  201,
 /*   530 */   223,  223,  223,  175,  171,  223,  223,  157,  158,  162,
 /*   540 */   163,  168,  167,  166,  164,  165,  182,  183,  202,  223,
 /*   550 */   223,  223,  223,  223,  223,   62,   66,   63,   33,   16,
 /*   560 */   169,  161,  223,  223,  223,  181,  178,  223,  223,  223,
 /*   570 */   223,  157,  158,  162,  163,  168,  167,  166,  164,  165,
 /*   580 */   182,  183,  202,  223,  223,  223,  223,   85,   73,  223,
 /*   590 */   223,  223,  223,   84,  111,  223,  223,  223,  223,  139,
 /*   600 */   223,  134,  223,   15,  223,  223,   64,  112,  223,   15,
 /*   610 */   223,  223,   64,   65,   67,  223,  173,    1,  223,   65,
 /*   620 */    67,  223,  173,    1,  223,  223,  223,  223,   84,  136,
 /*   630 */    55,   72,  138,   70,  223,  223,  223,  223,  223,   70,
 /*   640 */   170,  201,  134,  223,   15,  175,  171,   64,  223,   84,
 /*   650 */   136,   39,   72,  138,   65,   67,  223,  173,    1,  223,
 /*   660 */   223,  170,  201,  134,  223,   12,  175,  171,   64,  223,
 /*   670 */    84,  136,  223,  223,   70,   65,   67,  223,  173,    1,
 /*   680 */   223,  223,  223,  223,  134,  223,   12,  223,  223,   64,
 /*   690 */    53,   72,  138,  223,  223,   70,   65,   67,  223,  173,
 /*   700 */   170,  201,   42,   72,  138,  175,  171,  223,  223,  107,
 /*   710 */   223,  223,  170,  201,  223,  223,   70,  175,  171,   37,
 /*   720 */    72,  138,   46,   72,  138,  223,  206,  223,  223,  170,
 /*   730 */   201,  223,  170,  201,  175,  171,  223,  175,  171,   40,
 /*   740 */    72,  138,  223,  223,  223,  223,  223,  223,  223,  170,
 /*   750 */   201,   38,   72,  138,  175,  171,  223,  223,  223,  223,
 /*   760 */   223,  170,  201,   36,   72,  138,  175,  171,  223,  223,
 /*   770 */    41,   72,  138,  170,  201,  223,  223,  223,  175,  171,
 /*   780 */   170,  201,   57,   72,  138,  175,  171,  223,  223,   51,
 /*   790 */    69,  138,  170,  201,  223,  223,  223,  175,  171,  170,
 /*   800 */   201,  223,  223,  223,  175,  171,   60,   72,  138,  223,
 /*   810 */   223,  223,  223,   59,   72,  138,  170,  201,  223,  223,
 /*   820 */   223,  175,  171,  170,  201,   45,   72,  138,  175,  171,
 /*   830 */   223,  223,  223,  223,  223,  170,  201,   44,   72,  138,
 /*   840 */   175,  171,  223,  223,   31,   72,  138,  170,  201,  223,
 /*   850 */   223,  223,  175,  171,  170,  201,   47,   72,  138,  175,
 /*   860 */   171,  223,  223,   52,   72,  138,  170,  201,  223,  223,
 /*   870 */   223,  175,  171,  170,  201,  223,  223,  223,  175,  171,
 /*   880 */    56,   72,  138,  223,  223,  223,  223,   54,   72,  138,
 /*   890 */   170,  201,  223,  223,  223,  175,  171,  170,  201,   49,
 /*   900 */    72,  138,  175,  171,  223,  223,  223,  223,  223,  170,
 /*   910 */   201,   58,   72,  138,  175,  171,  223,  223,   32,   72,
 /*   920 */   138,  170,  201,  223,  223,  223,  175,  171,  170,  201,
 /*   930 */    35,   72,  138,  175,  171,  223,  223,  223,  223,  223,
 /*   940 */   170,  201,   97,  223,  223,  175,  171,  223,  141,  223,
 /*   950 */   223,   94,   11,   14,   95,  223,  223,  223,  223,  103,
 /*   960 */   141,  223,  223,   94,   11,   14,  223,  223,  223,  223,
 /*   970 */   223,  103,
    );
    static public $yy_lookahead = array(
 /*     0 */     1,    5,    6,    7,    8,    9,   10,   20,   16,   13,
 /*    10 */    84,   85,   86,   17,   18,   72,   73,   74,   92,   23,
 /*    20 */    30,   22,   32,   24,   28,   82,   83,   10,   11,   12,
 /*    30 */    87,   88,   33,   34,   35,   36,   37,   38,   39,    1,
 /*    40 */    48,   43,    4,   45,   13,   47,   15,   16,   49,   50,
 /*    50 */    51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
 /*    60 */    29,   66,   67,   68,   69,   13,   73,   74,   16,   15,
 /*    70 */    14,   33,   34,   35,   36,   37,   38,   39,    1,    2,
 /*    80 */    87,   88,   67,   68,   69,   31,    4,   49,   50,   51,
 /*    90 */    52,   53,   54,   55,   56,   57,   58,   59,   60,   43,
 /*   100 */    16,   45,   20,   47,   13,   73,   74,   16,   73,   74,
 /*   110 */    33,   34,   35,   36,   37,   38,   39,    1,   83,   87,
 /*   120 */    88,   15,   87,   88,   73,   74,   49,   50,   51,   52,
 /*   130 */    53,   54,   55,   56,   57,   58,   59,   60,   87,   88,
 /*   140 */    30,   24,   32,   26,   73,   74,   73,   74,   32,   33,
 /*   150 */    34,   35,   36,   37,   38,   39,    1,   14,   87,   88,
 /*   160 */    87,   88,   14,   73,   74,   49,   50,   51,   52,   53,
 /*   170 */    54,   55,   56,   57,   58,   59,   60,   87,   88,   31,
 /*   180 */    31,   30,   89,   90,   97,   98,   43,   32,   33,   34,
 /*   190 */    35,   36,   37,   38,   39,    1,    4,   46,   69,   76,
 /*   200 */    71,   64,   65,   80,   49,   50,   51,   52,   53,   54,
 /*   210 */    55,   56,   57,   58,   59,   60,   24,   32,   93,   15,
 /*   220 */    26,   14,    3,   31,   70,   73,   74,   33,   34,   35,
 /*   230 */    36,   37,   38,   39,    1,   83,   75,   14,   40,   87,
 /*   240 */    88,   31,   81,   49,   50,   51,   52,   53,   54,   55,
 /*   250 */    56,   57,   58,   59,   60,   14,   43,   24,   75,   75,
 /*   260 */    81,   20,   16,   19,   81,   81,   33,   34,   35,   36,
 /*   270 */    37,   38,   39,    1,   30,   75,    4,   29,   21,    4,
 /*   280 */    15,   81,   49,   50,   51,   52,   53,   54,   55,   56,
 /*   290 */    57,   58,   59,   60,   16,   93,    2,   94,   77,    1,
 /*   300 */    24,   24,   72,   73,   74,   33,   34,   35,   36,   37,
 /*   310 */    38,   39,   82,   83,   78,   77,   92,   87,   88,   24,
 /*   320 */    78,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*   330 */    58,   59,   60,    1,   78,   98,   99,   79,   78,   72,
 /*   340 */    73,   74,   72,   73,   74,   99,   80,   78,   80,   82,
 /*   350 */    83,   19,   82,   83,   87,   88,   99,   87,   88,   78,
 /*   360 */    99,   91,   95,   96,   99,   33,   34,   35,   36,   37,
 /*   370 */    38,   39,    1,   99,   99,   99,   99,   99,   99,   99,
 /*   380 */    99,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*   390 */    58,   59,   60,   75,   99,   99,   25,   99,   99,   81,
 /*   400 */    99,   99,   99,   99,   33,   34,   35,   36,   37,   38,
 /*   410 */    39,    1,   99,   99,    4,   99,   99,   99,   99,   99,
 /*   420 */    49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
 /*   430 */    59,   60,   99,   99,   99,    6,   99,   99,   99,   99,
 /*   440 */    99,   99,   13,   33,   34,   35,   36,   37,   38,   39,
 /*   450 */     1,   99,   99,   99,   99,   99,   99,   99,   99,   49,
 /*   460 */    50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
 /*   470 */    60,   99,   99,   99,   99,   99,   99,   99,   99,   99,
 /*   480 */    99,   99,   33,   34,   35,   36,   37,   38,   39,    1,
 /*   490 */    61,   62,   99,   99,   99,   46,   99,   99,   49,   50,
 /*   500 */    51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
 /*   510 */     6,   99,   99,   99,   99,   99,   99,   13,   72,   73,
 /*   520 */    74,   33,   34,   35,   36,   37,   38,   39,   82,   83,
 /*   530 */    99,   99,   99,   87,   88,   99,   99,   49,   50,   51,
 /*   540 */    52,   53,   54,   55,   56,   57,   58,   59,   60,   99,
 /*   550 */    99,   99,   99,   99,   99,   33,   34,   35,   36,   37,
 /*   560 */    38,   39,   99,   99,   99,   61,   62,   99,   99,   99,
 /*   570 */    99,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*   580 */    58,   59,   60,   99,   99,   99,   99,   15,   16,   99,
 /*   590 */    99,   99,   99,   15,   16,   99,   99,   99,   99,   27,
 /*   600 */    99,   29,   99,   31,   99,   99,   34,   29,   99,   31,
 /*   610 */    99,   99,   34,   41,   42,   99,   44,   45,   99,   41,
 /*   620 */    42,   99,   44,   45,   99,   99,   99,   99,   15,   16,
 /*   630 */    72,   73,   74,   61,   99,   99,   99,   99,   99,   61,
 /*   640 */    82,   83,   29,   99,   31,   87,   88,   34,   99,   15,
 /*   650 */    16,   72,   73,   74,   41,   42,   99,   44,   45,   99,
 /*   660 */    99,   82,   83,   29,   99,   31,   87,   88,   34,   99,
 /*   670 */    15,   16,   99,   99,   61,   41,   42,   99,   44,   45,
 /*   680 */    99,   99,   99,   99,   29,   99,   31,   99,   99,   34,
 /*   690 */    72,   73,   74,   99,   99,   61,   41,   42,   99,   44,
 /*   700 */    82,   83,   72,   73,   74,   87,   88,   99,   99,   91,
 /*   710 */    99,   99,   82,   83,   99,   99,   61,   87,   88,   72,
 /*   720 */    73,   74,   72,   73,   74,   99,   96,   99,   99,   82,
 /*   730 */    83,   99,   82,   83,   87,   88,   99,   87,   88,   72,
 /*   740 */    73,   74,   99,   99,   99,   99,   99,   99,   99,   82,
 /*   750 */    83,   72,   73,   74,   87,   88,   99,   99,   99,   99,
 /*   760 */    99,   82,   83,   72,   73,   74,   87,   88,   99,   99,
 /*   770 */    72,   73,   74,   82,   83,   99,   99,   99,   87,   88,
 /*   780 */    82,   83,   72,   73,   74,   87,   88,   99,   99,   72,
 /*   790 */    73,   74,   82,   83,   99,   99,   99,   87,   88,   82,
 /*   800 */    83,   99,   99,   99,   87,   88,   72,   73,   74,   99,
 /*   810 */    99,   99,   99,   72,   73,   74,   82,   83,   99,   99,
 /*   820 */    99,   87,   88,   82,   83,   72,   73,   74,   87,   88,
 /*   830 */    99,   99,   99,   99,   99,   82,   83,   72,   73,   74,
 /*   840 */    87,   88,   99,   99,   72,   73,   74,   82,   83,   99,
 /*   850 */    99,   99,   87,   88,   82,   83,   72,   73,   74,   87,
 /*   860 */    88,   99,   99,   72,   73,   74,   82,   83,   99,   99,
 /*   870 */    99,   87,   88,   82,   83,   99,   99,   99,   87,   88,
 /*   880 */    72,   73,   74,   99,   99,   99,   99,   72,   73,   74,
 /*   890 */    82,   83,   99,   99,   99,   87,   88,   82,   83,   72,
 /*   900 */    73,   74,   87,   88,   99,   99,   99,   99,   99,   82,
 /*   910 */    83,   72,   73,   74,   87,   88,   99,   99,   72,   73,
 /*   920 */    74,   82,   83,   99,   99,   99,   87,   88,   82,   83,
 /*   930 */    72,   73,   74,   87,   88,   99,   99,   99,   99,   99,
 /*   940 */    82,   83,   75,   99,   99,   87,   88,   99,   81,   99,
 /*   950 */    99,   84,   85,   86,   75,   99,   99,   99,   99,   92,
 /*   960 */    81,   99,   99,   84,   85,   86,   99,   99,   99,   99,
 /*   970 */    99,   92,
);
    const YY_SHIFT_USE_DFLT = -14;
    const YY_SHIFT_MAX = 138;
    static public $yy_shift_ofst = array(
 /*     0 */   219,  613,  613,  613,  613,  572,  613,  613,  613,  613,
 /*    10 */   613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
 /*    20 */   613,  613,  613,  578,  613,  613,  613,  578,  613,  613,
 /*    30 */   613,   -1,  233,  634,  634,  371,  116,  449,  272,   77,
 /*    40 */   332,  410,  194,  155,   38,  488,  488,  488,  488,  488,
 /*    50 */   488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
 /*    60 */   522,   -4,  655,  655,  655,  655,  655,  655,   -4,   56,
 /*    70 */   504,   17,   -2,  192,   54,  117,  277,  295,  277,  429,
 /*    80 */   241,   54,   54,   52,   52,   91,   52,   52,   52,   52,
 /*    90 */   276,  294,  277,  276,  298,  277,  277,  277,  294,  277,
 /*   100 */   277,  277,  -14,  -14,  -14,   31,  151,  110,  -10,   82,
 /*   110 */    -8,  148,  143,  244,  207,  149,  -13,   84,  106,  185,
 /*   120 */   204,  278,  275,  -13,  -13,  265,  -13,  -13,  -13,  246,
 /*   130 */   257,  198,  -13,  223,  213,  -13,  210,  248,  -13,
);
    const YY_REDUCE_USE_DFLT = -75;
    const YY_REDUCE_MAX = 104;
    static public $yy_reduce_ofst = array(
 /*     0 */   137,  267,  270,  618,  630,  717,  710,  698,  734,  741,
 /*    10 */   765,  753,  691,  679,  558,  446,  230,  579,  647,  784,
 /*    20 */   667,  650,  772,  858,  846,  827,  839,  791,  -57,  808,
 /*    30 */   815,  867,  879,  152,   35,  -74,  -74,  -74,  -74,  -74,
 /*    40 */   -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,
 /*    50 */   -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,
 /*    60 */   -74,   -5,   51,   32,   90,   -7,   71,   73,   15,   93,
 /*    70 */    87,  129,   93,  161,  123,  318,  184,  183,  200,  237,
 /*    80 */   258,  268,  266,  281,  269,  269,  260,  256,  242,  236,
 /*    90 */   221,  203,  179,  238,  224,  179,  179,  179,  203,  179,
 /*   100 */   179,  179,  154,  125,  202,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(3, ),
        /* 1 */ array(15, 16, 29, 31, 34, 41, 42, 44, 45, 61, ),
        /* 2 */ array(15, 16, 29, 31, 34, 41, 42, 44, 45, 61, ),
        /* 3 */ array(15, 16, 29, 31, 34, 41, 42, 44, 45, 61, ),
        /* 4 */ array(15, 16, 29, 31, 34, 41, 42, 44, 45, 61, ),
        /* 5 */ array(15, 16, 27, 29, 31, 34, 41, 42, 44, 45, 61, ),
        /* 6 */ array(15, 16, 29, 31, 34, 41, 42, 44, 45, 61, ),
        /* 7 */ array(15, 16, 29, 31, 34, 41, 42, 44, 45, 61, ),
        /* 8 */ array(15, 16, 29, 31, 34, 41, 42, 44, 45, 61, ),
        /* 9 */ array(15, 16, 29, 31, 34, 41, 42, 44, 45, 61, ),
        /* 10 */ array(15, 16, 29, 31, 34, 41, 42, 44, 45, 61, ),
        /* 11 */ array(15, 16, 29, 31, 34, 41, 42, 44, 45, 61, ),
        /* 12 */ array(15, 16, 29, 31, 34, 41, 42, 44, 45, 61, ),
        /* 13 */ array(15, 16, 29, 31, 34, 41, 42, 44, 45, 61, ),
        /* 14 */ array(15, 16, 29, 31, 34, 41, 42, 44, 45, 61, ),
        /* 15 */ array(15, 16, 29, 31, 34, 41, 42, 44, 45, 61, ),
        /* 16 */ array(15, 16, 29, 31, 34, 41, 42, 44, 45, 61, ),
        /* 17 */ array(15, 16, 29, 31, 34, 41, 42, 44, 45, 61, ),
        /* 18 */ array(15, 16, 29, 31, 34, 41, 42, 44, 45, 61, ),
        /* 19 */ array(15, 16, 29, 31, 34, 41, 42, 44, 45, 61, ),
        /* 20 */ array(15, 16, 29, 31, 34, 41, 42, 44, 45, 61, ),
        /* 21 */ array(15, 16, 29, 31, 34, 41, 42, 44, 45, 61, ),
        /* 22 */ array(15, 16, 29, 31, 34, 41, 42, 44, 45, 61, ),
        /* 23 */ array(15, 16, 29, 31, 34, 41, 42, 44, 45, 61, ),
        /* 24 */ array(15, 16, 29, 31, 34, 41, 42, 44, 45, 61, ),
        /* 25 */ array(15, 16, 29, 31, 34, 41, 42, 44, 45, 61, ),
        /* 26 */ array(15, 16, 29, 31, 34, 41, 42, 44, 45, 61, ),
        /* 27 */ array(15, 16, 29, 31, 34, 41, 42, 44, 45, 61, ),
        /* 28 */ array(15, 16, 29, 31, 34, 41, 42, 44, 45, 61, ),
        /* 29 */ array(15, 16, 29, 31, 34, 41, 42, 44, 45, 61, ),
        /* 30 */ array(15, 16, 29, 31, 34, 41, 42, 44, 45, 61, ),
        /* 31 */ array(1, 22, 24, 33, 34, 35, 36, 37, 38, 39, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 32 */ array(1, 24, 33, 34, 35, 36, 37, 38, 39, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 33 */ array(15, 16, 29, 31, 34, 41, 42, 44, 45, 61, ),
        /* 34 */ array(15, 16, 29, 31, 34, 41, 42, 44, 45, 61, ),
        /* 35 */ array(1, 25, 33, 34, 35, 36, 37, 38, 39, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 36 */ array(1, 32, 33, 34, 35, 36, 37, 38, 39, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 37 */ array(1, 33, 34, 35, 36, 37, 38, 39, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 38 */ array(1, 4, 33, 34, 35, 36, 37, 38, 39, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 39 */ array(1, 2, 33, 34, 35, 36, 37, 38, 39, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 40 */ array(1, 19, 33, 34, 35, 36, 37, 38, 39, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 41 */ array(1, 4, 33, 34, 35, 36, 37, 38, 39, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 42 */ array(1, 26, 33, 34, 35, 36, 37, 38, 39, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 43 */ array(1, 32, 33, 34, 35, 36, 37, 38, 39, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 44 */ array(1, 4, 33, 34, 35, 36, 37, 38, 39, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 45 */ array(1, 33, 34, 35, 36, 37, 38, 39, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 46 */ array(1, 33, 34, 35, 36, 37, 38, 39, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 47 */ array(1, 33, 34, 35, 36, 37, 38, 39, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 48 */ array(1, 33, 34, 35, 36, 37, 38, 39, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 49 */ array(1, 33, 34, 35, 36, 37, 38, 39, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 50 */ array(1, 33, 34, 35, 36, 37, 38, 39, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 51 */ array(1, 33, 34, 35, 36, 37, 38, 39, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 52 */ array(1, 33, 34, 35, 36, 37, 38, 39, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 53 */ array(1, 33, 34, 35, 36, 37, 38, 39, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 54 */ array(1, 33, 34, 35, 36, 37, 38, 39, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 55 */ array(1, 33, 34, 35, 36, 37, 38, 39, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 56 */ array(1, 33, 34, 35, 36, 37, 38, 39, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 57 */ array(1, 33, 34, 35, 36, 37, 38, 39, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 58 */ array(1, 33, 34, 35, 36, 37, 38, 39, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 59 */ array(1, 33, 34, 35, 36, 37, 38, 39, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 60 */ array(33, 34, 35, 36, 37, 38, 39, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 61 */ array(5, 6, 7, 8, 9, 10, 13, 17, 18, 23, 28, ),
        /* 62 */ array(15, 16, 29, 31, 34, 41, 42, 44, 61, ),
        /* 63 */ array(15, 16, 29, 31, 34, 41, 42, 44, 61, ),
        /* 64 */ array(15, 16, 29, 31, 34, 41, 42, 44, 61, ),
        /* 65 */ array(15, 16, 29, 31, 34, 41, 42, 44, 61, ),
        /* 66 */ array(15, 16, 29, 31, 34, 41, 42, 44, 61, ),
        /* 67 */ array(15, 16, 29, 31, 34, 41, 42, 44, 61, ),
        /* 68 */ array(5, 6, 7, 8, 9, 10, 13, 17, 18, 23, 28, ),
        /* 69 */ array(14, 43, 45, 47, ),
        /* 70 */ array(6, 13, 61, 62, ),
        /* 71 */ array(10, 11, 12, ),
        /* 72 */ array(43, 45, 47, ),
        /* 73 */ array(4, 24, 31, ),
        /* 74 */ array(15, 31, ),
        /* 75 */ array(24, 26, ),
        /* 76 */ array(24, ),
        /* 77 */ array(24, ),
        /* 78 */ array(24, ),
        /* 79 */ array(6, 13, 61, 62, ),
        /* 80 */ array(14, 20, ),
        /* 81 */ array(15, 31, ),
        /* 82 */ array(15, 31, ),
        /* 83 */ array(13, 16, ),
        /* 84 */ array(13, 16, ),
        /* 85 */ array(13, 16, ),
        /* 86 */ array(13, 16, ),
        /* 87 */ array(13, 16, ),
        /* 88 */ array(13, 16, ),
        /* 89 */ array(13, 16, ),
        /* 90 */ array(24, ),
        /* 91 */ array(2, ),
        /* 92 */ array(24, ),
        /* 93 */ array(24, ),
        /* 94 */ array(1, ),
        /* 95 */ array(24, ),
        /* 96 */ array(24, ),
        /* 97 */ array(24, ),
        /* 98 */ array(2, ),
        /* 99 */ array(24, ),
        /* 100 */ array(24, ),
        /* 101 */ array(24, ),
        /* 102 */ array(),
        /* 103 */ array(),
        /* 104 */ array(),
        /* 105 */ array(13, 15, 16, 29, ),
        /* 106 */ array(30, 46, ),
        /* 107 */ array(30, 32, ),
        /* 108 */ array(30, 32, ),
        /* 109 */ array(4, 20, ),
        /* 110 */ array(16, 48, ),
        /* 111 */ array(14, 31, ),
        /* 112 */ array(14, 43, ),
        /* 113 */ array(19, 30, ),
        /* 114 */ array(14, ),
        /* 115 */ array(31, ),
        /* 116 */ array(20, ),
        /* 117 */ array(16, ),
        /* 118 */ array(15, ),
        /* 119 */ array(32, ),
        /* 120 */ array(15, ),
        /* 121 */ array(16, ),
        /* 122 */ array(4, ),
        /* 123 */ array(20, ),
        /* 124 */ array(20, ),
        /* 125 */ array(15, ),
        /* 126 */ array(20, ),
        /* 127 */ array(20, ),
        /* 128 */ array(20, ),
        /* 129 */ array(16, ),
        /* 130 */ array(21, ),
        /* 131 */ array(40, ),
        /* 132 */ array(20, ),
        /* 133 */ array(14, ),
        /* 134 */ array(43, ),
        /* 135 */ array(20, ),
        /* 136 */ array(31, ),
        /* 137 */ array(29, ),
        /* 138 */ array(20, ),
        /* 139 */ array(),
        /* 140 */ array(),
        /* 141 */ array(),
        /* 142 */ array(),
        /* 143 */ array(),
        /* 144 */ array(),
        /* 145 */ array(),
        /* 146 */ array(),
        /* 147 */ array(),
        /* 148 */ array(),
        /* 149 */ array(),
        /* 150 */ array(),
        /* 151 */ array(),
        /* 152 */ array(),
        /* 153 */ array(),
        /* 154 */ array(),
        /* 155 */ array(),
        /* 156 */ array(),
        /* 157 */ array(),
        /* 158 */ array(),
        /* 159 */ array(),
        /* 160 */ array(),
        /* 161 */ array(),
        /* 162 */ array(),
        /* 163 */ array(),
        /* 164 */ array(),
        /* 165 */ array(),
        /* 166 */ array(),
        /* 167 */ array(),
        /* 168 */ array(),
        /* 169 */ array(),
        /* 170 */ array(),
        /* 171 */ array(),
        /* 172 */ array(),
        /* 173 */ array(),
        /* 174 */ array(),
        /* 175 */ array(),
        /* 176 */ array(),
        /* 177 */ array(),
        /* 178 */ array(),
        /* 179 */ array(),
        /* 180 */ array(),
        /* 181 */ array(),
        /* 182 */ array(),
        /* 183 */ array(),
        /* 184 */ array(),
        /* 185 */ array(),
        /* 186 */ array(),
        /* 187 */ array(),
        /* 188 */ array(),
        /* 189 */ array(),
        /* 190 */ array(),
        /* 191 */ array(),
        /* 192 */ array(),
        /* 193 */ array(),
        /* 194 */ array(),
        /* 195 */ array(),
        /* 196 */ array(),
        /* 197 */ array(),
        /* 198 */ array(),
        /* 199 */ array(),
        /* 200 */ array(),
        /* 201 */ array(),
        /* 202 */ array(),
        /* 203 */ array(),
        /* 204 */ array(),
        /* 205 */ array(),
        /* 206 */ array(),
        /* 207 */ array(),
        /* 208 */ array(),
        /* 209 */ array(),
);
    static public $yy_default = array(
 /*     0 */   212,  320,  296,  296,  332,  332,  332,  332,  332,  332,
 /*    10 */   332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
 /*    20 */   332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
 /*    30 */   332,  244,  244,  332,  332,  249,  332,  332,  332,  332,
 /*    40 */   332,  332,  322,  332,  332,  261,  252,  229,  231,  233,
 /*    50 */   265,  228,  249,  295,  247,  264,  248,  321,  235,  294,
 /*    60 */   268,  215,  332,  332,  332,  332,  332,  332,  210,  269,
 /*    70 */   332,  332,  269,  276,  332,  244,  244,  244,  244,  332,
 /*    80 */   332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
 /*    90 */   331,  297,  232,  331,  260,  238,  239,  237,  298,  241,
 /*   100 */   240,  234,  225,  302,  302,  332,  332,  332,  332,  254,
 /*   110 */   332,  276,  274,  332,  289,  291,  256,  332,  332,  332,
 /*   120 */   332,  332,  332,  303,  257,  332,  271,  270,  263,  332,
 /*   130 */   250,  278,  272,  332,  274,  258,  276,  332,  254,  242,
 /*   140 */   213,  246,  243,  211,  214,  221,  251,  330,  236,  222,
 /*   150 */   219,  216,  217,  218,  253,  220,  290,  305,  306,  300,
 /*   160 */   299,  267,  307,  308,  312,  313,  311,  310,  309,  266,
 /*   170 */   255,  280,  281,  279,  301,  277,  304,  262,  327,  325,
 /*   180 */   324,  323,  314,  315,  286,  273,  285,  275,  282,  287,
 /*   190 */   288,  245,  224,  226,  227,  292,  293,  278,  284,  328,
 /*   200 */   289,  259,  316,  329,  326,  319,  318,  283,  317,  223,
);
    const YYNOCODE = 100;
    const YYSTACKDEPTH = 500;
    const YYNSTATE = 210;
    const YYNRULE = 122;
    const YYERRORSYMBOL = 63;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    public static $yyFallback = array(
    );

    public $yyidx;                    /* Index of top element in stack */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    public $yystack = array();  /* The parser's stack */

    public $yyTokenName = array(
  '$',             'VERT',          'COLON',         'SETSTRICT',   
  'RDEL',          'COMMENT',       'TEXT',          'STRIPON',     
  'STRIPOFF',      'BLOCKSOURCE',   'LITERALSTART',  'LITERALEND',  
  'LITERAL',       'LDEL',          'EQUAL',         'DOLLAR',      
  'ID',            'LDELIF',        'LDELFOR',       'SEMICOLON',   
  'INCDEC',        'TO',            'STEP',          'LDELFOREACH', 
  'SPACE',         'AS',            'APTR',          'SMARTYBLOCKCHILDPARENT',
  'LDELSLASH',     'INTEGER',       'COMMA',         'OPENP',       
  'CLOSEP',        'MATH',          'UNIMATH',       'ANDSYM',      
  'ISIN',          'ISDIVBY',       'ISEVEN',        'ISODD',       
  'QMARK',         'NOT',           'TYPECAST',      'DOT',         
  'SINGLEQUOTESTRING',  'OPENB',         'CLOSEB',        'PTR',         
  'AT',            'EQUALS',        'NOTEQUALS',     'GREATERTHAN', 
  'LESSTHAN',      'GREATEREQUAL',  'LESSEQUAL',     'IDENTITY',    
  'NONEIDENTITY',  'MOD',           'LAND',          'LOR',         
  'LXOR',          'QUOTE',         'DOLLARID',      'error',       
  'start',         'strictmode',    'template',      'template_element',
  'smartytag',     'literal',       'literal_elements',  'literal_element',
  'expr',          'variable',      'value',         'attributes',  
  'statements',    'optspace',      'varvar',        'foraction',   
  'statement',     'attribute',     'ternary',       'array',       
  'modifierlist',  'ifcond',        'lop',           'function',    
  'doublequoted_with_quotes',  'indexdef',      'objectelement',  'params',      
  'modifier',      'modparameters',  'modparameter',  'arrayelements',
  'arrayelement',  'doublequoted',  'doublequotedcontent',
    );

    public static $yyRuleName = array(
 /*   0 */ "start ::= strictmode template",
 /*   1 */ "strictmode ::= SETSTRICT",
 /*   2 */ "strictmode ::=",
 /*   3 */ "template ::= template_element",
 /*   4 */ "template ::= template template_element",
 /*   5 */ "template ::=",
 /*   6 */ "template_element ::= smartytag RDEL",
 /*   7 */ "template_element ::= COMMENT",
 /*   8 */ "template_element ::= literal",
 /*   9 */ "template_element ::= TEXT",
 /*  10 */ "template_element ::= STRIPON",
 /*  11 */ "template_element ::= STRIPOFF",
 /*  12 */ "template_element ::= BLOCKSOURCE",
 /*  13 */ "literal ::= LITERALSTART literal_elements LITERALEND",
 /*  14 */ "literal_elements ::= literal_elements literal_element",
 /*  15 */ "literal_elements ::=",
 /*  16 */ "literal_element ::= literal",
 /*  17 */ "literal_element ::= LITERAL",
 /*  18 */ "smartytag ::= LDEL expr",
 /*  19 */ "smartytag ::= LDEL variable EQUAL expr",
 /*  20 */ "smartytag ::= LDEL DOLLAR ID EQUAL value",
 /*  21 */ "smartytag ::= LDEL DOLLAR ID EQUAL expr",
 /*  22 */ "smartytag ::= LDEL ID attributes",
 /*  23 */ "smartytag ::= LDELIF expr",
 /*  24 */ "smartytag ::= LDELFOR statements SEMICOLON optspace expr SEMICOLON optspace DOLLAR varvar foraction attributes",
 /*  25 */ "foraction ::= EQUAL expr",
 /*  26 */ "foraction ::= INCDEC",
 /*  27 */ "smartytag ::= LDELFOR statement TO expr attributes",
 /*  28 */ "smartytag ::= LDELFOR statement TO expr STEP expr attributes",
 /*  29 */ "smartytag ::= LDELFOREACH attributes",
 /*  30 */ "smartytag ::= LDELFOREACH SPACE expr AS DOLLAR varvar attributes",
 /*  31 */ "smartytag ::= LDELFOREACH SPACE expr AS DOLLAR varvar APTR DOLLAR varvar attributes",
 /*  32 */ "smartytag ::= LDEL SMARTYBLOCKCHILDPARENT",
 /*  33 */ "smartytag ::= LDELSLASH ID",
 /*  34 */ "attributes ::=",
 /*  35 */ "attributes ::= attributes attribute",
 /*  36 */ "attributes ::= attribute",
 /*  37 */ "attribute ::= SPACE ID EQUAL expr",
 /*  38 */ "attribute ::= SPACE INTEGER EQUAL expr",
 /*  39 */ "attribute ::= SPACE expr",
 /*  40 */ "statements ::= statement",
 /*  41 */ "statements ::= statements COMMA statement",
 /*  42 */ "statement ::= DOLLAR varvar EQUAL expr",
 /*  43 */ "statement ::= OPENP statement CLOSEP",
 /*  44 */ "expr ::= value",
 /*  45 */ "expr ::= ternary",
 /*  46 */ "expr ::= expr MATH value",
 /*  47 */ "expr ::= expr UNIMATH value",
 /*  48 */ "expr ::= expr ANDSYM value",
 /*  49 */ "expr ::= array",
 /*  50 */ "expr ::= expr modifierlist",
 /*  51 */ "expr ::= expr ifcond expr",
 /*  52 */ "expr ::= expr ISIN array",
 /*  53 */ "expr ::= expr ISIN value",
 /*  54 */ "expr ::= expr lop expr",
 /*  55 */ "expr ::= expr ISDIVBY expr",
 /*  56 */ "expr ::= expr ISEVEN",
 /*  57 */ "expr ::= expr ISODD",
 /*  58 */ "ternary ::= OPENP expr CLOSEP QMARK expr COLON expr",
 /*  59 */ "value ::= variable",
 /*  60 */ "value ::= UNIMATH value",
 /*  61 */ "value ::= NOT value",
 /*  62 */ "value ::= TYPECAST value",
 /*  63 */ "value ::= value INCDEC",
 /*  64 */ "value ::= INTEGER",
 /*  65 */ "value ::= INTEGER DOT INTEGER",
 /*  66 */ "value ::= ID",
 /*  67 */ "value ::= function",
 /*  68 */ "value ::= OPENP expr CLOSEP",
 /*  69 */ "value ::= SINGLEQUOTESTRING",
 /*  70 */ "value ::= doublequoted_with_quotes",
 /*  71 */ "variable ::= DOLLAR varvar",
 /*  72 */ "variable ::= variable indexdef",
 /*  73 */ "variable ::= variable objectelement",
 /*  74 */ "indexdef ::= DOT DOLLAR varvar",
 /*  75 */ "indexdef ::= DOT ID",
 /*  76 */ "indexdef ::= DOT INTEGER",
 /*  77 */ "indexdef ::= DOT LDEL expr RDEL",
 /*  78 */ "indexdef ::= OPENB expr CLOSEB",
 /*  79 */ "varvar ::= ID",
 /*  80 */ "varvar ::= LDEL expr RDEL",
 /*  81 */ "objectelement ::= PTR ID",
 /*  82 */ "objectelement ::= PTR ID OPENP params CLOSEP",
 /*  83 */ "function ::= ID OPENP params CLOSEP",
 /*  84 */ "params ::= params COMMA expr",
 /*  85 */ "params ::= expr",
 /*  86 */ "params ::=",
 /*  87 */ "modifierlist ::= modifierlist modifier modparameters",
 /*  88 */ "modifierlist ::= modifier modparameters",
 /*  89 */ "modifier ::= VERT AT ID",
 /*  90 */ "modifier ::= VERT ID",
 /*  91 */ "modparameters ::= modparameters modparameter",
 /*  92 */ "modparameters ::=",
 /*  93 */ "modparameter ::= COLON value",
 /*  94 */ "modparameter ::= COLON array",
 /*  95 */ "ifcond ::= EQUALS",
 /*  96 */ "ifcond ::= NOTEQUALS",
 /*  97 */ "ifcond ::= GREATERTHAN",
 /*  98 */ "ifcond ::= LESSTHAN",
 /*  99 */ "ifcond ::= GREATEREQUAL",
 /* 100 */ "ifcond ::= LESSEQUAL",
 /* 101 */ "ifcond ::= IDENTITY",
 /* 102 */ "ifcond ::= NONEIDENTITY",
 /* 103 */ "ifcond ::= MOD",
 /* 104 */ "lop ::= LAND",
 /* 105 */ "lop ::= LOR",
 /* 106 */ "lop ::= LXOR",
 /* 107 */ "array ::= OPENB arrayelements CLOSEB",
 /* 108 */ "arrayelements ::= arrayelements COMMA arrayelement",
 /* 109 */ "arrayelements ::= arrayelement",
 /* 110 */ "arrayelements ::=",
 /* 111 */ "arrayelement ::= expr APTR expr",
 /* 112 */ "arrayelement ::= expr",
 /* 113 */ "doublequoted_with_quotes ::= QUOTE QUOTE",
 /* 114 */ "doublequoted_with_quotes ::= QUOTE doublequoted QUOTE",
 /* 115 */ "doublequoted ::= doublequoted doublequotedcontent",
 /* 116 */ "doublequoted ::= doublequotedcontent",
 /* 117 */ "doublequotedcontent ::= DOLLARID",
 /* 118 */ "doublequotedcontent ::= LDEL expr RDEL",
 /* 119 */ "doublequotedcontent ::= TEXT",
 /* 120 */ "optspace ::= SPACE",
 /* 121 */ "optspace ::=",
    );

    public function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count($this->yyTokenName)) {
            return $this->yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    public static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    public function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;

        return $yymajor;
    }

    public function __destruct()
    {
        while ($this->yystack !== Array()) {
            $this->yy_pop_parser_stack();
        }
    }

    public function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                $expected = array_merge($expected, self::$yyExpectedTokens[$nextstate]);
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;

                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new TP_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
    $this->yyidx = $yyidx;
    $this->yystack = $stack;

        return array_unique($expected);
    }

    public function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;

                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new TP_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token && $token !== '0') {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;

        return true;
    }

   public function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;

        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {

                return $this->yy_find_shift_action($iFallback);
            }

            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    public function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    public function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
#line 125 "Parser.y"

    $this->internalError = true;
    $this->compiler->trigger_template_error("Stack overflow in template parser");
#line 1065 "Parser.php"

            return;
        }
        $yytos = new TP_yyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
    }

    public static $yyRuleInfo = array(
  array( 'lhs' => 64, 'rhs' => 2 ),
  array( 'lhs' => 65, 'rhs' => 1 ),
  array( 'lhs' => 65, 'rhs' => 0 ),
  array( 'lhs' => 66, 'rhs' => 1 ),
  array( 'lhs' => 66, 'rhs' => 2 ),
  array( 'lhs' => 66, 'rhs' => 0 ),
  array( 'lhs' => 67, 'rhs' => 2 ),
  array( 'lhs' => 67, 'rhs' => 1 ),
  array( 'lhs' => 67, 'rhs' => 1 ),
  array( 'lhs' => 67, 'rhs' => 1 ),
  array( 'lhs' => 67, 'rhs' => 1 ),
  array( 'lhs' => 67, 'rhs' => 1 ),
  array( 'lhs' => 67, 'rhs' => 1 ),
  array( 'lhs' => 69, 'rhs' => 3 ),
  array( 'lhs' => 70, 'rhs' => 2 ),
  array( 'lhs' => 70, 'rhs' => 0 ),
  array( 'lhs' => 71, 'rhs' => 1 ),
  array( 'lhs' => 71, 'rhs' => 1 ),
  array( 'lhs' => 68, 'rhs' => 2 ),
  array( 'lhs' => 68, 'rhs' => 4 ),
  array( 'lhs' => 68, 'rhs' => 5 ),
  array( 'lhs' => 68, 'rhs' => 5 ),
  array( 'lhs' => 68, 'rhs' => 3 ),
  array( 'lhs' => 68, 'rhs' => 2 ),
  array( 'lhs' => 68, 'rhs' => 11 ),
  array( 'lhs' => 79, 'rhs' => 2 ),
  array( 'lhs' => 79, 'rhs' => 1 ),
  array( 'lhs' => 68, 'rhs' => 5 ),
  array( 'lhs' => 68, 'rhs' => 7 ),
  array( 'lhs' => 68, 'rhs' => 2 ),
  array( 'lhs' => 68, 'rhs' => 7 ),
  array( 'lhs' => 68, 'rhs' => 10 ),
  array( 'lhs' => 68, 'rhs' => 2 ),
  array( 'lhs' => 68, 'rhs' => 2 ),
  array( 'lhs' => 75, 'rhs' => 0 ),
  array( 'lhs' => 75, 'rhs' => 2 ),
  array( 'lhs' => 75, 'rhs' => 1 ),
  array( 'lhs' => 81, 'rhs' => 4 ),
  array( 'lhs' => 81, 'rhs' => 4 ),
  array( 'lhs' => 81, 'rhs' => 2 ),
  array( 'lhs' => 76, 'rhs' => 1 ),
  array( 'lhs' => 76, 'rhs' => 3 ),
  array( 'lhs' => 80, 'rhs' => 4 ),
  array( 'lhs' => 80, 'rhs' => 3 ),
  array( 'lhs' => 72, 'rhs' => 1 ),
  array( 'lhs' => 72, 'rhs' => 1 ),
  array( 'lhs' => 72, 'rhs' => 3 ),
  array( 'lhs' => 72, 'rhs' => 3 ),
  array( 'lhs' => 72, 'rhs' => 3 ),
  array( 'lhs' => 72, 'rhs' => 1 ),
  array( 'lhs' => 72, 'rhs' => 2 ),
  array( 'lhs' => 72, 'rhs' => 3 ),
  array( 'lhs' => 72, 'rhs' => 3 ),
  array( 'lhs' => 72, 'rhs' => 3 ),
  array( 'lhs' => 72, 'rhs' => 3 ),
  array( 'lhs' => 72, 'rhs' => 3 ),
  array( 'lhs' => 72, 'rhs' => 2 ),
  array( 'lhs' => 72, 'rhs' => 2 ),
  array( 'lhs' => 82, 'rhs' => 7 ),
  array( 'lhs' => 74, 'rhs' => 1 ),
  array( 'lhs' => 74, 'rhs' => 2 ),
  array( 'lhs' => 74, 'rhs' => 2 ),
  array( 'lhs' => 74, 'rhs' => 2 ),
  array( 'lhs' => 74, 'rhs' => 2 ),
  array( 'lhs' => 74, 'rhs' => 1 ),
  array( 'lhs' => 74, 'rhs' => 3 ),
  array( 'lhs' => 74, 'rhs' => 1 ),
  array( 'lhs' => 74, 'rhs' => 1 ),
  array( 'lhs' => 74, 'rhs' => 3 ),
  array( 'lhs' => 74, 'rhs' => 1 ),
  array( 'lhs' => 74, 'rhs' => 1 ),
  array( 'lhs' => 73, 'rhs' => 2 ),
  array( 'lhs' => 73, 'rhs' => 2 ),
  array( 'lhs' => 73, 'rhs' => 2 ),
  array( 'lhs' => 89, 'rhs' => 3 ),
  array( 'lhs' => 89, 'rhs' => 2 ),
  array( 'lhs' => 89, 'rhs' => 2 ),
  array( 'lhs' => 89, 'rhs' => 4 ),
  array( 'lhs' => 89, 'rhs' => 3 ),
  array( 'lhs' => 78, 'rhs' => 1 ),
  array( 'lhs' => 78, 'rhs' => 3 ),
  array( 'lhs' => 90, 'rhs' => 2 ),
  array( 'lhs' => 90, 'rhs' => 5 ),
  array( 'lhs' => 87, 'rhs' => 4 ),
  array( 'lhs' => 91, 'rhs' => 3 ),
  array( 'lhs' => 91, 'rhs' => 1 ),
  array( 'lhs' => 91, 'rhs' => 0 ),
  array( 'lhs' => 84, 'rhs' => 3 ),
  array( 'lhs' => 84, 'rhs' => 2 ),
  array( 'lhs' => 92, 'rhs' => 3 ),
  array( 'lhs' => 92, 'rhs' => 2 ),
  array( 'lhs' => 93, 'rhs' => 2 ),
  array( 'lhs' => 93, 'rhs' => 0 ),
  array( 'lhs' => 94, 'rhs' => 2 ),
  array( 'lhs' => 94, 'rhs' => 2 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 86, 'rhs' => 1 ),
  array( 'lhs' => 86, 'rhs' => 1 ),
  array( 'lhs' => 86, 'rhs' => 1 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 95, 'rhs' => 3 ),
  array( 'lhs' => 95, 'rhs' => 1 ),
  array( 'lhs' => 95, 'rhs' => 0 ),
  array( 'lhs' => 96, 'rhs' => 3 ),
  array( 'lhs' => 96, 'rhs' => 1 ),
  array( 'lhs' => 88, 'rhs' => 2 ),
  array( 'lhs' => 88, 'rhs' => 3 ),
  array( 'lhs' => 97, 'rhs' => 2 ),
  array( 'lhs' => 97, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 3 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 77, 'rhs' => 1 ),
  array( 'lhs' => 77, 'rhs' => 0 ),
    );

    public static $yyReduceMap = array(
        0 => 0,
        1 => 1,
        2 => 2,
        15 => 2,
        121 => 2,
        3 => 3,
        4 => 3,
        6 => 6,
        7 => 7,
        8 => 8,
        9 => 9,
        10 => 10,
        11 => 11,
        12 => 12,
        13 => 13,
        43 => 13,
        78 => 13,
        14 => 14,
        62 => 14,
        63 => 14,
        73 => 14,
        16 => 16,
        17 => 16,
        26 => 16,
        39 => 16,
        44 => 16,
        45 => 16,
        49 => 16,
        59 => 16,
        67 => 16,
        76 => 16,
        109 => 16,
        112 => 16,
        120 => 16,
        18 => 18,
        19 => 19,
        20 => 20,
        21 => 20,
        22 => 22,
        23 => 23,
        24 => 24,
        25 => 25,
        27 => 27,
        28 => 28,
        29 => 29,
        30 => 30,
        31 => 31,
        32 => 32,
        33 => 33,
        34 => 34,
        86 => 34,
        92 => 34,
        35 => 35,
        36 => 36,
        40 => 36,
        85 => 36,
        93 => 36,
        94 => 36,
        37 => 37,
        38 => 37,
        41 => 41,
        42 => 42,
        46 => 46,
        47 => 46,
        48 => 46,
        50 => 50,
        51 => 51,
        52 => 52,
        53 => 53,
        54 => 54,
        55 => 55,
        56 => 56,
        57 => 57,
        58 => 58,
        60 => 60,
        61 => 61,
        64 => 64,
        69 => 64,
        70 => 64,
        65 => 65,
        66 => 66,
        68 => 68,
        71 => 71,
        72 => 72,
        74 => 74,
        75 => 75,
        77 => 77,
        79 => 79,
        80 => 80,
        81 => 81,
        82 => 82,
        83 => 83,
        84 => 84,
        87 => 87,
        88 => 88,
        89 => 89,
        90 => 90,
        91 => 91,
        95 => 95,
        96 => 96,
        97 => 97,
        98 => 98,
        99 => 99,
        100 => 100,
        101 => 101,
        102 => 102,
        103 => 103,
        104 => 104,
        105 => 105,
        106 => 106,
        107 => 107,
        108 => 108,
        110 => 110,
        111 => 111,
        113 => 113,
        114 => 114,
        115 => 115,
        116 => 116,
        117 => 117,
        118 => 118,
        119 => 119,
    );
#line 134 "Parser.y"
    function yy_r0(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor . $this->root_buffer->to_smarty_php();
    }
#line 1328 "Parser.php"
#line 138 "Parser.y"
    function yy_r1(){
    $this->strict_mode = true;
    $this->_retvalue = "/* strict mode */\n\$_smarty_tpl->strict_mode = true;\n";
    }
#line 1334 "Parser.php"
#line 142 "Parser.y"
    function yy_r2(){
    $this->_retvalue = '';
    }
#line 1339 "Parser.php"
#line 148 "Parser.y"
    function yy_r3(){
    if ($this->yystack[$this->yyidx + 0]->minor !== null) {
        $this->current_buffer->append_subtree($this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 1346 "Parser.php"
#line 165 "Parser.y"
    function yy_r6(){
    if ($this->compiler->has_code && !is_object($this->yystack[$this->yyidx + -1]->minor)) {
        $this->_retvalue = new Helpers\Tag((string) $this->yystack[$this->yyidx + -1]->minor);
    } elseif ($this->compiler->has_code) {
        $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    } else {
        $this->_retvalue = null;
    }
    $this->compiler->has_variable_string = false;
    $this->block_nesting_level = count($this->compiler->_tag_stack);
    }
#line 1359 "Parser.php"
#line 178 "Parser.y"
    function yy_r7(){
    $this->_retvalue = null;
    }
#line 1364 "Parser.php"
#line 183 "Parser.y"
    function yy_r8(){
    $this->_retvalue = new Helpers\Text($this->yystack[$this->yyidx + 0]->minor);
    }
#line 1369 "Parser.php"
#line 188 "Parser.y"
    function yy_r9(){
    if ($this->strip) {
        $this->_retvalue = new Helpers\Text(self::stripString($this->yystack[$this->yyidx + 0]->minor));
    } else {
        $this->_retvalue = new Helpers\Text($this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 1378 "Parser.php"
#line 197 "Parser.y"
    function yy_r10(){
    $this->strip++;
    }
#line 1383 "Parser.php"
#line 201 "Parser.y"
    function yy_r11(){
    if (!$this->strip) {
        $this->compiler->trigger_template_error('Unbalanced {strip} tags');
    }
    $this->strip--;
    }
#line 1391 "Parser.php"
#line 208 "Parser.y"
    function yy_r12(){
// if ($this->strip) {
    //     SMARTY_INTERNAL_COMPILE_BLOCK::blockSource($this->compiler, self::stripString($this->yystack[$this->yyidx + 0]->minor));
// } else {
    //     SMARTY_INTERNAL_COMPILE_BLOCK::blockSource($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
    // }
    }
#line 1400 "Parser.php"
#line 217 "Parser.y"
    function yy_r13(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 1405 "Parser.php"
#line 221 "Parser.y"
    function yy_r14(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor . $this->yystack[$this->yyidx + 0]->minor;
    }
#line 1410 "Parser.php"
#line 229 "Parser.y"
    function yy_r16(){
    $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 1415 "Parser.php"
#line 244 "Parser.y"
    function yy_r18(){
    $this->compiler->assert_no_enforced_modifiers($this->yystack[$this->yyidx + 0]->minor instanceof Wrappers\StaticWrapper);
    if ($this->yystack[$this->yyidx + 0]->minor instanceof Wrappers\StaticWrapper) {
        $this->yystack[$this->yyidx + 0]->minor = (string) $this->yystack[$this->yyidx + 0]->minor;
    }
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructPrintExpression::compileOpen(
        $this->compiler,
        array('value' => $this->yystack[$this->yyidx + 0]->minor, 'modifierlist' => array())
    );
    }
#line 1428 "Parser.php"
#line 260 "Parser.y"
    function yy_r19(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor . ' = (' . $this->yystack[$this->yyidx + 0]->minor . ');';
    }
#line 1433 "Parser.php"
#line 264 "Parser.y"
    function yy_r20(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructAssign::compileOpen(
        $this->compiler,
        array('value' => $this->yystack[$this->yyidx + 0]->minor, 'var' => "'" . $this->yystack[$this->yyidx + -2]->minor . "'")
    );
    }
#line 1442 "Parser.php"
#line 281 "Parser.y"
    function yy_r22(){
    $this->compiler->has_code = true;
    switch ($this->yystack[$this->yyidx + -1]->minor) {
        case 'assign':
            $this->_retvalue = Constructs\ConstructAssign::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'break':
            $this->_retvalue = Constructs\ConstructBreak::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'call':
            $this->_retvalue = Constructs\ConstructCall::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'capture':
            $this->_retvalue = Constructs\ConstructCapture::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'continue':
            $this->_retvalue = Constructs\ConstructContinue::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'else':
            $this->_retvalue = Constructs\ConstructElse::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'foreachelse':
            $this->_retvalue = Constructs\ConstructForEachElse::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'forelse':
            $this->_retvalue = Constructs\ConstructForElse::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'function':
            $this->_retvalue = Constructs\ConstructFunction::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'include':
            $this->_retvalue = Constructs\ConstructInclude::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'ldelim':
            $this->_retvalue = new Helpers\Text($this->compiler->smarty->left_delimiter);
            break;
        case 'rdelim':
            $this->_retvalue = new Helpers\Text($this->compiler->smarty->right_delimiter);
            break;
        default:
            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 1487 "Parser.php"
#line 327 "Parser.y"
    function yy_r23(){
    $tag = trim(substr($this->yystack[$this->yyidx + -1]->minor, $this->lex->ldel_length));
    $this->compiler->has_code = true;
    switch ($tag) {
        case 'if':
            $this->_retvalue = Constructs\ConstructIf::compileOpen($this->compiler, array('cond' => $this->yystack[$this->yyidx + 0]->minor));
            break;
        case 'elseif':
            $this->_retvalue = Constructs\ConstructElseIf::compileOpen($this->compiler, array('cond' => $this->yystack[$this->yyidx + 0]->minor));
            break;
        case 'while':
            $this->_retvalue = Constructs\ConstructWhile::compileOpen($this->compiler, array('cond' => $this->yystack[$this->yyidx + 0]->minor));
            break;
    }
    }
#line 1504 "Parser.php"
#line 343 "Parser.y"
    function yy_r24(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructFor::compileOpen(
        $this->compiler,
        array_merge(
            $this->yystack[$this->yyidx + 0]->minor,
            array(
                array('start' => $this->yystack[$this->yyidx + -9]->minor),
                array('ifexp' => $this->yystack[$this->yyidx + -6]->minor),
                array('var' => $this->yystack[$this->yyidx + -2]->minor),
                array('step' => $this->yystack[$this->yyidx + -1]->minor)
            )
        )
    );
    }
#line 1521 "Parser.php"
#line 359 "Parser.y"
    function yy_r25(){
    $this->_retvalue = '=' . $this->yystack[$this->yyidx + 0]->minor;
    }
#line 1526 "Parser.php"
#line 367 "Parser.y"
    function yy_r27(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructFor::compileOpen(
        $this->compiler,
        array_merge(
            $this->yystack[$this->yyidx + 0]->minor,
            array(array('start' => $this->yystack[$this->yyidx + -3]->minor), array('to' => $this->yystack[$this->yyidx + -1]->minor))
        )
    );
    }
#line 1538 "Parser.php"
#line 378 "Parser.y"
    function yy_r28(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructFor::compileOpen(
        $this->compiler,
        array_merge(
            $this->yystack[$this->yyidx + 0]->minor,
            array(array('start' => $this->yystack[$this->yyidx + -5]->minor), array('to' => $this->yystack[$this->yyidx + -3]->minor), array('step' => $this->yystack[$this->yyidx + -1]->minor))
        )
    );
    }
#line 1550 "Parser.php"
#line 390 "Parser.y"
    function yy_r29(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructForEach::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 1556 "Parser.php"
#line 396 "Parser.y"
    function yy_r30(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructForEach::compileOpen(
        $this->compiler,
        array_merge($this->yystack[$this->yyidx + 0]->minor, array(array('from' => $this->yystack[$this->yyidx + -4]->minor), array('item' => $this->yystack[$this->yyidx + -1]->minor)))
    );
    }
#line 1565 "Parser.php"
#line 405 "Parser.y"
    function yy_r31(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructForEach::compileOpen(
        $this->compiler,
        array_merge(
            $this->yystack[$this->yyidx + 0]->minor,
            array(
                array('from' => $this->yystack[$this->yyidx + -7]->minor),
                array('item' => $this->yystack[$this->yyidx + -1]->minor),
                array('key' => $this->yystack[$this->yyidx + -4]->minor),
            )
        )
    );
    }
#line 1581 "Parser.php"
#line 422 "Parser.y"
    function yy_r32(){
    $j = strrpos($this->yystack[$this->yyidx + 0]->minor, '.');
    if ($this->yystack[$this->yyidx + 0]->minor[$j + 1] == 'c') {
// {$smarty.block.child}
        // $this->_retvalue = SMARTY_INTERNAL_COMPILE_BLOCK::compileChildBlock($this->compiler);
    } else {
// {$smarty.block.parent}
        // $this->_retvalue = SMARTY_INTERNAL_COMPILE_BLOCK::compileParentBlock($this->compiler);
    }
    }
#line 1593 "Parser.php"
#line 435 "Parser.y"
    function yy_r33(){
    switch ($this->yystack[$this->yyidx + 0]->minor) {
        case 'capture':
            $this->_retvalue = Constructs\ConstructCapture::compileClose($this->compiler, null);
            break;
        case 'for':
            $this->_retvalue = Constructs\ConstructFor::compileClose($this->compiler, null);
            break;
        case 'foreach':
            $this->_retvalue = Constructs\ConstructForEach::compileClose($this->compiler, null);
            break;
        case 'function':
            $this->_retvalue = Constructs\ConstructFunction::compileClose($this->compiler, null);
            break;
        case 'if':
            $this->_retvalue = Constructs\ConstructIf::compileClose($this->compiler, null);
            break;
        case 'while':
            $this->_retvalue = Constructs\ConstructWhile::compileClose($this->compiler, null);
            break;
        default:
            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + 0]->minor . 'close', array());
    }
    }
#line 1619 "Parser.php"
#line 464 "Parser.y"
    function yy_r34(){
    $this->_retvalue = array();
    }
#line 1624 "Parser.php"
#line 468 "Parser.y"
    function yy_r35(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    $this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 1630 "Parser.php"
#line 473 "Parser.y"
    function yy_r36(){
    $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);
    }
#line 1635 "Parser.php"
#line 477 "Parser.y"
    function yy_r37(){
    $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor => $this->yystack[$this->yyidx + 0]->minor);
    }
#line 1640 "Parser.php"
#line 498 "Parser.y"
    function yy_r41(){
    $this->yystack[$this->yyidx + -2]->minor[]=$this->yystack[$this->yyidx + 0]->minor;
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor;
    }
#line 1646 "Parser.php"
#line 503 "Parser.y"
    function yy_r42(){
    $this->_retvalue = array('var' => $this->yystack[$this->yyidx + -2]->minor, 'value'=>$this->yystack[$this->yyidx + 0]->minor);
    }
#line 1651 "Parser.php"
#line 527 "Parser.y"
    function yy_r46(){
    $this->_retvalue = Wrappers\StaticWrapper::static_if_all($this->yystack[$this->yyidx + -2]->minor . trim($this->yystack[$this->yyidx + -1]->minor) . $this->yystack[$this->yyidx + 0]->minor, array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 1656 "Parser.php"
#line 546 "Parser.y"
    function yy_r50(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructModifier::compileOpen($this->compiler, array(
        'value' => $this->yystack[$this->yyidx + -1]->minor,
        'modifierlist' => $this->yystack[$this->yyidx + 0]->minor,
    ));
    }
#line 1665 "Parser.php"
#line 556 "Parser.y"
    function yy_r51(){
    $this->_retvalue = new Wrappers\StaticWrapper($this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor);
    }
#line 1670 "Parser.php"
#line 560 "Parser.y"
    function yy_r52(){
    $this->_retvalue = new Wrappers\StaticWrapper('in_array('.$this->yystack[$this->yyidx + -2]->minor.','.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 1675 "Parser.php"
#line 564 "Parser.y"
    function yy_r53(){
    $this->_retvalue = new Wrappers\StaticWrapper('in_array('.$this->yystack[$this->yyidx + -2]->minor.',(array)'.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 1680 "Parser.php"
#line 568 "Parser.y"
    function yy_r54(){
    $this->_retvalue = new Wrappers\StaticWrapper($this->yystack[$this->yyidx + -2]->minor . $this->yystack[$this->yyidx + -1]->minor . $this->yystack[$this->yyidx + 0]->minor);
    }
#line 1685 "Parser.php"
#line 572 "Parser.y"
    function yy_r55(){
    $this->_retvalue = new Wrappers\StaticWrapper('!('.$this->yystack[$this->yyidx + -2]->minor.' % '.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 1690 "Parser.php"
#line 576 "Parser.y"
    function yy_r56(){
    $this->_retvalue = new Wrappers\StaticWrapper('!(1 & '.$this->yystack[$this->yyidx + -1]->minor.')');
    }
#line 1695 "Parser.php"
#line 580 "Parser.y"
    function yy_r57(){
    $this->_retvalue = new Wrappers\StaticWrapper('(1 & '.$this->yystack[$this->yyidx + -1]->minor.')');
    }
#line 1700 "Parser.php"
#line 588 "Parser.y"
    function yy_r58(){
    $this->_retvalue = Wrappers\StaticWrapper::static_if_all($this->yystack[$this->yyidx + -5]->minor . ' ? ' . $this->yystack[$this->yyidx + -2]->minor . ' : ' . $this->yystack[$this->yyidx + 0]->minor, array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 1705 "Parser.php"
#line 598 "Parser.y"
    function yy_r60(){
    $this->_retvalue = Wrappers\StaticWrapper::static_concat($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 1710 "Parser.php"
#line 603 "Parser.y"
    function yy_r61(){
    $this->_retvalue = Wrappers\StaticWrapper::static_concat('!', $this->yystack[$this->yyidx + 0]->minor);
    }
#line 1715 "Parser.php"
#line 616 "Parser.y"
    function yy_r64(){
    $this->_retvalue = new Wrappers\StaticWrapper($this->yystack[$this->yyidx + 0]->minor);
    }
#line 1720 "Parser.php"
#line 620 "Parser.y"
    function yy_r65(){
    $this->_retvalue = new Wrappers\StaticWrapper($this->yystack[$this->yyidx + -2]->minor.'.'.$this->yystack[$this->yyidx + 0]->minor);
    }
#line 1725 "Parser.php"
#line 625 "Parser.y"
    function yy_r66(){
    if (preg_match('~^true$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = new Wrappers\StaticWrapper('true');
    } elseif (preg_match('~^false$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = new Wrappers\StaticWrapper('false');
    } elseif (preg_match('~^null$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = new Wrappers\StaticWrapper('null');
    } else {
        $this->_retvalue = new Wrappers\StaticWrapper(var_export($this->yystack[$this->yyidx + 0]->minor, true));
    }
    }
#line 1738 "Parser.php"
#line 643 "Parser.y"
    function yy_r68(){
    $this->_retvalue = Wrappers\StaticWrapper::static_if_all("(". $this->yystack[$this->yyidx + -1]->minor .")", array($this->yystack[$this->yyidx + -1]->minor));
    }
#line 1743 "Parser.php"
#line 662 "Parser.y"
    function yy_r71(){
    if ($this->yystack[$this->yyidx + 0]->minor === "'smarty'") {
        $this->_retvalue = new Wrappers\SmartyVarLookupWrapper();
    } else {
        $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 1752 "Parser.php"
#line 670 "Parser.y"
    function yy_r72(){
    if ($this->yystack[$this->yyidx + -1]->minor instanceof Wrappers\SmartyVarLookupWrapper) {
        $decompiled = Decompile::decompileString($this->yystack[$this->yyidx + 0]->minor);
        switch ($decompiled) {
            case 'now':
                $this->_retvalue = new Wrappers\StaticWrapper('time()');
                break;
            case 'template':
                $this->compiler->assert_is_not_strict('$smarty.template is not supported in strict mode', $this);
                $this->_retvalue = new Wrappers\StaticWrapper('basename($_smarty_tpl->source->filepath)');
                break;
            case 'version':
                $this->_retvalue = new Wrappers\StaticWrapper(var_export(\Box\Brainy\Brainy::SMARTY_VERSION, true));
                break;
            case 'ldelim':
                $this->_retvalue = new Wrappers\StaticWrapper(var_export($this->compiler->smarty->left_delimiter, true));
                break;
            case 'rdelim':
                $this->_retvalue = new Wrappers\StaticWrapper(var_export($this->compiler->smarty->right_delimiter, true));
                break;
            case 'foreach':
            case 'capture':
                $this->_retvalue = new Wrappers\SmartyVarPoisonWrapper($decompiled);
                break;
            default:
                $this->compiler->trigger_template_error('$smarty[' . $this->yystack[$this->yyidx + 0]->minor . '] is invalid');
        }

    } elseif ($this->yystack[$this->yyidx + -1]->minor instanceof Wrappers\SmartyVarPoisonWrapper) {
        $this->_retvalue = new Wrappers\StaticWrapper("\$_smarty_tpl->tpl_vars['smarty']->value[" . var_export($this->yystack[$this->yyidx + -1]->minor->type, true) . "][" . $this->yystack[$this->yyidx + 0]->minor . "]");

    } else {
        $this->_retvalue = $this->compileSafeLookupWithBase($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 1789 "Parser.php"
#line 712 "Parser.y"
    function yy_r74(){
    $this->compiler->assert_is_not_strict('Variable indicies with dot syntax is not supported in strict mode', $this);
    $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + 0]->minor);
    }
#line 1795 "Parser.php"
#line 717 "Parser.y"
    function yy_r75(){
    $this->_retvalue = var_export($this->yystack[$this->yyidx + 0]->minor, true);
    }
#line 1800 "Parser.php"
#line 725 "Parser.y"
    function yy_r77(){
    $this->compiler->assert_is_not_strict('Dot syntax with expressions is not supported in strict mode', $this);
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 1806 "Parser.php"
#line 738 "Parser.y"
    function yy_r79(){
    $this->_retvalue = '\''.$this->yystack[$this->yyidx + 0]->minor.'\'';
    }
#line 1811 "Parser.php"
#line 743 "Parser.y"
    function yy_r80(){
    $this->_retvalue = '('.$this->yystack[$this->yyidx + -1]->minor.')';
    }
#line 1816 "Parser.php"
#line 753 "Parser.y"
    function yy_r81(){
    if ($this->security && substr($this->yystack[$this->yyidx + 0]->minor, 0, 1) == '_') {
        $this->compiler->trigger_template_error('Call to private object member "' . $this->yystack[$this->yyidx + 0]->minor . '" not allowed');
    }
    $this->_retvalue = '->'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 1824 "Parser.php"
#line 761 "Parser.y"
    function yy_r82(){
    if ($this->security && substr($this->yystack[$this->yyidx + -3]->minor, 0, 1) == '_') {
        $this->compiler->trigger_template_error('Call to private object member "' . $this->yystack[$this->yyidx + -3]->minor . '" not allowed');
    }
    $this->_retvalue = '->' . $this->yystack[$this->yyidx + -3]->minor . "(" . implode(',', $this->yystack[$this->yyidx + -1]->minor) . ")";
    }
#line 1832 "Parser.php"
#line 772 "Parser.y"
    function yy_r83(){
    if ($this->security && !$this->smarty->security_policy->isTrustedPhpFunction($this->yystack[$this->yyidx + -3]->minor, $this->compiler)) {
        $this->compiler->trigger_template_error('Cannot use untrusted function: ' . $this->yystack[$this->yyidx + -3]->minor);
    }
    if (!(strcasecmp($this->yystack[$this->yyidx + -3]->minor, 'isset') === 0 || strcasecmp($this->yystack[$this->yyidx + -3]->minor, 'empty') === 0 || strcasecmp($this->yystack[$this->yyidx + -3]->minor, 'array') === 0 || is_callable($this->yystack[$this->yyidx + -3]->minor))) {
        $this->compiler->trigger_template_error("unknown function \"" . $this->yystack[$this->yyidx + -3]->minor . "\"");
    }

    $func_name = strtolower($this->yystack[$this->yyidx + -3]->minor);

    $is_language_construct = $func_name === 'isset' || $func_name === 'empty';
    $combined_params = array();
    foreach ($this->yystack[$this->yyidx + -1]->minor as $param) {
        if ($is_language_construct && $param instanceof Wrappers\SafeLookupWrapper) {
            $combined_params[] = $param->getUnsafe();
            continue;
        }
        $combined_params[] = $param;
    }
    $par = implode(',', $combined_params);

    if ($func_name == 'isset') {
        if (count($combined_params) !== 1) {
            $this->compiler->trigger_template_error('Illegal number of paramer in "isset()"');
        }
        $isset_par = str_replace("')->value", "',null,true,false)->value", $par);
        $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". $isset_par .")";

    } elseif (in_array($func_name, array('empty', 'reset', 'current', 'end', 'prev', 'next'))) {

        if ($func_name !== 'empty') {
            $this->compiler->assert_is_not_strict($func_name . ' is not allowed in strict mode', $this);
        }

        if (count($combined_params) != 1) {
            $this->compiler->trigger_template_error('Illegal number of paramer in "' . $func_name . '()"');
        }
        if ($func_name == 'empty') {
            $this->_retvalue = $func_name.'('.str_replace("')->value", "',null,true,false)->value",$combined_params[0]).')';
        } else {
            $this->_retvalue = $func_name.'('.$combined_params[0].')';
        }
    } else {
        $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". $par .")";
    }
    }
#line 1880 "Parser.php"
#line 823 "Parser.y"
    function yy_r84(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -2]->minor,array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 1885 "Parser.php"
#line 840 "Parser.y"
    function yy_r87(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -2]->minor,array(array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor)));
    }
#line 1890 "Parser.php"
#line 844 "Parser.y"
    function yy_r88(){
    $this->_retvalue = array(array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor));
    }
#line 1895 "Parser.php"
#line 848 "Parser.y"
    function yy_r89(){
    $this->compiler->assert_is_not_strict('@ is not allowed in templates', $this);
    $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);
    }
#line 1901 "Parser.php"
#line 853 "Parser.y"
    function yy_r90(){
    $this->_retvalue =  array($this->yystack[$this->yyidx + 0]->minor);
    }
#line 1906 "Parser.php"
#line 858 "Parser.y"
    function yy_r91(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 1911 "Parser.php"
#line 878 "Parser.y"
    function yy_r95(){
    $this->_retvalue = '==';
    }
#line 1916 "Parser.php"
#line 882 "Parser.y"
    function yy_r96(){
    $this->_retvalue = '!=';
    }
#line 1921 "Parser.php"
#line 886 "Parser.y"
    function yy_r97(){
    $this->_retvalue = '>';
    }
#line 1926 "Parser.php"
#line 890 "Parser.y"
    function yy_r98(){
    $this->_retvalue = '<';
    }
#line 1931 "Parser.php"
#line 894 "Parser.y"
    function yy_r99(){
    $this->_retvalue = '>=';
    }
#line 1936 "Parser.php"
#line 898 "Parser.y"
    function yy_r100(){
    $this->_retvalue = '<=';
    }
#line 1941 "Parser.php"
#line 902 "Parser.y"
    function yy_r101(){
    $this->_retvalue = '===';
    }
#line 1946 "Parser.php"
#line 906 "Parser.y"
    function yy_r102(){
    $this->_retvalue = '!==';
    }
#line 1951 "Parser.php"
#line 910 "Parser.y"
    function yy_r103(){
    $this->_retvalue = '%';
    }
#line 1956 "Parser.php"
#line 914 "Parser.y"
    function yy_r104(){
    $this->_retvalue = '&&';
    }
#line 1961 "Parser.php"
#line 918 "Parser.y"
    function yy_r105(){
    $this->_retvalue = '||';
    }
#line 1966 "Parser.php"
#line 922 "Parser.y"
    function yy_r106(){
    $this->compiler->assert_is_not_strict('XOR is not supported in strict mode', $this);
    $this->_retvalue = ' XOR ';
    }
#line 1972 "Parser.php"
#line 930 "Parser.y"
    function yy_r107(){
    $this->_retvalue = 'array('.$this->yystack[$this->yyidx + -1]->minor.')';
    }
#line 1977 "Parser.php"
#line 934 "Parser.y"
    function yy_r108(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.','.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 1982 "Parser.php"
#line 940 "Parser.y"
    function yy_r110(){
    return;
    }
#line 1987 "Parser.php"
#line 944 "Parser.y"
    function yy_r111(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'=>'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 1992 "Parser.php"
#line 956 "Parser.y"
    function yy_r113(){
    $this->_retvalue = "''";
    }
#line 1997 "Parser.php"
#line 960 "Parser.y"
    function yy_r114(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor->to_smarty_php();
    }
#line 2002 "Parser.php"
#line 965 "Parser.y"
    function yy_r115(){
    $this->yystack[$this->yyidx + -1]->minor->append_subtree($this->yystack[$this->yyidx + 0]->minor);
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 2008 "Parser.php"
#line 970 "Parser.y"
    function yy_r116(){
    $this->_retvalue = new Helpers\DoubleQuoted($this);
    $this->_retvalue->append_subtree($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2014 "Parser.php"
#line 975 "Parser.y"
    function yy_r117(){
    $this->_retvalue = new Helpers\Expression('(string)' . $this->compileVariable("'" . substr($this->yystack[$this->yyidx + 0]->minor, 1) . "'"));
    }
#line 2019 "Parser.php"
#line 979 "Parser.y"
    function yy_r118(){
    $this->_retvalue = new Helpers\Expression('(string)(' . $this->yystack[$this->yyidx + -1]->minor . ')');
    }
#line 2024 "Parser.php"
#line 983 "Parser.y"
    function yy_r119(){
    $this->_retvalue = new Helpers\DoubleQuotedContent($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2029 "Parser.php"

    private $_retvalue;

    public function yy_reduce($yyruleno)
    {
        $yymsp = $this->yystack[$this->yyidx];

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for ($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            if ($yysize) {
                $this->yyidx++;
                $x = new TP_yyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    public function yy_parse_failed()
    {
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
    }

    public function yy_syntax_error($yymajor, $TOKEN)
    {
#line 118 "Parser.y"

    $this->internalError = true;
    $this->yymajor = $yymajor;
    $this->compiler->trigger_template_error();
#line 2083 "Parser.php"
    }

    public function yy_accept()
    {
        while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
#line 111 "Parser.y"

    $this->successful = !$this->internalError;
    $this->internalError = false;
    $this->retvalue = $this->_retvalue;
#line 2097 "Parser.php"
    }

    public function doParse($yymajor, $yytokenvalue)
    {
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */

        if ($this->yyidx === null || $this->yyidx < 0) {
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new TP_yyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);

        do {
            $yyact = $this->yy_find_shift_action($yymajor);
            if ($yymajor < self::YYERRORSYMBOL &&
                  !$this->yy_is_expected_token($yymajor)) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if (self::YYERRORSYMBOL) {
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit) {
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0 &&
                                 $yymx != self::YYERRORSYMBOL &&
        ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                              ){
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}
