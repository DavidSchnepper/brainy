<?php
/**
 * Brainy Internal Plugin Templateparser
 *
 * This is the template parser.
 * It is generated from the Parser.y file
 * @package Brainy
 * @subpackage Compiler
 * @author Uwe Tews
 * @author Matt Basta
 */

namespace Box\Brainy\Compiler;


class TP_yyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};


#line 17 "Parser.y"
class Parser#line 16 "Parser.php"
{
#line 19 "Parser.y"

    public $retvalue = 0;
    private $internalError = false;

    private $lex;
    private $compiler;
    private $smarty;
    private $template;
    private $security;
    public $current_buffer;

    private $safe_lookups = 0;
    private $strict_mode = false;
    private $strip = 0;

    public function __construct($lex, $compiler) {
        $this->lex = $lex;
        $this->compiler = $compiler;
        $this->smarty = $this->compiler->smarty;
        $this->template = $this->compiler->template;
        $this->security = isset($this->smarty->security_policy);
        $this->current_buffer = $this->root_buffer = new Helpers\TemplateBuffer();

        $this->safe_lookups = $this->smarty->safe_lookups;
    }

    /**
     * Strips whitespace from a string
     * @param string $string
     * @return string
     */
    protected static function stripString($string) {
        // Replaces whitespace followed by a `<` with null.
        // `     \n     </foo>` -> `</foo>`
        $string = preg_replace('/\s+(?=<\/)/ims', '', $string);
        // `     \n     <foo>` -> ` <foo>`
        // `     \n     &nbsp;` -> ` &nbsp;`
        $string = preg_replace('/\s+(?=[<&])/ims', ' ', $string);
        // Replaces `>` followed by whitespace with `>`
        // `<div>\n  foo` -> `<div>foo`
        $string = preg_replace('/>\s+(?=\S)/ims', '>', $string);
        // Replaces whitespace followed by anything else with a space.
        // `            data-hello="` -> ` data-hello="`
        $string = preg_replace('/\s+(?=\w)/ims', ' ', $string);

        // Is there work to be done at the end of the string?
        if ($string !== rtrim($string)) {
            $string = rtrim($string);
            // If the last non-whitespace character is not a `>`, add a space.
            if (substr($string, -1) !== '>') {
                $string .= ' ';
            }
        }
        return $string;
    }

    /**
     * @return bool
     */
    public function isStrictMode() {
        return $this->strict_mode;
    }

    /**
     * @param string $variable The name of the variable to look up
     * @param string|void $value The member of the SmartyVariable to access
     * @return string|Wrappers\SafeLookupWrapper
     */
    public function compileVariable($variable, $value = 'value')
    {
        $unsafe = '$_smarty_tpl->tpl_vars[' . $variable . ']->' . $value;
        if ($this->safe_lookups === 0) { // Unsafe lookups
            return $unsafe;
        }
        $safe = '\Box\Brainy\Runtime\Lookups::safeVarLookup($_smarty_tpl->tpl_vars, '. $variable .', ' . $this->safe_lookups . ')->' . $value;
        return new Wrappers\SafeLookupWrapper($unsafe, $safe);
    }

    /**
     * @param string $base
     * @param string $variable
     * @return string|Wrappers\SafeLookupWrapper
     */
    public function compileSafeLookupWithBase($base, $variable)
    {
        $unsafe = $base . '[' . $variable . ']';
        if ($this->safe_lookups === 0) { // Unsafe lookups
            return $unsafe;
        }
        $safe = '\Box\Brainy\Runtime\Lookups::safeArrayLookup(' . $base . ', '. $variable .', ' . $this->safe_lookups . ')';
        return new Wrappers\SafeLookupWrapper($unsafe, $safe);
    }
#line 112 "Parser.php"

    const TP_VERT                           =  1;
    const TP_COLON                          =  2;
    const TP_SETSTRICT                      =  3;
    const TP_RDEL                           =  4;
    const TP_COMMENT                        =  5;
    const TP_TEXT                           =  6;
    const TP_STRIPON                        =  7;
    const TP_STRIPOFF                       =  8;
    const TP_LITERALSTART                   =  9;
    const TP_LITERALEND                     = 10;
    const TP_LITERAL                        = 11;
    const TP_LDEL                           = 12;
    const TP_EQUAL                          = 13;
    const TP_DOLLAR                         = 14;
    const TP_ID                             = 15;
    const TP_LDELIF                         = 16;
    const TP_LDELFOR                        = 17;
    const TP_SEMICOLON                      = 18;
    const TP_INCDEC                         = 19;
    const TP_TO                             = 20;
    const TP_STEP                           = 21;
    const TP_LDELFOREACH                    = 22;
    const TP_SPACE                          = 23;
    const TP_AS                             = 24;
    const TP_APTR                           = 25;
    const TP_SMARTYBLOCKCHILDPARENT         = 26;
    const TP_LDELSLASH                      = 27;
    const TP_INTEGER                        = 28;
    const TP_COMMA                          = 29;
    const TP_OPENP                          = 30;
    const TP_CLOSEP                         = 31;
    const TP_MATH                           = 32;
    const TP_UNIMATH                        = 33;
    const TP_ANDSYM                         = 34;
    const TP_ISIN                           = 35;
    const TP_ISDIVBY                        = 36;
    const TP_ISEVEN                         = 37;
    const TP_ISODD                          = 38;
    const TP_QMARK                          = 39;
    const TP_NOT                            = 40;
    const TP_TYPECAST                       = 41;
    const TP_DOT                            = 42;
    const TP_SINGLEQUOTESTRING              = 43;
    const TP_OPENB                          = 44;
    const TP_CLOSEB                         = 45;
    const TP_PTR                            = 46;
    const TP_AT                             = 47;
    const TP_EQUALS                         = 48;
    const TP_NOTEQUALS                      = 49;
    const TP_GREATERTHAN                    = 50;
    const TP_LESSTHAN                       = 51;
    const TP_GREATEREQUAL                   = 52;
    const TP_LESSEQUAL                      = 53;
    const TP_IDENTITY                       = 54;
    const TP_NONEIDENTITY                   = 55;
    const TP_MOD                            = 56;
    const TP_LAND                           = 57;
    const TP_LOR                            = 58;
    const TP_LXOR                           = 59;
    const TP_QUOTE                          = 60;
    const TP_DOLLARID                       = 61;
    const YY_NO_ACTION = 332;
    const YY_ACCEPT_ACTION = 331;
    const YY_ERROR_ACTION = 330;

    const YY_SZ_ACTTAB = 943;
static public $yy_action = array(
 /*     0 */   108,  142,  151,  150,  144,  102,  228,  158,    5,   92,
 /*    10 */    11,   14,   25,   74,   54,   71,  109,  103,   78,  174,
 /*    20 */    24,  188,   27,  121,  199,  200,  102,  208,  193,  173,
 /*    30 */   171,   66,   62,   63,   33,   16,  168,  160,  108,  136,
 /*    40 */   105,  202,   18,    7,  122,   84,  155,  156,  157,  161,
 /*    50 */   162,  167,  166,  165,  163,  164,  181,  182,  201,  185,
 /*    60 */    26,  117,   68,  146,  131,  141,  149,   71,  120,   66,
 /*    70 */    62,   63,   33,   16,  168,  160,  108,  176,  148,  131,
 /*    80 */   141,  173,  171,   80,  188,  156,  157,  161,  162,  167,
 /*    90 */   166,  165,  163,  164,  181,  182,  201,  113,   27,   86,
 /*   100 */   203,  132,   71,  138,   71,  118,   13,   66,   62,   63,
 /*   110 */    33,   16,  168,  160,  108,    8,  173,  171,  173,  171,
 /*   120 */   145,   71,  134,  156,  157,  161,  162,  167,  166,  165,
 /*   130 */   163,  164,  181,  182,  201,  173,  171,   17,   98,    9,
 /*   140 */   197,  195,   28,   71,  137,   66,   62,   63,   33,   16,
 /*   150 */   168,  160,  108,  180,  178,  169,    3,  173,  171,   71,
 /*   160 */   124,  156,  157,  161,  162,  167,  166,  165,  163,  164,
 /*   170 */   181,  182,  201,  173,  171,  203,    6,   71,  115,   71,
 /*   180 */   125,   13,    4,   66,   62,   63,   33,   16,  168,  160,
 /*   190 */   108,  173,  171,  173,  171,    9,   30,  194,  206,  156,
 /*   200 */   157,  161,  162,  167,  166,  165,  163,  164,  181,  182,
 /*   210 */   201,   17,   94,    3,  119,  183,  187,  190,  139,  191,
 /*   220 */   196,   66,   62,   63,   33,   16,  168,  160,  108,  179,
 /*   230 */   169,  184,   79,  207,  331,   61,   91,  156,  157,  161,
 /*   240 */   162,  167,  166,  165,  163,  164,  181,  182,  201,   90,
 /*   250 */     2,   95,   27,   88,  135,  139,   96,  139,   19,   66,
 /*   260 */    62,   63,   33,   16,  168,  160,  108,   85,  101,   22,
 /*   270 */   143,   89,  152,  159,  139,  156,  157,  161,  162,  167,
 /*   280 */   166,  165,  163,  164,  181,  182,  201,  105,   97,   18,
 /*   290 */    21,  122,   73,  129,  139,   83,  127,   66,   62,   63,
 /*   300 */    33,   16,  168,  160,  108,   29,  242,   10,  154,  123,
 /*   310 */   172,   34,  192,  156,  157,  161,  162,  167,  166,  165,
 /*   320 */   163,  164,  181,  182,  201,   27,  108,  133,   27,  126,
 /*   330 */   153,  104,    3,   77,  117,   66,   62,   63,   33,   16,
 /*   340 */   168,  160,  108,  177,   75,   23,   81,  175,   20,   76,
 /*   350 */   198,  156,  157,  161,  162,  167,  166,  165,  163,  164,
 /*   360 */   181,  182,  201,  147,  130,  221,  221,  221,  221,  221,
 /*   370 */   221,  221,  221,   66,   62,   63,   33,   16,  168,  160,
 /*   380 */   108,  221,  221,  186,  221,  221,  189,  221,  221,  156,
 /*   390 */   157,  161,  162,  167,  166,  165,  163,  164,  181,  182,
 /*   400 */   201,  221,  221,  221,  221,  221,  221,  221,   45,   71,
 /*   410 */   128,   66,   62,   63,   33,   16,  168,  160,  199,  200,
 /*   420 */   221,  221,  221,  173,  171,  221,  221,  156,  157,  161,
 /*   430 */   162,  167,  166,  165,  163,  164,  181,  182,  201,  108,
 /*   440 */   221,  221,  221,  221,  221,  221,  221,   58,   71,  128,
 /*   450 */   221,  221,  221,  221,  221,  221,   93,  199,  200,  221,
 /*   460 */   221,  221,  173,  171,  221,  221,  111,  221,  221,  221,
 /*   470 */    66,   62,   63,   33,   16,  168,  160,  108,  221,  221,
 /*   480 */   221,  221,  221,  221,  221,  221,  156,  157,  161,  162,
 /*   490 */   167,  166,  165,  163,  164,  181,  182,  201,  221,  221,
 /*   500 */   221,  221,  221,  221,  221,   43,   71,  128,   66,   62,
 /*   510 */    63,   33,   16,  168,  160,  199,  200,  221,  221,  221,
 /*   520 */   173,  171,  221,  221,  156,  157,  161,  162,  167,  166,
 /*   530 */   165,  163,  164,  181,  182,  201,  221,  221,   50,   71,
 /*   540 */   128,   66,   62,   63,   33,   16,  168,  160,  199,  200,
 /*   550 */   221,  221,  221,  173,  171,  221,  221,  156,  157,  161,
 /*   560 */   162,  167,  166,  165,  163,  164,  181,  182,  201,  221,
 /*   570 */   221,  221,   82,   72,  221,  221,  221,  221,   87,  114,
 /*   580 */   221,  221,  221,  221,  140,  221,  116,  221,   15,  221,
 /*   590 */   221,   65,  116,  221,   15,  221,  221,   65,   64,   67,
 /*   600 */   221,  170,    1,  221,   64,   67,  221,  170,    1,   87,
 /*   610 */   114,   44,   71,  128,  221,  221,  221,  221,   69,  221,
 /*   620 */   221,  199,  200,  116,   69,   12,  173,  171,   65,  221,
 /*   630 */    42,   71,  128,   87,  106,   64,   67,  221,  170,    1,
 /*   640 */   199,  200,  221,  221,  221,  173,  171,  107,  221,   15,
 /*   650 */   221,  221,   65,  112,  204,   69,   58,   71,  128,   64,
 /*   660 */    67,  221,  170,    1,   87,  114,  199,  200,  221,  221,
 /*   670 */   221,  173,  171,  221,  221,  110,  221,  221,  116,   69,
 /*   680 */    12,  221,  221,   65,   37,   71,  128,  221,  221,  221,
 /*   690 */    64,   67,  221,  170,  199,  200,   42,   71,  128,  173,
 /*   700 */   171,  221,  221,   53,   71,  128,  199,  200,  221,  221,
 /*   710 */    69,  173,  171,  199,  200,  221,  221,  221,  173,  171,
 /*   720 */   205,  221,  221,  221,   40,   71,  128,   38,   71,  128,
 /*   730 */   221,  221,  221,  221,  199,  200,  221,  199,  200,  173,
 /*   740 */   171,  221,  173,  171,   36,   71,  128,   41,   71,  128,
 /*   750 */   221,  221,  221,  221,  199,  200,  221,  199,  200,  173,
 /*   760 */   171,  221,  173,  171,  221,   49,   71,  128,   52,   70,
 /*   770 */   128,  221,  221,  221,  221,  199,  200,  221,  199,  200,
 /*   780 */   173,  171,  221,  173,  171,   60,   71,  128,  221,  221,
 /*   790 */   221,  221,   46,   71,  128,  199,  200,  221,  221,  221,
 /*   800 */   173,  171,  199,  200,  221,  221,  221,  173,  171,   48,
 /*   810 */    71,  128,   39,   71,  128,  221,  221,  221,  221,  199,
 /*   820 */   200,  221,  199,  200,  173,  171,  221,  173,  171,   31,
 /*   830 */    71,  128,   55,   71,  128,  221,  221,  221,  221,  199,
 /*   840 */   200,  221,  199,  200,  173,  171,  221,  173,  171,  221,
 /*   850 */    56,   71,  128,   59,   71,  128,  221,  221,  221,  221,
 /*   860 */   199,  200,  221,  199,  200,  173,  171,  221,  173,  171,
 /*   870 */   221,  221,   57,   71,  128,   47,   71,  128,  221,  221,
 /*   880 */   221,  221,  199,  200,  221,  199,  200,  173,  171,  221,
 /*   890 */   173,  171,   51,   71,  128,   32,   71,  128,  221,  221,
 /*   900 */   221,  221,  199,  200,  221,  199,  200,  173,  171,  100,
 /*   910 */   173,  171,   35,   71,  128,  139,  221,  221,   92,   11,
 /*   920 */    14,  221,  199,  200,  221,   99,  103,  173,  171,  221,
 /*   930 */   221,  139,  221,  221,   92,   11,   14,  221,  221,  221,
 /*   940 */   221,  221,  103,
    );
    static public $yy_lookahead = array(
 /*     0 */     1,    5,    6,    7,    8,    9,    4,   15,   12,   83,
 /*    10 */    84,   85,   16,   17,   71,   72,   73,   91,   22,   28,
 /*    20 */    21,   19,   23,   27,   81,   82,    9,   10,   11,   86,
 /*    30 */    87,   32,   33,   34,   35,   36,   37,   38,    1,   47,
 /*    40 */    42,    4,   44,   12,   46,   14,   15,   48,   49,   50,
 /*    50 */    51,   52,   53,   54,   55,   56,   57,   58,   59,   28,
 /*    60 */    13,   42,   65,   66,   67,   68,   19,   72,   73,   32,
 /*    70 */    33,   34,   35,   36,   37,   38,    1,   82,   66,   67,
 /*    80 */    68,   86,   87,   14,   19,   48,   49,   50,   51,   52,
 /*    90 */    53,   54,   55,   56,   57,   58,   59,   75,   23,   30,
 /*   100 */     6,   79,   72,   73,   72,   73,   12,   32,   33,   34,
 /*   110 */    35,   36,   37,   38,    1,    2,   86,   87,   86,   87,
 /*   120 */     3,   72,   73,   48,   49,   50,   51,   52,   53,   54,
 /*   130 */    55,   56,   57,   58,   59,   86,   87,   12,   92,   29,
 /*   140 */    15,   31,   13,   72,   73,   32,   33,   34,   35,   36,
 /*   150 */    37,   38,    1,   82,   60,   61,   30,   86,   87,   72,
 /*   160 */    73,   48,   49,   50,   51,   52,   53,   54,   55,   56,
 /*   170 */    57,   58,   59,   86,   87,    6,   25,   72,   73,   72,
 /*   180 */    73,   12,   29,   32,   33,   34,   35,   36,   37,   38,
 /*   190 */     1,   86,   87,   86,   87,   29,   13,   31,   45,   48,
 /*   200 */    49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
 /*   210 */    59,   12,   74,   30,   15,   88,   89,   68,   80,   70,
 /*   220 */    31,   32,   33,   34,   35,   36,   37,   38,    1,   60,
 /*   230 */    61,    4,   96,   97,   63,   64,   92,   48,   49,   50,
 /*   240 */    51,   52,   53,   54,   55,   56,   57,   58,   59,   74,
 /*   250 */    30,   74,   23,   14,   25,   80,   18,   80,   13,   32,
 /*   260 */    33,   34,   35,   36,   37,   38,    1,   29,   74,   20,
 /*   270 */     4,   14,   31,   15,   80,   48,   49,   50,   51,   52,
 /*   280 */    53,   54,   55,   56,   57,   58,   59,   42,   74,   44,
 /*   290 */    13,   46,   69,   77,   80,   14,   31,   32,   33,   34,
 /*   300 */    35,   36,   37,   38,    1,   13,    4,   39,   15,   15,
 /*   310 */    93,    2,   80,   48,   49,   50,   51,   52,   53,   54,
 /*   320 */    55,   56,   57,   58,   59,   23,    1,   24,   23,   76,
 /*   330 */    23,   91,   30,   77,   42,   32,   33,   34,   35,   36,
 /*   340 */    37,   38,    1,   97,   77,   23,   77,   77,   76,   78,
 /*   350 */    77,   48,   49,   50,   51,   52,   53,   54,   55,   56,
 /*   360 */    57,   58,   59,   79,   79,   98,   98,   98,   98,   98,
 /*   370 */    98,   98,   98,   32,   33,   34,   35,   36,   37,   38,
 /*   380 */     1,   98,   98,    4,   98,   98,   45,   98,   98,   48,
 /*   390 */    49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
 /*   400 */    59,   98,   98,   98,   98,   98,   98,   98,   71,   72,
 /*   410 */    73,   32,   33,   34,   35,   36,   37,   38,   81,   82,
 /*   420 */    98,   98,   98,   86,   87,   98,   98,   48,   49,   50,
 /*   430 */    51,   52,   53,   54,   55,   56,   57,   58,   59,    1,
 /*   440 */    98,   98,   98,   98,   98,   98,   98,   71,   72,   73,
 /*   450 */    98,   98,   98,   98,   98,   98,   18,   81,   82,   98,
 /*   460 */    98,   98,   86,   87,   98,   98,   90,   98,   98,   98,
 /*   470 */    32,   33,   34,   35,   36,   37,   38,    1,   98,   98,
 /*   480 */    98,   98,   98,   98,   98,   98,   48,   49,   50,   51,
 /*   490 */    52,   53,   54,   55,   56,   57,   58,   59,   98,   98,
 /*   500 */    98,   98,   98,   98,   98,   71,   72,   73,   32,   33,
 /*   510 */    34,   35,   36,   37,   38,   81,   82,   98,   98,   98,
 /*   520 */    86,   87,   98,   98,   48,   49,   50,   51,   52,   53,
 /*   530 */    54,   55,   56,   57,   58,   59,   98,   98,   71,   72,
 /*   540 */    73,   32,   33,   34,   35,   36,   37,   38,   81,   82,
 /*   550 */    98,   98,   98,   86,   87,   98,   98,   48,   49,   50,
 /*   560 */    51,   52,   53,   54,   55,   56,   57,   58,   59,   98,
 /*   570 */    98,   98,   14,   15,   98,   98,   98,   98,   14,   15,
 /*   580 */    98,   98,   98,   98,   26,   98,   28,   98,   30,   98,
 /*   590 */    98,   33,   28,   98,   30,   98,   98,   33,   40,   41,
 /*   600 */    98,   43,   44,   98,   40,   41,   98,   43,   44,   14,
 /*   610 */    15,   71,   72,   73,   98,   98,   98,   98,   60,   98,
 /*   620 */    98,   81,   82,   28,   60,   30,   86,   87,   33,   98,
 /*   630 */    71,   72,   73,   14,   15,   40,   41,   98,   43,   44,
 /*   640 */    81,   82,   98,   98,   98,   86,   87,   28,   98,   30,
 /*   650 */    98,   98,   33,   94,   95,   60,   71,   72,   73,   40,
 /*   660 */    41,   98,   43,   44,   14,   15,   81,   82,   98,   98,
 /*   670 */    98,   86,   87,   98,   98,   90,   98,   98,   28,   60,
 /*   680 */    30,   98,   98,   33,   71,   72,   73,   98,   98,   98,
 /*   690 */    40,   41,   98,   43,   81,   82,   71,   72,   73,   86,
 /*   700 */    87,   98,   98,   71,   72,   73,   81,   82,   98,   98,
 /*   710 */    60,   86,   87,   81,   82,   98,   98,   98,   86,   87,
 /*   720 */    95,   98,   98,   98,   71,   72,   73,   71,   72,   73,
 /*   730 */    98,   98,   98,   98,   81,   82,   98,   81,   82,   86,
 /*   740 */    87,   98,   86,   87,   71,   72,   73,   71,   72,   73,
 /*   750 */    98,   98,   98,   98,   81,   82,   98,   81,   82,   86,
 /*   760 */    87,   98,   86,   87,   98,   71,   72,   73,   71,   72,
 /*   770 */    73,   98,   98,   98,   98,   81,   82,   98,   81,   82,
 /*   780 */    86,   87,   98,   86,   87,   71,   72,   73,   98,   98,
 /*   790 */    98,   98,   71,   72,   73,   81,   82,   98,   98,   98,
 /*   800 */    86,   87,   81,   82,   98,   98,   98,   86,   87,   71,
 /*   810 */    72,   73,   71,   72,   73,   98,   98,   98,   98,   81,
 /*   820 */    82,   98,   81,   82,   86,   87,   98,   86,   87,   71,
 /*   830 */    72,   73,   71,   72,   73,   98,   98,   98,   98,   81,
 /*   840 */    82,   98,   81,   82,   86,   87,   98,   86,   87,   98,
 /*   850 */    71,   72,   73,   71,   72,   73,   98,   98,   98,   98,
 /*   860 */    81,   82,   98,   81,   82,   86,   87,   98,   86,   87,
 /*   870 */    98,   98,   71,   72,   73,   71,   72,   73,   98,   98,
 /*   880 */    98,   98,   81,   82,   98,   81,   82,   86,   87,   98,
 /*   890 */    86,   87,   71,   72,   73,   71,   72,   73,   98,   98,
 /*   900 */    98,   98,   81,   82,   98,   81,   82,   86,   87,   74,
 /*   910 */    86,   87,   71,   72,   73,   80,   98,   98,   83,   84,
 /*   920 */    85,   98,   81,   82,   98,   74,   91,   86,   87,   98,
 /*   930 */    98,   80,   98,   98,   83,   84,   85,   98,   98,   98,
 /*   940 */    98,   98,   91,
);
    const YY_SHIFT_USE_DFLT = -10;
    const YY_SHIFT_MAX = 138;
    static public $yy_shift_ofst = array(
 /*     0 */   117,  564,  564,  564,  564,  558,  564,  564,  564,  564,
 /*    10 */   564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
 /*    20 */   564,  564,  564,  619,  564,  564,  564,  619,  564,  564,
 /*    30 */   564,   -1,   75,  595,  595,  303,  189,  341,   37,  113,
 /*    40 */   438,  227,  151,  265,  379,  476,  476,  476,  476,  476,
 /*    50 */   476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
 /*    60 */   509,   -4,  650,  650,  650,  650,  650,  650,   -4,  169,
 /*    70 */   245,   -2,  302,   17,   69,  229,  305,  305,  322,   94,
 /*    80 */   125,   47,  199,  125,  125,   69,   69,  125,  125,  125,
 /*    90 */   305,  309,  325,  307,  305,  305,  307,  305,  309,  305,
 /*   100 */   305,  305,  -10,  -10,  -10,   31,  183,  292,   -8,    2,
 /*   110 */   110,  166,  153,  238,  126,   65,   19,   -9,   65,  129,
 /*   120 */    65,  293,  294,  220,   65,   65,  281,  268,   65,  277,
 /*   130 */   241,  266,  249,  239,   65,  257,  258,   65,   65,
);
    const YY_REDUCE_USE_DFLT = -75;
    const YY_REDUCE_MAX = 104;
    static public $yy_reduce_ofst = array(
 /*     0 */   171,  559,  376,  585,  625,  697,  694,  676,  714,  721,
 /*    10 */   741,  738,  673,  656,  467,  434,  337,  540,  613,  761,
 /*    20 */   653,  632,  758,  841,  824,  804,  821,  779,  -57,  782,
 /*    30 */   801,  835,  851,   71,   -5,  -74,  -74,  -74,  -74,  -74,
 /*    40 */   -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,
 /*    50 */   -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,
 /*    60 */   -74,   -3,   49,   32,  107,   30,   87,  105,   12,  136,
 /*    70 */   127,  127,  138,  149,   22,  194,  177,  175,  214,  246,
 /*    80 */   216,  271,  270,  269,  273,  284,  285,  270,  267,  256,
 /*    90 */   232,  217,  240,  253,  232,  232,  272,  232,  217,  232,
 /*   100 */   232,  232,  223,  144,   46,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(3, ),
        /* 1 */ array(14, 15, 28, 30, 33, 40, 41, 43, 44, 60, ),
        /* 2 */ array(14, 15, 28, 30, 33, 40, 41, 43, 44, 60, ),
        /* 3 */ array(14, 15, 28, 30, 33, 40, 41, 43, 44, 60, ),
        /* 4 */ array(14, 15, 28, 30, 33, 40, 41, 43, 44, 60, ),
        /* 5 */ array(14, 15, 26, 28, 30, 33, 40, 41, 43, 44, 60, ),
        /* 6 */ array(14, 15, 28, 30, 33, 40, 41, 43, 44, 60, ),
        /* 7 */ array(14, 15, 28, 30, 33, 40, 41, 43, 44, 60, ),
        /* 8 */ array(14, 15, 28, 30, 33, 40, 41, 43, 44, 60, ),
        /* 9 */ array(14, 15, 28, 30, 33, 40, 41, 43, 44, 60, ),
        /* 10 */ array(14, 15, 28, 30, 33, 40, 41, 43, 44, 60, ),
        /* 11 */ array(14, 15, 28, 30, 33, 40, 41, 43, 44, 60, ),
        /* 12 */ array(14, 15, 28, 30, 33, 40, 41, 43, 44, 60, ),
        /* 13 */ array(14, 15, 28, 30, 33, 40, 41, 43, 44, 60, ),
        /* 14 */ array(14, 15, 28, 30, 33, 40, 41, 43, 44, 60, ),
        /* 15 */ array(14, 15, 28, 30, 33, 40, 41, 43, 44, 60, ),
        /* 16 */ array(14, 15, 28, 30, 33, 40, 41, 43, 44, 60, ),
        /* 17 */ array(14, 15, 28, 30, 33, 40, 41, 43, 44, 60, ),
        /* 18 */ array(14, 15, 28, 30, 33, 40, 41, 43, 44, 60, ),
        /* 19 */ array(14, 15, 28, 30, 33, 40, 41, 43, 44, 60, ),
        /* 20 */ array(14, 15, 28, 30, 33, 40, 41, 43, 44, 60, ),
        /* 21 */ array(14, 15, 28, 30, 33, 40, 41, 43, 44, 60, ),
        /* 22 */ array(14, 15, 28, 30, 33, 40, 41, 43, 44, 60, ),
        /* 23 */ array(14, 15, 28, 30, 33, 40, 41, 43, 44, 60, ),
        /* 24 */ array(14, 15, 28, 30, 33, 40, 41, 43, 44, 60, ),
        /* 25 */ array(14, 15, 28, 30, 33, 40, 41, 43, 44, 60, ),
        /* 26 */ array(14, 15, 28, 30, 33, 40, 41, 43, 44, 60, ),
        /* 27 */ array(14, 15, 28, 30, 33, 40, 41, 43, 44, 60, ),
        /* 28 */ array(14, 15, 28, 30, 33, 40, 41, 43, 44, 60, ),
        /* 29 */ array(14, 15, 28, 30, 33, 40, 41, 43, 44, 60, ),
        /* 30 */ array(14, 15, 28, 30, 33, 40, 41, 43, 44, 60, ),
        /* 31 */ array(1, 21, 23, 32, 33, 34, 35, 36, 37, 38, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, ),
        /* 32 */ array(1, 23, 32, 33, 34, 35, 36, 37, 38, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, ),
        /* 33 */ array(14, 15, 28, 30, 33, 40, 41, 43, 44, 60, ),
        /* 34 */ array(14, 15, 28, 30, 33, 40, 41, 43, 44, 60, ),
        /* 35 */ array(1, 24, 32, 33, 34, 35, 36, 37, 38, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, ),
        /* 36 */ array(1, 31, 32, 33, 34, 35, 36, 37, 38, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, ),
        /* 37 */ array(1, 32, 33, 34, 35, 36, 37, 38, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, ),
        /* 38 */ array(1, 4, 32, 33, 34, 35, 36, 37, 38, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, ),
        /* 39 */ array(1, 2, 32, 33, 34, 35, 36, 37, 38, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, ),
        /* 40 */ array(1, 18, 32, 33, 34, 35, 36, 37, 38, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, ),
        /* 41 */ array(1, 4, 32, 33, 34, 35, 36, 37, 38, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, ),
        /* 42 */ array(1, 25, 32, 33, 34, 35, 36, 37, 38, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, ),
        /* 43 */ array(1, 31, 32, 33, 34, 35, 36, 37, 38, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, ),
        /* 44 */ array(1, 4, 32, 33, 34, 35, 36, 37, 38, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, ),
        /* 45 */ array(1, 32, 33, 34, 35, 36, 37, 38, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, ),
        /* 46 */ array(1, 32, 33, 34, 35, 36, 37, 38, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, ),
        /* 47 */ array(1, 32, 33, 34, 35, 36, 37, 38, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, ),
        /* 48 */ array(1, 32, 33, 34, 35, 36, 37, 38, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, ),
        /* 49 */ array(1, 32, 33, 34, 35, 36, 37, 38, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, ),
        /* 50 */ array(1, 32, 33, 34, 35, 36, 37, 38, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, ),
        /* 51 */ array(1, 32, 33, 34, 35, 36, 37, 38, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, ),
        /* 52 */ array(1, 32, 33, 34, 35, 36, 37, 38, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, ),
        /* 53 */ array(1, 32, 33, 34, 35, 36, 37, 38, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, ),
        /* 54 */ array(1, 32, 33, 34, 35, 36, 37, 38, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, ),
        /* 55 */ array(1, 32, 33, 34, 35, 36, 37, 38, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, ),
        /* 56 */ array(1, 32, 33, 34, 35, 36, 37, 38, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, ),
        /* 57 */ array(1, 32, 33, 34, 35, 36, 37, 38, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, ),
        /* 58 */ array(1, 32, 33, 34, 35, 36, 37, 38, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, ),
        /* 59 */ array(1, 32, 33, 34, 35, 36, 37, 38, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, ),
        /* 60 */ array(32, 33, 34, 35, 36, 37, 38, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, ),
        /* 61 */ array(5, 6, 7, 8, 9, 12, 16, 17, 22, 27, ),
        /* 62 */ array(14, 15, 28, 30, 33, 40, 41, 43, 60, ),
        /* 63 */ array(14, 15, 28, 30, 33, 40, 41, 43, 60, ),
        /* 64 */ array(14, 15, 28, 30, 33, 40, 41, 43, 60, ),
        /* 65 */ array(14, 15, 28, 30, 33, 40, 41, 43, 60, ),
        /* 66 */ array(14, 15, 28, 30, 33, 40, 41, 43, 60, ),
        /* 67 */ array(14, 15, 28, 30, 33, 40, 41, 43, 60, ),
        /* 68 */ array(5, 6, 7, 8, 9, 12, 16, 17, 22, 27, ),
        /* 69 */ array(6, 12, 60, 61, ),
        /* 70 */ array(13, 42, 44, 46, ),
        /* 71 */ array(42, 44, 46, ),
        /* 72 */ array(4, 23, 30, ),
        /* 73 */ array(9, 10, 11, ),
        /* 74 */ array(14, 30, ),
        /* 75 */ array(23, 25, ),
        /* 76 */ array(23, ),
        /* 77 */ array(23, ),
        /* 78 */ array(23, ),
        /* 79 */ array(6, 12, 60, 61, ),
        /* 80 */ array(12, 15, ),
        /* 81 */ array(13, 19, ),
        /* 82 */ array(12, 15, ),
        /* 83 */ array(12, 15, ),
        /* 84 */ array(12, 15, ),
        /* 85 */ array(14, 30, ),
        /* 86 */ array(14, 30, ),
        /* 87 */ array(12, 15, ),
        /* 88 */ array(12, 15, ),
        /* 89 */ array(12, 15, ),
        /* 90 */ array(23, ),
        /* 91 */ array(2, ),
        /* 92 */ array(1, ),
        /* 93 */ array(23, ),
        /* 94 */ array(23, ),
        /* 95 */ array(23, ),
        /* 96 */ array(23, ),
        /* 97 */ array(23, ),
        /* 98 */ array(2, ),
        /* 99 */ array(23, ),
        /* 100 */ array(23, ),
        /* 101 */ array(23, ),
        /* 102 */ array(),
        /* 103 */ array(),
        /* 104 */ array(),
        /* 105 */ array(12, 14, 15, 28, ),
        /* 106 */ array(13, 30, ),
        /* 107 */ array(13, 42, ),
        /* 108 */ array(15, 47, ),
        /* 109 */ array(4, 19, ),
        /* 110 */ array(29, 31, ),
        /* 111 */ array(29, 31, ),
        /* 112 */ array(29, 45, ),
        /* 113 */ array(18, 29, ),
        /* 114 */ array(30, ),
        /* 115 */ array(19, ),
        /* 116 */ array(42, ),
        /* 117 */ array(28, ),
        /* 118 */ array(19, ),
        /* 119 */ array(13, ),
        /* 120 */ array(19, ),
        /* 121 */ array(15, ),
        /* 122 */ array(15, ),
        /* 123 */ array(30, ),
        /* 124 */ array(19, ),
        /* 125 */ array(19, ),
        /* 126 */ array(14, ),
        /* 127 */ array(39, ),
        /* 128 */ array(19, ),
        /* 129 */ array(13, ),
        /* 130 */ array(31, ),
        /* 131 */ array(4, ),
        /* 132 */ array(20, ),
        /* 133 */ array(14, ),
        /* 134 */ array(19, ),
        /* 135 */ array(14, ),
        /* 136 */ array(15, ),
        /* 137 */ array(19, ),
        /* 138 */ array(19, ),
        /* 139 */ array(),
        /* 140 */ array(),
        /* 141 */ array(),
        /* 142 */ array(),
        /* 143 */ array(),
        /* 144 */ array(),
        /* 145 */ array(),
        /* 146 */ array(),
        /* 147 */ array(),
        /* 148 */ array(),
        /* 149 */ array(),
        /* 150 */ array(),
        /* 151 */ array(),
        /* 152 */ array(),
        /* 153 */ array(),
        /* 154 */ array(),
        /* 155 */ array(),
        /* 156 */ array(),
        /* 157 */ array(),
        /* 158 */ array(),
        /* 159 */ array(),
        /* 160 */ array(),
        /* 161 */ array(),
        /* 162 */ array(),
        /* 163 */ array(),
        /* 164 */ array(),
        /* 165 */ array(),
        /* 166 */ array(),
        /* 167 */ array(),
        /* 168 */ array(),
        /* 169 */ array(),
        /* 170 */ array(),
        /* 171 */ array(),
        /* 172 */ array(),
        /* 173 */ array(),
        /* 174 */ array(),
        /* 175 */ array(),
        /* 176 */ array(),
        /* 177 */ array(),
        /* 178 */ array(),
        /* 179 */ array(),
        /* 180 */ array(),
        /* 181 */ array(),
        /* 182 */ array(),
        /* 183 */ array(),
        /* 184 */ array(),
        /* 185 */ array(),
        /* 186 */ array(),
        /* 187 */ array(),
        /* 188 */ array(),
        /* 189 */ array(),
        /* 190 */ array(),
        /* 191 */ array(),
        /* 192 */ array(),
        /* 193 */ array(),
        /* 194 */ array(),
        /* 195 */ array(),
        /* 196 */ array(),
        /* 197 */ array(),
        /* 198 */ array(),
        /* 199 */ array(),
        /* 200 */ array(),
        /* 201 */ array(),
        /* 202 */ array(),
        /* 203 */ array(),
        /* 204 */ array(),
        /* 205 */ array(),
        /* 206 */ array(),
        /* 207 */ array(),
        /* 208 */ array(),
);
    static public $yy_default = array(
 /*     0 */   211,  318,  294,  294,  330,  330,  330,  330,  330,  330,
 /*    10 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*    20 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*    30 */   330,  242,  242,  330,  330,  247,  330,  330,  330,  330,
 /*    40 */   330,  330,  320,  330,  330,  263,  292,  231,  259,  319,
 /*    50 */   262,  233,  226,  250,  229,  227,  247,  245,  293,  246,
 /*    60 */   266,  214,  330,  330,  330,  330,  330,  330,  209,  330,
 /*    70 */   267,  267,  274,  330,  330,  242,  242,  242,  242,  330,
 /*    80 */   330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
 /*    90 */   239,  296,  258,  329,  230,  232,  329,  237,  295,  236,
 /*   100 */   235,  238,  223,  300,  300,  330,  274,  272,  330,  252,
 /*   110 */   330,  330,  330,  330,  274,  270,  272,  330,  256,  287,
 /*   120 */   301,  330,  330,  289,  254,  269,  330,  276,  252,  330,
 /*   130 */   330,  330,  248,  330,  255,  330,  330,  261,  268,  244,
 /*   140 */   240,  217,  216,  215,  220,  210,  212,  249,  213,  234,
 /*   150 */   219,  218,  251,  328,  241,  283,  303,  304,  298,  297,
 /*   160 */   265,  305,  306,  310,  311,  309,  308,  307,  264,  325,
 /*   170 */   277,  278,  299,  275,  273,  279,  302,  323,  322,  321,
 /*   180 */   260,  312,  313,  280,  285,  284,  288,  281,  271,  286,
 /*   190 */   224,  222,  243,  225,  290,  291,  276,  287,  282,  253,
 /*   200 */   257,  314,  326,  327,  317,  316,  315,  324,  221,
);
    const YYNOCODE = 99;
    const YYSTACKDEPTH = 500;
    const YYNSTATE = 209;
    const YYNRULE = 121;
    const YYERRORSYMBOL = 62;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    public static $yyFallback = array(
    );

    public $yyidx;                    /* Index of top element in stack */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    public $yystack = array();  /* The parser's stack */

    public $yyTokenName = array(
  '$',             'VERT',          'COLON',         'SETSTRICT',   
  'RDEL',          'COMMENT',       'TEXT',          'STRIPON',     
  'STRIPOFF',      'LITERALSTART',  'LITERALEND',    'LITERAL',     
  'LDEL',          'EQUAL',         'DOLLAR',        'ID',          
  'LDELIF',        'LDELFOR',       'SEMICOLON',     'INCDEC',      
  'TO',            'STEP',          'LDELFOREACH',   'SPACE',       
  'AS',            'APTR',          'SMARTYBLOCKCHILDPARENT',  'LDELSLASH',   
  'INTEGER',       'COMMA',         'OPENP',         'CLOSEP',      
  'MATH',          'UNIMATH',       'ANDSYM',        'ISIN',        
  'ISDIVBY',       'ISEVEN',        'ISODD',         'QMARK',       
  'NOT',           'TYPECAST',      'DOT',           'SINGLEQUOTESTRING',
  'OPENB',         'CLOSEB',        'PTR',           'AT',          
  'EQUALS',        'NOTEQUALS',     'GREATERTHAN',   'LESSTHAN',    
  'GREATEREQUAL',  'LESSEQUAL',     'IDENTITY',      'NONEIDENTITY',
  'MOD',           'LAND',          'LOR',           'LXOR',        
  'QUOTE',         'DOLLARID',      'error',         'start',       
  'strictmode',    'template',      'template_element',  'smartytag',   
  'literal',       'literal_elements',  'literal_element',  'expr',        
  'variable',      'value',         'attributes',    'statements',  
  'optspace',      'varvar',        'foraction',     'statement',   
  'attribute',     'ternary',       'array',         'modifierlist',
  'ifcond',        'lop',           'function',      'doublequoted_with_quotes',
  'indexdef',      'objectelement',  'params',        'modifier',    
  'modparameters',  'modparameter',  'arrayelements',  'arrayelement',
  'doublequoted',  'doublequotedcontent',
    );

    public static $yyRuleName = array(
 /*   0 */ "start ::= strictmode template",
 /*   1 */ "strictmode ::= SETSTRICT",
 /*   2 */ "strictmode ::=",
 /*   3 */ "template ::= template_element",
 /*   4 */ "template ::= template template_element",
 /*   5 */ "template ::=",
 /*   6 */ "template_element ::= smartytag RDEL",
 /*   7 */ "template_element ::= COMMENT",
 /*   8 */ "template_element ::= literal",
 /*   9 */ "template_element ::= TEXT",
 /*  10 */ "template_element ::= STRIPON",
 /*  11 */ "template_element ::= STRIPOFF",
 /*  12 */ "literal ::= LITERALSTART literal_elements LITERALEND",
 /*  13 */ "literal_elements ::= literal_elements literal_element",
 /*  14 */ "literal_elements ::=",
 /*  15 */ "literal_element ::= literal",
 /*  16 */ "literal_element ::= LITERAL",
 /*  17 */ "smartytag ::= LDEL expr",
 /*  18 */ "smartytag ::= LDEL variable EQUAL expr",
 /*  19 */ "smartytag ::= LDEL DOLLAR ID EQUAL value",
 /*  20 */ "smartytag ::= LDEL DOLLAR ID EQUAL expr",
 /*  21 */ "smartytag ::= LDEL ID attributes",
 /*  22 */ "smartytag ::= LDELIF expr",
 /*  23 */ "smartytag ::= LDELFOR statements SEMICOLON optspace expr SEMICOLON optspace DOLLAR varvar foraction attributes",
 /*  24 */ "foraction ::= EQUAL expr",
 /*  25 */ "foraction ::= INCDEC",
 /*  26 */ "smartytag ::= LDELFOR statement TO expr attributes",
 /*  27 */ "smartytag ::= LDELFOR statement TO expr STEP expr attributes",
 /*  28 */ "smartytag ::= LDELFOREACH attributes",
 /*  29 */ "smartytag ::= LDELFOREACH SPACE expr AS DOLLAR varvar attributes",
 /*  30 */ "smartytag ::= LDELFOREACH SPACE expr AS DOLLAR varvar APTR DOLLAR varvar attributes",
 /*  31 */ "smartytag ::= LDEL SMARTYBLOCKCHILDPARENT",
 /*  32 */ "smartytag ::= LDELSLASH ID",
 /*  33 */ "attributes ::=",
 /*  34 */ "attributes ::= attributes attribute",
 /*  35 */ "attributes ::= attribute",
 /*  36 */ "attribute ::= SPACE ID EQUAL expr",
 /*  37 */ "attribute ::= SPACE INTEGER EQUAL expr",
 /*  38 */ "attribute ::= SPACE expr",
 /*  39 */ "statements ::= statement",
 /*  40 */ "statements ::= statements COMMA statement",
 /*  41 */ "statement ::= DOLLAR varvar EQUAL expr",
 /*  42 */ "statement ::= OPENP statement CLOSEP",
 /*  43 */ "expr ::= value",
 /*  44 */ "expr ::= ternary",
 /*  45 */ "expr ::= expr MATH value",
 /*  46 */ "expr ::= expr UNIMATH value",
 /*  47 */ "expr ::= expr ANDSYM value",
 /*  48 */ "expr ::= array",
 /*  49 */ "expr ::= expr modifierlist",
 /*  50 */ "expr ::= expr ifcond expr",
 /*  51 */ "expr ::= expr ISIN array",
 /*  52 */ "expr ::= expr ISIN value",
 /*  53 */ "expr ::= expr lop expr",
 /*  54 */ "expr ::= expr ISDIVBY expr",
 /*  55 */ "expr ::= expr ISEVEN",
 /*  56 */ "expr ::= expr ISODD",
 /*  57 */ "ternary ::= OPENP expr CLOSEP QMARK expr COLON expr",
 /*  58 */ "value ::= variable",
 /*  59 */ "value ::= UNIMATH value",
 /*  60 */ "value ::= NOT value",
 /*  61 */ "value ::= TYPECAST value",
 /*  62 */ "value ::= value INCDEC",
 /*  63 */ "value ::= INTEGER",
 /*  64 */ "value ::= INTEGER DOT INTEGER",
 /*  65 */ "value ::= ID",
 /*  66 */ "value ::= function",
 /*  67 */ "value ::= OPENP expr CLOSEP",
 /*  68 */ "value ::= SINGLEQUOTESTRING",
 /*  69 */ "value ::= doublequoted_with_quotes",
 /*  70 */ "variable ::= DOLLAR varvar",
 /*  71 */ "variable ::= variable indexdef",
 /*  72 */ "variable ::= variable objectelement",
 /*  73 */ "indexdef ::= DOT DOLLAR varvar",
 /*  74 */ "indexdef ::= DOT ID",
 /*  75 */ "indexdef ::= DOT INTEGER",
 /*  76 */ "indexdef ::= DOT LDEL expr RDEL",
 /*  77 */ "indexdef ::= OPENB expr CLOSEB",
 /*  78 */ "varvar ::= ID",
 /*  79 */ "varvar ::= LDEL expr RDEL",
 /*  80 */ "objectelement ::= PTR ID",
 /*  81 */ "objectelement ::= PTR ID OPENP params CLOSEP",
 /*  82 */ "function ::= ID OPENP params CLOSEP",
 /*  83 */ "params ::= params COMMA expr",
 /*  84 */ "params ::= expr",
 /*  85 */ "params ::=",
 /*  86 */ "modifierlist ::= modifierlist modifier modparameters",
 /*  87 */ "modifierlist ::= modifier modparameters",
 /*  88 */ "modifier ::= VERT AT ID",
 /*  89 */ "modifier ::= VERT ID",
 /*  90 */ "modparameters ::= modparameters modparameter",
 /*  91 */ "modparameters ::=",
 /*  92 */ "modparameter ::= COLON value",
 /*  93 */ "modparameter ::= COLON array",
 /*  94 */ "ifcond ::= EQUALS",
 /*  95 */ "ifcond ::= NOTEQUALS",
 /*  96 */ "ifcond ::= GREATERTHAN",
 /*  97 */ "ifcond ::= LESSTHAN",
 /*  98 */ "ifcond ::= GREATEREQUAL",
 /*  99 */ "ifcond ::= LESSEQUAL",
 /* 100 */ "ifcond ::= IDENTITY",
 /* 101 */ "ifcond ::= NONEIDENTITY",
 /* 102 */ "ifcond ::= MOD",
 /* 103 */ "lop ::= LAND",
 /* 104 */ "lop ::= LOR",
 /* 105 */ "lop ::= LXOR",
 /* 106 */ "array ::= OPENB arrayelements CLOSEB",
 /* 107 */ "arrayelements ::= arrayelements COMMA arrayelement",
 /* 108 */ "arrayelements ::= arrayelement",
 /* 109 */ "arrayelements ::=",
 /* 110 */ "arrayelement ::= expr APTR expr",
 /* 111 */ "arrayelement ::= expr",
 /* 112 */ "doublequoted_with_quotes ::= QUOTE QUOTE",
 /* 113 */ "doublequoted_with_quotes ::= QUOTE doublequoted QUOTE",
 /* 114 */ "doublequoted ::= doublequoted doublequotedcontent",
 /* 115 */ "doublequoted ::= doublequotedcontent",
 /* 116 */ "doublequotedcontent ::= DOLLARID",
 /* 117 */ "doublequotedcontent ::= LDEL expr RDEL",
 /* 118 */ "doublequotedcontent ::= TEXT",
 /* 119 */ "optspace ::= SPACE",
 /* 120 */ "optspace ::=",
    );

    public function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count($this->yyTokenName)) {
            return $this->yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    public static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    public function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;

        return $yymajor;
    }

    public function __destruct()
    {
        while ($this->yystack !== Array()) {
            $this->yy_pop_parser_stack();
        }
    }

    public function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                $expected = array_merge($expected, self::$yyExpectedTokens[$nextstate]);
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;

                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new TP_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
    $this->yyidx = $yyidx;
    $this->yystack = $stack;

        return array_unique($expected);
    }

    public function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;

                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new TP_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token && $token !== '0') {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;

        return true;
    }

   public function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;

        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {

                return $this->yy_find_shift_action($iFallback);
            }

            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    public function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    public function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
#line 126 "Parser.y"

    $this->internalError = true;
    $this->compiler->trigger_template_error("Stack overflow in template parser");
#line 1058 "Parser.php"

            return;
        }
        $yytos = new TP_yyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
    }

    public static $yyRuleInfo = array(
  array( 'lhs' => 63, 'rhs' => 2 ),
  array( 'lhs' => 64, 'rhs' => 1 ),
  array( 'lhs' => 64, 'rhs' => 0 ),
  array( 'lhs' => 65, 'rhs' => 1 ),
  array( 'lhs' => 65, 'rhs' => 2 ),
  array( 'lhs' => 65, 'rhs' => 0 ),
  array( 'lhs' => 66, 'rhs' => 2 ),
  array( 'lhs' => 66, 'rhs' => 1 ),
  array( 'lhs' => 66, 'rhs' => 1 ),
  array( 'lhs' => 66, 'rhs' => 1 ),
  array( 'lhs' => 66, 'rhs' => 1 ),
  array( 'lhs' => 66, 'rhs' => 1 ),
  array( 'lhs' => 68, 'rhs' => 3 ),
  array( 'lhs' => 69, 'rhs' => 2 ),
  array( 'lhs' => 69, 'rhs' => 0 ),
  array( 'lhs' => 70, 'rhs' => 1 ),
  array( 'lhs' => 70, 'rhs' => 1 ),
  array( 'lhs' => 67, 'rhs' => 2 ),
  array( 'lhs' => 67, 'rhs' => 4 ),
  array( 'lhs' => 67, 'rhs' => 5 ),
  array( 'lhs' => 67, 'rhs' => 5 ),
  array( 'lhs' => 67, 'rhs' => 3 ),
  array( 'lhs' => 67, 'rhs' => 2 ),
  array( 'lhs' => 67, 'rhs' => 11 ),
  array( 'lhs' => 78, 'rhs' => 2 ),
  array( 'lhs' => 78, 'rhs' => 1 ),
  array( 'lhs' => 67, 'rhs' => 5 ),
  array( 'lhs' => 67, 'rhs' => 7 ),
  array( 'lhs' => 67, 'rhs' => 2 ),
  array( 'lhs' => 67, 'rhs' => 7 ),
  array( 'lhs' => 67, 'rhs' => 10 ),
  array( 'lhs' => 67, 'rhs' => 2 ),
  array( 'lhs' => 67, 'rhs' => 2 ),
  array( 'lhs' => 74, 'rhs' => 0 ),
  array( 'lhs' => 74, 'rhs' => 2 ),
  array( 'lhs' => 74, 'rhs' => 1 ),
  array( 'lhs' => 80, 'rhs' => 4 ),
  array( 'lhs' => 80, 'rhs' => 4 ),
  array( 'lhs' => 80, 'rhs' => 2 ),
  array( 'lhs' => 75, 'rhs' => 1 ),
  array( 'lhs' => 75, 'rhs' => 3 ),
  array( 'lhs' => 79, 'rhs' => 4 ),
  array( 'lhs' => 79, 'rhs' => 3 ),
  array( 'lhs' => 71, 'rhs' => 1 ),
  array( 'lhs' => 71, 'rhs' => 1 ),
  array( 'lhs' => 71, 'rhs' => 3 ),
  array( 'lhs' => 71, 'rhs' => 3 ),
  array( 'lhs' => 71, 'rhs' => 3 ),
  array( 'lhs' => 71, 'rhs' => 1 ),
  array( 'lhs' => 71, 'rhs' => 2 ),
  array( 'lhs' => 71, 'rhs' => 3 ),
  array( 'lhs' => 71, 'rhs' => 3 ),
  array( 'lhs' => 71, 'rhs' => 3 ),
  array( 'lhs' => 71, 'rhs' => 3 ),
  array( 'lhs' => 71, 'rhs' => 3 ),
  array( 'lhs' => 71, 'rhs' => 2 ),
  array( 'lhs' => 71, 'rhs' => 2 ),
  array( 'lhs' => 81, 'rhs' => 7 ),
  array( 'lhs' => 73, 'rhs' => 1 ),
  array( 'lhs' => 73, 'rhs' => 2 ),
  array( 'lhs' => 73, 'rhs' => 2 ),
  array( 'lhs' => 73, 'rhs' => 2 ),
  array( 'lhs' => 73, 'rhs' => 2 ),
  array( 'lhs' => 73, 'rhs' => 1 ),
  array( 'lhs' => 73, 'rhs' => 3 ),
  array( 'lhs' => 73, 'rhs' => 1 ),
  array( 'lhs' => 73, 'rhs' => 1 ),
  array( 'lhs' => 73, 'rhs' => 3 ),
  array( 'lhs' => 73, 'rhs' => 1 ),
  array( 'lhs' => 73, 'rhs' => 1 ),
  array( 'lhs' => 72, 'rhs' => 2 ),
  array( 'lhs' => 72, 'rhs' => 2 ),
  array( 'lhs' => 72, 'rhs' => 2 ),
  array( 'lhs' => 88, 'rhs' => 3 ),
  array( 'lhs' => 88, 'rhs' => 2 ),
  array( 'lhs' => 88, 'rhs' => 2 ),
  array( 'lhs' => 88, 'rhs' => 4 ),
  array( 'lhs' => 88, 'rhs' => 3 ),
  array( 'lhs' => 77, 'rhs' => 1 ),
  array( 'lhs' => 77, 'rhs' => 3 ),
  array( 'lhs' => 89, 'rhs' => 2 ),
  array( 'lhs' => 89, 'rhs' => 5 ),
  array( 'lhs' => 86, 'rhs' => 4 ),
  array( 'lhs' => 90, 'rhs' => 3 ),
  array( 'lhs' => 90, 'rhs' => 1 ),
  array( 'lhs' => 90, 'rhs' => 0 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 2 ),
  array( 'lhs' => 91, 'rhs' => 3 ),
  array( 'lhs' => 91, 'rhs' => 2 ),
  array( 'lhs' => 92, 'rhs' => 2 ),
  array( 'lhs' => 92, 'rhs' => 0 ),
  array( 'lhs' => 93, 'rhs' => 2 ),
  array( 'lhs' => 93, 'rhs' => 2 ),
  array( 'lhs' => 84, 'rhs' => 1 ),
  array( 'lhs' => 84, 'rhs' => 1 ),
  array( 'lhs' => 84, 'rhs' => 1 ),
  array( 'lhs' => 84, 'rhs' => 1 ),
  array( 'lhs' => 84, 'rhs' => 1 ),
  array( 'lhs' => 84, 'rhs' => 1 ),
  array( 'lhs' => 84, 'rhs' => 1 ),
  array( 'lhs' => 84, 'rhs' => 1 ),
  array( 'lhs' => 84, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 82, 'rhs' => 3 ),
  array( 'lhs' => 94, 'rhs' => 3 ),
  array( 'lhs' => 94, 'rhs' => 1 ),
  array( 'lhs' => 94, 'rhs' => 0 ),
  array( 'lhs' => 95, 'rhs' => 3 ),
  array( 'lhs' => 95, 'rhs' => 1 ),
  array( 'lhs' => 87, 'rhs' => 2 ),
  array( 'lhs' => 87, 'rhs' => 3 ),
  array( 'lhs' => 96, 'rhs' => 2 ),
  array( 'lhs' => 96, 'rhs' => 1 ),
  array( 'lhs' => 97, 'rhs' => 1 ),
  array( 'lhs' => 97, 'rhs' => 3 ),
  array( 'lhs' => 97, 'rhs' => 1 ),
  array( 'lhs' => 76, 'rhs' => 1 ),
  array( 'lhs' => 76, 'rhs' => 0 ),
    );

    public static $yyReduceMap = array(
        0 => 0,
        1 => 1,
        2 => 2,
        14 => 2,
        120 => 2,
        3 => 3,
        4 => 3,
        6 => 6,
        7 => 7,
        8 => 8,
        9 => 9,
        10 => 10,
        11 => 11,
        12 => 12,
        42 => 12,
        77 => 12,
        13 => 13,
        61 => 13,
        62 => 13,
        72 => 13,
        15 => 15,
        16 => 15,
        25 => 15,
        38 => 15,
        43 => 15,
        44 => 15,
        48 => 15,
        58 => 15,
        66 => 15,
        75 => 15,
        108 => 15,
        111 => 15,
        119 => 15,
        17 => 17,
        18 => 18,
        19 => 19,
        20 => 19,
        21 => 21,
        22 => 22,
        23 => 23,
        24 => 24,
        26 => 26,
        27 => 27,
        28 => 28,
        29 => 29,
        30 => 30,
        31 => 31,
        32 => 32,
        33 => 33,
        85 => 33,
        91 => 33,
        34 => 34,
        35 => 35,
        39 => 35,
        84 => 35,
        92 => 35,
        93 => 35,
        36 => 36,
        37 => 36,
        40 => 40,
        41 => 41,
        45 => 45,
        46 => 45,
        47 => 45,
        49 => 49,
        50 => 50,
        51 => 51,
        52 => 52,
        53 => 53,
        54 => 54,
        55 => 55,
        56 => 56,
        57 => 57,
        59 => 59,
        60 => 60,
        63 => 63,
        68 => 63,
        69 => 63,
        64 => 64,
        65 => 65,
        67 => 67,
        70 => 70,
        71 => 71,
        73 => 73,
        74 => 74,
        76 => 76,
        78 => 78,
        79 => 79,
        80 => 80,
        81 => 81,
        82 => 82,
        83 => 83,
        86 => 86,
        87 => 87,
        88 => 88,
        89 => 89,
        90 => 90,
        94 => 94,
        95 => 95,
        96 => 96,
        97 => 97,
        98 => 98,
        99 => 99,
        100 => 100,
        101 => 101,
        102 => 102,
        103 => 103,
        104 => 104,
        105 => 105,
        106 => 106,
        107 => 107,
        109 => 109,
        110 => 110,
        112 => 112,
        113 => 113,
        114 => 114,
        115 => 115,
        116 => 116,
        117 => 117,
        118 => 118,
    );
#line 135 "Parser.y"
    function yy_r0(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor . $this->root_buffer->to_smarty_php();
    }
#line 1319 "Parser.php"
#line 139 "Parser.y"
    function yy_r1(){
    $this->strict_mode = true;
    $this->_retvalue = "/* strict mode */\n\$_smarty_tpl->strict_mode = true;\n";
    }
#line 1325 "Parser.php"
#line 143 "Parser.y"
    function yy_r2(){
    $this->_retvalue = '';
    }
#line 1330 "Parser.php"
#line 149 "Parser.y"
    function yy_r3(){
    if ($this->yystack[$this->yyidx + 0]->minor !== null) {
        $this->current_buffer->append_subtree($this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 1337 "Parser.php"
#line 166 "Parser.y"
    function yy_r6(){
    if ($this->compiler->has_code && !is_object($this->yystack[$this->yyidx + -1]->minor)) {
        $this->_retvalue = new Helpers\Tag((string) $this->yystack[$this->yyidx + -1]->minor);
    } elseif ($this->compiler->has_code) {
        $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    } else {
        $this->_retvalue = null;
    }
    }
#line 1348 "Parser.php"
#line 177 "Parser.y"
    function yy_r7(){
    $this->_retvalue = null;
    }
#line 1353 "Parser.php"
#line 182 "Parser.y"
    function yy_r8(){
    $this->_retvalue = new Helpers\Text($this->yystack[$this->yyidx + 0]->minor);
    }
#line 1358 "Parser.php"
#line 187 "Parser.y"
    function yy_r9(){
    if ($this->strip) {
        $this->_retvalue = new Helpers\Text(self::stripString($this->yystack[$this->yyidx + 0]->minor));
    } else {
        $this->_retvalue = new Helpers\Text($this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 1367 "Parser.php"
#line 196 "Parser.y"
    function yy_r10(){
    $this->strip++;
    }
#line 1372 "Parser.php"
#line 200 "Parser.y"
    function yy_r11(){
    if (!$this->strip) {
        $this->compiler->trigger_template_error('Unbalanced {strip} tags');
    }
    $this->strip--;
    }
#line 1380 "Parser.php"
#line 208 "Parser.y"
    function yy_r12(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 1385 "Parser.php"
#line 212 "Parser.y"
    function yy_r13(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor . $this->yystack[$this->yyidx + 0]->minor;
    }
#line 1390 "Parser.php"
#line 220 "Parser.y"
    function yy_r15(){
    $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 1395 "Parser.php"
#line 235 "Parser.y"
    function yy_r17(){
    $this->compiler->assert_no_enforced_modifiers($this->yystack[$this->yyidx + 0]->minor instanceof Wrappers\StaticWrapper);
    if ($this->yystack[$this->yyidx + 0]->minor instanceof Wrappers\StaticWrapper) {
        $this->yystack[$this->yyidx + 0]->minor = (string) $this->yystack[$this->yyidx + 0]->minor;
    }
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructPrintExpression::compileOpen(
        $this->compiler,
        array('value' => $this->yystack[$this->yyidx + 0]->minor, 'modifierlist' => array())
    );
    }
#line 1408 "Parser.php"
#line 251 "Parser.y"
    function yy_r18(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor . ' = (' . $this->yystack[$this->yyidx + 0]->minor . ');';
    }
#line 1413 "Parser.php"
#line 255 "Parser.y"
    function yy_r19(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructAssign::compileOpen(
        $this->compiler,
        array('value' => $this->yystack[$this->yyidx + 0]->minor, 'var' => "'" . $this->yystack[$this->yyidx + -2]->minor . "'")
    );
    }
#line 1422 "Parser.php"
#line 272 "Parser.y"
    function yy_r21(){
    $this->compiler->has_code = true;
    switch ($this->yystack[$this->yyidx + -1]->minor) {
        case 'assign':
            $this->_retvalue = Constructs\ConstructAssign::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'break':
            $this->_retvalue = Constructs\ConstructBreak::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'call':
            $this->_retvalue = Constructs\ConstructCall::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'capture':
            $this->_retvalue = Constructs\ConstructCapture::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'continue':
            $this->_retvalue = Constructs\ConstructContinue::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'else':
            $this->_retvalue = Constructs\ConstructElse::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'foreachelse':
            $this->_retvalue = Constructs\ConstructForEachElse::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'forelse':
            $this->_retvalue = Constructs\ConstructForElse::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'function':
            $this->_retvalue = Constructs\ConstructFunction::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'include':
            $this->_retvalue = Constructs\ConstructInclude::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'ldelim':
            $this->_retvalue = new Helpers\Text($this->compiler->smarty->left_delimiter);
            break;
        case 'rdelim':
            $this->_retvalue = new Helpers\Text($this->compiler->smarty->right_delimiter);
            break;
        default:
            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 1467 "Parser.php"
#line 318 "Parser.y"
    function yy_r22(){
    $tag = trim(substr($this->yystack[$this->yyidx + -1]->minor, $this->lex->ldel_length));
    $this->compiler->has_code = true;
    switch ($tag) {
        case 'if':
            $this->_retvalue = Constructs\ConstructIf::compileOpen($this->compiler, array('cond' => $this->yystack[$this->yyidx + 0]->minor));
            break;
        case 'elseif':
            $this->_retvalue = Constructs\ConstructElseIf::compileOpen($this->compiler, array('cond' => $this->yystack[$this->yyidx + 0]->minor));
            break;
        case 'while':
            $this->_retvalue = Constructs\ConstructWhile::compileOpen($this->compiler, array('cond' => $this->yystack[$this->yyidx + 0]->minor));
            break;
    }
    }
#line 1484 "Parser.php"
#line 334 "Parser.y"
    function yy_r23(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructFor::compileOpen(
        $this->compiler,
        array_merge(
            $this->yystack[$this->yyidx + 0]->minor,
            array(
                array('start' => $this->yystack[$this->yyidx + -9]->minor),
                array('ifexp' => $this->yystack[$this->yyidx + -6]->minor),
                array('var' => $this->yystack[$this->yyidx + -2]->minor),
                array('step' => $this->yystack[$this->yyidx + -1]->minor)
            )
        )
    );
    }
#line 1501 "Parser.php"
#line 350 "Parser.y"
    function yy_r24(){
    $this->_retvalue = '=' . $this->yystack[$this->yyidx + 0]->minor;
    }
#line 1506 "Parser.php"
#line 358 "Parser.y"
    function yy_r26(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructFor::compileOpen(
        $this->compiler,
        array_merge(
            $this->yystack[$this->yyidx + 0]->minor,
            array(array('start' => $this->yystack[$this->yyidx + -3]->minor), array('to' => $this->yystack[$this->yyidx + -1]->minor))
        )
    );
    }
#line 1518 "Parser.php"
#line 369 "Parser.y"
    function yy_r27(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructFor::compileOpen(
        $this->compiler,
        array_merge(
            $this->yystack[$this->yyidx + 0]->minor,
            array(array('start' => $this->yystack[$this->yyidx + -5]->minor), array('to' => $this->yystack[$this->yyidx + -3]->minor), array('step' => $this->yystack[$this->yyidx + -1]->minor))
        )
    );
    }
#line 1530 "Parser.php"
#line 381 "Parser.y"
    function yy_r28(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructForEach::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 1536 "Parser.php"
#line 387 "Parser.y"
    function yy_r29(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructForEach::compileOpen(
        $this->compiler,
        array_merge($this->yystack[$this->yyidx + 0]->minor, array(array('from' => $this->yystack[$this->yyidx + -4]->minor), array('item' => $this->yystack[$this->yyidx + -1]->minor)))
    );
    }
#line 1545 "Parser.php"
#line 396 "Parser.y"
    function yy_r30(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructForEach::compileOpen(
        $this->compiler,
        array_merge(
            $this->yystack[$this->yyidx + 0]->minor,
            array(
                array('from' => $this->yystack[$this->yyidx + -7]->minor),
                array('item' => $this->yystack[$this->yyidx + -1]->minor),
                array('key' => $this->yystack[$this->yyidx + -4]->minor),
            )
        )
    );
    }
#line 1561 "Parser.php"
#line 413 "Parser.y"
    function yy_r31(){
    $j = strrpos($this->yystack[$this->yyidx + 0]->minor, '.');
    if ($this->yystack[$this->yyidx + 0]->minor[$j + 1] == 'c') {
// {$smarty.block.child}
        // $this->_retvalue = SMARTY_INTERNAL_COMPILE_BLOCK::compileChildBlock($this->compiler);
    } else {
// {$smarty.block.parent}
        // $this->_retvalue = SMARTY_INTERNAL_COMPILE_BLOCK::compileParentBlock($this->compiler);
    }
    }
#line 1573 "Parser.php"
#line 426 "Parser.y"
    function yy_r32(){
    switch ($this->yystack[$this->yyidx + 0]->minor) {
        case 'capture':
            $this->_retvalue = Constructs\ConstructCapture::compileClose($this->compiler, null);
            break;
        case 'for':
            $this->_retvalue = Constructs\ConstructFor::compileClose($this->compiler, null);
            break;
        case 'foreach':
            $this->_retvalue = Constructs\ConstructForEach::compileClose($this->compiler, null);
            break;
        case 'function':
            $this->_retvalue = Constructs\ConstructFunction::compileClose($this->compiler, null);
            break;
        case 'if':
            $this->_retvalue = Constructs\ConstructIf::compileClose($this->compiler, null);
            break;
        case 'while':
            $this->_retvalue = Constructs\ConstructWhile::compileClose($this->compiler, null);
            break;
        default:
            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + 0]->minor . 'close', array());
    }
    }
#line 1599 "Parser.php"
#line 455 "Parser.y"
    function yy_r33(){
    $this->_retvalue = array();
    }
#line 1604 "Parser.php"
#line 459 "Parser.y"
    function yy_r34(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    $this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 1610 "Parser.php"
#line 464 "Parser.y"
    function yy_r35(){
    $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);
    }
#line 1615 "Parser.php"
#line 468 "Parser.y"
    function yy_r36(){
    $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor => $this->yystack[$this->yyidx + 0]->minor);
    }
#line 1620 "Parser.php"
#line 489 "Parser.y"
    function yy_r40(){
    $this->yystack[$this->yyidx + -2]->minor[]=$this->yystack[$this->yyidx + 0]->minor;
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor;
    }
#line 1626 "Parser.php"
#line 494 "Parser.y"
    function yy_r41(){
    $this->_retvalue = array('var' => $this->yystack[$this->yyidx + -2]->minor, 'value'=>$this->yystack[$this->yyidx + 0]->minor);
    }
#line 1631 "Parser.php"
#line 518 "Parser.y"
    function yy_r45(){
    $this->_retvalue = Wrappers\StaticWrapper::static_if_all($this->yystack[$this->yyidx + -2]->minor . trim($this->yystack[$this->yyidx + -1]->minor) . $this->yystack[$this->yyidx + 0]->minor, array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 1636 "Parser.php"
#line 537 "Parser.y"
    function yy_r49(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructModifier::compileOpen($this->compiler, array(
        'value' => $this->yystack[$this->yyidx + -1]->minor,
        'modifierlist' => $this->yystack[$this->yyidx + 0]->minor,
    ));
    }
#line 1645 "Parser.php"
#line 547 "Parser.y"
    function yy_r50(){
    $this->_retvalue = new Wrappers\StaticWrapper($this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor);
    }
#line 1650 "Parser.php"
#line 551 "Parser.y"
    function yy_r51(){
    $this->_retvalue = new Wrappers\StaticWrapper('in_array('.$this->yystack[$this->yyidx + -2]->minor.','.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 1655 "Parser.php"
#line 555 "Parser.y"
    function yy_r52(){
    $this->_retvalue = new Wrappers\StaticWrapper('in_array('.$this->yystack[$this->yyidx + -2]->minor.',(array)'.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 1660 "Parser.php"
#line 559 "Parser.y"
    function yy_r53(){
    $this->_retvalue = new Wrappers\StaticWrapper($this->yystack[$this->yyidx + -2]->minor . $this->yystack[$this->yyidx + -1]->minor . $this->yystack[$this->yyidx + 0]->minor);
    }
#line 1665 "Parser.php"
#line 563 "Parser.y"
    function yy_r54(){
    $this->_retvalue = new Wrappers\StaticWrapper('!('.$this->yystack[$this->yyidx + -2]->minor.' % '.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 1670 "Parser.php"
#line 567 "Parser.y"
    function yy_r55(){
    $this->_retvalue = new Wrappers\StaticWrapper('!(1 & '.$this->yystack[$this->yyidx + -1]->minor.')');
    }
#line 1675 "Parser.php"
#line 571 "Parser.y"
    function yy_r56(){
    $this->_retvalue = new Wrappers\StaticWrapper('(1 & '.$this->yystack[$this->yyidx + -1]->minor.')');
    }
#line 1680 "Parser.php"
#line 579 "Parser.y"
    function yy_r57(){
    $this->_retvalue = Wrappers\StaticWrapper::static_if_all($this->yystack[$this->yyidx + -5]->minor . ' ? ' . $this->yystack[$this->yyidx + -2]->minor . ' : ' . $this->yystack[$this->yyidx + 0]->minor, array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 1685 "Parser.php"
#line 589 "Parser.y"
    function yy_r59(){
    $this->_retvalue = Wrappers\StaticWrapper::static_concat($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 1690 "Parser.php"
#line 594 "Parser.y"
    function yy_r60(){
    $this->_retvalue = Wrappers\StaticWrapper::static_concat('!', $this->yystack[$this->yyidx + 0]->minor);
    }
#line 1695 "Parser.php"
#line 607 "Parser.y"
    function yy_r63(){
    $this->_retvalue = new Wrappers\StaticWrapper($this->yystack[$this->yyidx + 0]->minor);
    }
#line 1700 "Parser.php"
#line 611 "Parser.y"
    function yy_r64(){
    $this->_retvalue = new Wrappers\StaticWrapper($this->yystack[$this->yyidx + -2]->minor.'.'.$this->yystack[$this->yyidx + 0]->minor);
    }
#line 1705 "Parser.php"
#line 616 "Parser.y"
    function yy_r65(){
    if (preg_match('~^true$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = new Wrappers\StaticWrapper('true');
    } elseif (preg_match('~^false$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = new Wrappers\StaticWrapper('false');
    } elseif (preg_match('~^null$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = new Wrappers\StaticWrapper('null');
    } else {
        $this->_retvalue = new Wrappers\StaticWrapper(var_export($this->yystack[$this->yyidx + 0]->minor, true));
    }
    }
#line 1718 "Parser.php"
#line 634 "Parser.y"
    function yy_r67(){
    $this->_retvalue = Wrappers\StaticWrapper::static_if_all("(". $this->yystack[$this->yyidx + -1]->minor .")", array($this->yystack[$this->yyidx + -1]->minor));
    }
#line 1723 "Parser.php"
#line 653 "Parser.y"
    function yy_r70(){
    if ($this->yystack[$this->yyidx + 0]->minor === "'smarty'") {
        $this->_retvalue = new Wrappers\SmartyVarLookupWrapper();
    } else {
        $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 1732 "Parser.php"
#line 661 "Parser.y"
    function yy_r71(){
    if ($this->yystack[$this->yyidx + -1]->minor instanceof Wrappers\SmartyVarLookupWrapper) {
        $decompiled = Decompile::decompileString($this->yystack[$this->yyidx + 0]->minor);
        switch ($decompiled) {
            case 'now':
                $this->_retvalue = new Wrappers\StaticWrapper('time()');
                break;
            case 'template':
                $this->compiler->assert_is_not_strict('$smarty.template is not supported in strict mode', $this);
                $this->_retvalue = new Wrappers\StaticWrapper('basename($_smarty_tpl->source->filepath)');
                break;
            case 'version':
                $this->_retvalue = new Wrappers\StaticWrapper(var_export(\Box\Brainy\Brainy::SMARTY_VERSION, true));
                break;
            case 'ldelim':
                $this->_retvalue = new Wrappers\StaticWrapper(var_export($this->compiler->smarty->left_delimiter, true));
                break;
            case 'rdelim':
                $this->_retvalue = new Wrappers\StaticWrapper(var_export($this->compiler->smarty->right_delimiter, true));
                break;
            case 'foreach':
            case 'capture':
                $this->_retvalue = new Wrappers\SmartyVarPoisonWrapper($decompiled);
                break;
            default:
                $this->compiler->trigger_template_error('$smarty[' . $this->yystack[$this->yyidx + 0]->minor . '] is invalid');
        }

    } elseif ($this->yystack[$this->yyidx + -1]->minor instanceof Wrappers\SmartyVarPoisonWrapper) {
        $this->_retvalue = new Wrappers\StaticWrapper("\$_smarty_tpl->tpl_vars['smarty']->value[" . var_export($this->yystack[$this->yyidx + -1]->minor->type, true) . "][" . $this->yystack[$this->yyidx + 0]->minor . "]");

    } else {
        $this->_retvalue = $this->compileSafeLookupWithBase($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 1769 "Parser.php"
#line 703 "Parser.y"
    function yy_r73(){
    $this->compiler->assert_is_not_strict('Variable indicies with dot syntax is not supported in strict mode', $this);
    $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + 0]->minor);
    }
#line 1775 "Parser.php"
#line 708 "Parser.y"
    function yy_r74(){
    $this->_retvalue = var_export($this->yystack[$this->yyidx + 0]->minor, true);
    }
#line 1780 "Parser.php"
#line 716 "Parser.y"
    function yy_r76(){
    $this->compiler->assert_is_not_strict('Dot syntax with expressions is not supported in strict mode', $this);
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 1786 "Parser.php"
#line 729 "Parser.y"
    function yy_r78(){
    $this->_retvalue = '\''.$this->yystack[$this->yyidx + 0]->minor.'\'';
    }
#line 1791 "Parser.php"
#line 734 "Parser.y"
    function yy_r79(){
    $this->_retvalue = '('.$this->yystack[$this->yyidx + -1]->minor.')';
    }
#line 1796 "Parser.php"
#line 744 "Parser.y"
    function yy_r80(){
    if ($this->security && substr($this->yystack[$this->yyidx + 0]->minor, 0, 1) == '_') {
        $this->compiler->trigger_template_error('Call to private object member "' . $this->yystack[$this->yyidx + 0]->minor . '" not allowed');
    }
    $this->_retvalue = '->'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 1804 "Parser.php"
#line 752 "Parser.y"
    function yy_r81(){
    if ($this->security && substr($this->yystack[$this->yyidx + -3]->minor, 0, 1) == '_') {
        $this->compiler->trigger_template_error('Call to private object member "' . $this->yystack[$this->yyidx + -3]->minor . '" not allowed');
    }
    $this->_retvalue = '->' . $this->yystack[$this->yyidx + -3]->minor . "(" . implode(',', $this->yystack[$this->yyidx + -1]->minor) . ")";
    }
#line 1812 "Parser.php"
#line 763 "Parser.y"
    function yy_r82(){
    if ($this->security && !$this->smarty->security_policy->isTrustedPhpFunction($this->yystack[$this->yyidx + -3]->minor, $this->compiler)) {
        $this->compiler->trigger_template_error('Cannot use untrusted function: ' . $this->yystack[$this->yyidx + -3]->minor);
    }
    if (!(strcasecmp($this->yystack[$this->yyidx + -3]->minor, 'isset') === 0 || strcasecmp($this->yystack[$this->yyidx + -3]->minor, 'empty') === 0 || strcasecmp($this->yystack[$this->yyidx + -3]->minor, 'array') === 0 || is_callable($this->yystack[$this->yyidx + -3]->minor))) {
        $this->compiler->trigger_template_error("unknown function \"" . $this->yystack[$this->yyidx + -3]->minor . "\"");
    }

    $func_name = strtolower($this->yystack[$this->yyidx + -3]->minor);

    $is_language_construct = $func_name === 'isset' || $func_name === 'empty';
    $combined_params = array();
    foreach ($this->yystack[$this->yyidx + -1]->minor as $param) {
        if ($is_language_construct && $param instanceof Wrappers\SafeLookupWrapper) {
            $combined_params[] = $param->getUnsafe();
            continue;
        }
        $combined_params[] = $param;
    }
    $par = implode(',', $combined_params);

    if ($func_name == 'isset') {
        if (count($combined_params) !== 1) {
            $this->compiler->trigger_template_error('Illegal number of paramer in "isset()"');
        }
        $isset_par = str_replace("')->value", "',null,true,false)->value", $par);
        $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". $isset_par .")";

    } elseif (in_array($func_name, array('empty', 'reset', 'current', 'end', 'prev', 'next'))) {

        if ($func_name !== 'empty') {
            $this->compiler->assert_is_not_strict($func_name . ' is not allowed in strict mode', $this);
        }

        if (count($combined_params) != 1) {
            $this->compiler->trigger_template_error('Illegal number of paramer in "' . $func_name . '()"');
        }
        if ($func_name == 'empty') {
            $this->_retvalue = $func_name.'('.str_replace("')->value", "',null,true,false)->value",$combined_params[0]).')';
        } else {
            $this->_retvalue = $func_name.'('.$combined_params[0].')';
        }
    } else {
        $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". $par .")";
    }
    }
#line 1860 "Parser.php"
#line 814 "Parser.y"
    function yy_r83(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -2]->minor,array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 1865 "Parser.php"
#line 831 "Parser.y"
    function yy_r86(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -2]->minor,array(array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor)));
    }
#line 1870 "Parser.php"
#line 835 "Parser.y"
    function yy_r87(){
    $this->_retvalue = array(array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor));
    }
#line 1875 "Parser.php"
#line 839 "Parser.y"
    function yy_r88(){
    $this->compiler->assert_is_not_strict('@ is not allowed in templates', $this);
    $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);
    }
#line 1881 "Parser.php"
#line 844 "Parser.y"
    function yy_r89(){
    $this->_retvalue =  array($this->yystack[$this->yyidx + 0]->minor);
    }
#line 1886 "Parser.php"
#line 849 "Parser.y"
    function yy_r90(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 1891 "Parser.php"
#line 869 "Parser.y"
    function yy_r94(){
    $this->_retvalue = '==';
    }
#line 1896 "Parser.php"
#line 873 "Parser.y"
    function yy_r95(){
    $this->_retvalue = '!=';
    }
#line 1901 "Parser.php"
#line 877 "Parser.y"
    function yy_r96(){
    $this->_retvalue = '>';
    }
#line 1906 "Parser.php"
#line 881 "Parser.y"
    function yy_r97(){
    $this->_retvalue = '<';
    }
#line 1911 "Parser.php"
#line 885 "Parser.y"
    function yy_r98(){
    $this->_retvalue = '>=';
    }
#line 1916 "Parser.php"
#line 889 "Parser.y"
    function yy_r99(){
    $this->_retvalue = '<=';
    }
#line 1921 "Parser.php"
#line 893 "Parser.y"
    function yy_r100(){
    $this->_retvalue = '===';
    }
#line 1926 "Parser.php"
#line 897 "Parser.y"
    function yy_r101(){
    $this->_retvalue = '!==';
    }
#line 1931 "Parser.php"
#line 901 "Parser.y"
    function yy_r102(){
    $this->_retvalue = '%';
    }
#line 1936 "Parser.php"
#line 905 "Parser.y"
    function yy_r103(){
    $this->_retvalue = '&&';
    }
#line 1941 "Parser.php"
#line 909 "Parser.y"
    function yy_r104(){
    $this->_retvalue = '||';
    }
#line 1946 "Parser.php"
#line 913 "Parser.y"
    function yy_r105(){
    $this->compiler->assert_is_not_strict('XOR is not supported in strict mode', $this);
    $this->_retvalue = ' XOR ';
    }
#line 1952 "Parser.php"
#line 921 "Parser.y"
    function yy_r106(){
    $this->_retvalue = 'array('.$this->yystack[$this->yyidx + -1]->minor.')';
    }
#line 1957 "Parser.php"
#line 925 "Parser.y"
    function yy_r107(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.','.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 1962 "Parser.php"
#line 931 "Parser.y"
    function yy_r109(){
    return;
    }
#line 1967 "Parser.php"
#line 935 "Parser.y"
    function yy_r110(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'=>'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 1972 "Parser.php"
#line 947 "Parser.y"
    function yy_r112(){
    $this->_retvalue = "''";
    }
#line 1977 "Parser.php"
#line 951 "Parser.y"
    function yy_r113(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor->to_smarty_php();
    }
#line 1982 "Parser.php"
#line 956 "Parser.y"
    function yy_r114(){
    $this->yystack[$this->yyidx + -1]->minor->append_subtree($this->yystack[$this->yyidx + 0]->minor);
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 1988 "Parser.php"
#line 961 "Parser.y"
    function yy_r115(){
    $this->_retvalue = new Helpers\DoubleQuoted($this);
    $this->_retvalue->append_subtree($this->yystack[$this->yyidx + 0]->minor);
    }
#line 1994 "Parser.php"
#line 966 "Parser.y"
    function yy_r116(){
    $this->_retvalue = new Helpers\Expression('(string)' . $this->compileVariable("'" . substr($this->yystack[$this->yyidx + 0]->minor, 1) . "'"));
    }
#line 1999 "Parser.php"
#line 970 "Parser.y"
    function yy_r117(){
    $this->_retvalue = new Helpers\Expression('(string)(' . $this->yystack[$this->yyidx + -1]->minor . ')');
    }
#line 2004 "Parser.php"
#line 974 "Parser.y"
    function yy_r118(){
    $this->_retvalue = new Helpers\DoubleQuotedContent($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2009 "Parser.php"

    private $_retvalue;

    public function yy_reduce($yyruleno)
    {
        $yymsp = $this->yystack[$this->yyidx];

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for ($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            if ($yysize) {
                $this->yyidx++;
                $x = new TP_yyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    public function yy_parse_failed()
    {
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
    }

    public function yy_syntax_error($yymajor, $TOKEN)
    {
#line 119 "Parser.y"

    $this->internalError = true;
    $this->yymajor = $yymajor;
    $this->compiler->trigger_template_error();
#line 2063 "Parser.php"
    }

    public function yy_accept()
    {
        while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
#line 113 "Parser.y"

    $this->internalError = false;
    $this->retvalue = $this->_retvalue;
#line 2076 "Parser.php"
    }

    public function doParse($yymajor, $yytokenvalue)
    {
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */

        if ($this->yyidx === null || $this->yyidx < 0) {
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new TP_yyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);

        do {
            $yyact = $this->yy_find_shift_action($yymajor);
            if ($yymajor < self::YYERRORSYMBOL &&
                  !$this->yy_is_expected_token($yymajor)) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if (self::YYERRORSYMBOL) {
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit) {
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0 &&
                                 $yymx != self::YYERRORSYMBOL &&
        ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                              ){
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}
