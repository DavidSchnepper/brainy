<?php
/**
 * Brainy Internal Plugin Templateparser
 *
 * This is the template parser.
 * It is generated from the Parser.y file
 * @package Brainy
 * @subpackage Compiler
 * @author Uwe Tews
 * @author Matt Basta
 */

namespace Box\Brainy\Compiler;


class TP_yyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};


#line 17 "Parser.y"
class Parser#line 16 "Parser.php"
{
#line 19 "Parser.y"

    const Err1 = "Security error: Call to private object member not allowed";
    const Err2 = "Security error: Call to dynamic object member not allowed";
    // states whether the parse was successful or not
    public $successful = true;
    public $retvalue = 0;
    public static $prefix_number = 0;
    private $lex;
    private $internalError = false;
    private $strip = 0;

    private $safe_lookups = 0;
    private $strict_mode = false;

    public function __construct($lex, $compiler) {
        $this->lex = $lex;
        $this->compiler = $compiler;
        $this->smarty = $this->compiler->smarty;
        $this->template = $this->compiler->template;
        $this->compiler->has_variable_string = false;
        $this->security = isset($this->smarty->security_policy);
        $this->block_nesting_level = 0;
        $this->current_buffer = $this->root_buffer = new Helpers\TemplateBuffer($this);

        $this->safe_lookups = $this->smarty->safe_lookups;
    }

    /**
     * Strips whitespace from a string
     * @param string $string
     * @return string
     */
    protected static function stripString($string) {
        // Replaces whitespace followed by a `<` with null.
        // `     \n     <foo>` -> `<foo>`
        // `     \n     &nbsp;` -> `&nbsp;`
        $string = preg_replace('/\s+(?=<)/ims', '', $string);
        $string = preg_replace('/\s+(?=&)/ims', ' ', $string);
        // Replaces `>` followed by whitespace with `>`
        // `<div>\n  foo` -> `<div>foo`
        $string = preg_replace('/>\s+(?=\S)/ims', '>', $string);
        // Replaces whitespace followed by anything else with a space.
        // `            data-hello="` -> ` data-hello="`
        $string = preg_replace('/\s+(?=\w)/ims', ' ', $string);

        // Is there work to be done at the end of the string?
        if ($string !== rtrim($string)) {
            $string = rtrim($string);
            // If the last non-whitespace character is not a `>`, add a space.
            if (substr($string, -1) !== '>') {
                $string .= ' ';
            }
        }
        return $string;
    }

    /**
     * @return bool
     */
    public function isStrictMode() {
        return $this->strict_mode;
    }

    /**
     * @param string $variable The name of the variable to look up
     * @param string|void $value The member of the SmartyVariable to access
     * @return string|Wrappers\SafeLookupWrapper
     */
    public function compileVariable($variable, $value = 'value')
    {
        $unsafe = '$_smarty_tpl->tpl_vars[' . $variable . ']->' . $value;
        if ($this->safe_lookups === 0) { // Unsafe lookups
            return $unsafe;
        }
        $safe = '\Box\Brainy\Runtime\Lookups::safeVarLookup($_smarty_tpl->tpl_vars, '. $variable .', ' . $this->safe_lookups . ')->' . $value;
        return new Wrappers\SafeLookupWrapper($unsafe, $safe);
    }

    /**
     * @param string $base
     * @param string $variable
     * @return string|Wrappers\SafeLookupWrapper
     */
    public function compileSafeLookupWithBase($base, $variable)
    {
        $unsafe = $base . '[' . $variable . ']';
        if ($this->safe_lookups === 0) { // Unsafe lookups
            return $unsafe;
        }
        $safe = '\Box\Brainy\Runtime\Lookups::safeArrayLookup(' . $base . ', '. $variable .', ' . $this->safe_lookups . ')';
        return new Wrappers\SafeLookupWrapper($unsafe, $safe);
    }
#line 112 "Parser.php"

    const TP_VERT                           =  1;
    const TP_COLON                          =  2;
    const TP_SETSTRICT                      =  3;
    const TP_RDEL                           =  4;
    const TP_COMMENT                        =  5;
    const TP_TEXT                           =  6;
    const TP_STRIPON                        =  7;
    const TP_STRIPOFF                       =  8;
    const TP_BLOCKSOURCE                    =  9;
    const TP_LITERALSTART                   = 10;
    const TP_LITERALEND                     = 11;
    const TP_LITERAL                        = 12;
    const TP_LDEL                           = 13;
    const TP_EQUAL                          = 14;
    const TP_DOLLAR                         = 15;
    const TP_ID                             = 16;
    const TP_LDELIF                         = 17;
    const TP_LDELFOR                        = 18;
    const TP_SEMICOLON                      = 19;
    const TP_INCDEC                         = 20;
    const TP_TO                             = 21;
    const TP_STEP                           = 22;
    const TP_LDELFOREACH                    = 23;
    const TP_SPACE                          = 24;
    const TP_AS                             = 25;
    const TP_APTR                           = 26;
    const TP_SMARTYBLOCKCHILDPARENT         = 27;
    const TP_LDELSLASH                      = 28;
    const TP_ATTR                           = 29;
    const TP_INTEGER                        = 30;
    const TP_COMMA                          = 31;
    const TP_OPENP                          = 32;
    const TP_CLOSEP                         = 33;
    const TP_MATH                           = 34;
    const TP_UNIMATH                        = 35;
    const TP_ANDSYM                         = 36;
    const TP_ISIN                           = 37;
    const TP_ISDIVBY                        = 38;
    const TP_ISNOTDIVBY                     = 39;
    const TP_ISEVEN                         = 40;
    const TP_ISNOTEVEN                      = 41;
    const TP_ISEVENBY                       = 42;
    const TP_ISNOTEVENBY                    = 43;
    const TP_ISODD                          = 44;
    const TP_ISNOTODD                       = 45;
    const TP_ISODDBY                        = 46;
    const TP_ISNOTODDBY                     = 47;
    const TP_QMARK                          = 48;
    const TP_NOT                            = 49;
    const TP_TYPECAST                       = 50;
    const TP_DOT                            = 51;
    const TP_SINGLEQUOTESTRING              = 52;
    const TP_AT                             = 53;
    const TP_OPENB                          = 54;
    const TP_CLOSEB                         = 55;
    const TP_PTR                            = 56;
    const TP_EQUALS                         = 57;
    const TP_NOTEQUALS                      = 58;
    const TP_GREATERTHAN                    = 59;
    const TP_LESSTHAN                       = 60;
    const TP_GREATEREQUAL                   = 61;
    const TP_LESSEQUAL                      = 62;
    const TP_IDENTITY                       = 63;
    const TP_NONEIDENTITY                   = 64;
    const TP_MOD                            = 65;
    const TP_LAND                           = 66;
    const TP_LOR                            = 67;
    const TP_LXOR                           = 68;
    const TP_QUOTE                          = 69;
    const TP_DOLLARID                       = 70;
    const YY_NO_ACTION = 450;
    const YY_ACCEPT_ACTION = 449;
    const YY_ERROR_ACTION = 448;

    const YY_SZ_ACTTAB = 1802;
static public $yy_action = array(
 /*     0 */   175,  237,  233,  234,  235,  240,  158,  216,   34,    5,
 /*    10 */   119,  226,  150,   10,   98,   90,  204,  179,  236,  122,
 /*    20 */   243,   32,  192,    9,  183,  248,  175,  167,    8,  337,
 /*    30 */    27,  232,  135,   48,   44,   43,   42,   30,   29,  272,
 /*    40 */   271,   25,   33,  214,  268,   35,   39,  175,  175,  337,
 /*    50 */   178,  312,  106,    2,  337,  163,  269,  270,  275,  276,
 /*    60 */   281,  282,  280,  279,  277,  278,  267,  266,   40,   28,
 /*    70 */     9,    9,  158,  246,  244,    8,    8,  264,  165,    4,
 /*    80 */    48,   44,   43,   42,   30,   29,  272,  271,   25,   33,
 /*    90 */   214,  268,   35,   39,  175,  175,  175,  175,  337,  331,
 /*   100 */   334,  114,   36,  269,  270,  275,  276,  281,  282,  280,
 /*   110 */   279,  277,  278,  267,  266,  238,  179,  236,  337,    9,
 /*   120 */   334,    3,  221,  337,    8,  334,  201,   48,   44,   43,
 /*   130 */    42,   30,   29,  272,  271,   25,   33,  214,  268,   35,
 /*   140 */    39,  175,   14,   18,  175,  231,  115,  303,  156,  210,
 /*   150 */   269,  270,  275,  276,  281,  282,  280,  279,  277,  278,
 /*   160 */   267,  266,  257,   14,   24,  184,  231,    9,  175,   19,
 /*   170 */    14,  165,    8,  231,   48,   44,   43,   42,   30,   29,
 /*   180 */   272,  271,   25,   33,  214,  268,   35,   39,   31,    9,
 /*   190 */   113,  173,   14,   17,    8,  231,  160,  269,  270,  275,
 /*   200 */   276,  281,  282,  280,  279,  277,  278,  267,  266,  175,
 /*   210 */   189,  161,  177,  187,   97,  154,  191,  126,  194,  165,
 /*   220 */    70,  196,  118,  243,  257,  254,  250,  157,  151,  217,
 /*   230 */   255,   19,  188,  222,  229,  105,   23,  165,  261,  121,
 /*   240 */   169,   41,   48,   44,   43,   42,   30,   29,  272,  271,
 /*   250 */    25,   33,  214,  268,   35,   39,  175,  175,   14,  251,
 /*   260 */   167,  231,  252,   27,  220,  269,  270,  275,  276,  281,
 /*   270 */   282,  280,  279,  277,  278,  267,  266,   15,  221,   23,
 /*   280 */     9,  209,  190,    4,  194,    8,  175,  256,  250,   48,
 /*   290 */    44,   43,   42,   30,   29,  272,  271,   25,   33,  214,
 /*   300 */   268,   35,   39,  175,   22,   14,  283,  245,  181,  247,
 /*   310 */   221,  137,  269,  270,  275,  276,  281,  282,  280,  279,
 /*   320 */   277,  278,  267,  266,  175,  225,  162,  309,   16,  449,
 /*   330 */    87,  133,  258,    8,   12,  218,   48,   44,   43,   42,
 /*   340 */    30,   29,  272,  271,   25,   33,  214,  268,   35,   39,
 /*   350 */   175,  228,  227,  259,   14,  219,  206,  180,  194,  269,
 /*   360 */   270,  275,  276,  281,  282,  280,  279,  277,  278,  267,
 /*   370 */   266,  192,  195,  146,  164,  124,  202,   37,  273,  239,
 /*   380 */   117,  243,    7,   48,   44,   43,   42,   30,   29,  272,
 /*   390 */   271,   25,   33,  214,  268,   35,   39,  175,   13,   38,
 /*   400 */   260,  230,   26,    4,   96,  101,  269,  270,  275,  276,
 /*   410 */   281,  282,  280,  279,  277,  278,  267,  266,  225,  225,
 /*   420 */   147,  107,  215,  208,  224,  242,  232,  274,  243,  213,
 /*   430 */    48,   44,   43,   42,   30,   29,  272,  271,   25,   33,
 /*   440 */   214,  268,   35,   39,  175,  205,  148,  212,  104,  241,
 /*   450 */   253,  277,  111,  269,  270,  275,  276,  281,  282,  280,
 /*   460 */   279,  277,  278,  267,  266,  232,  277,  182,    6,  277,
 /*   470 */   277,  277,  277,  277,  277,  277,  199,   48,   44,   43,
 /*   480 */    42,   30,   29,  272,  271,   25,   33,  214,  268,   35,
 /*   490 */    39,  175,   20,  277,  277,  277,  277,  277,   94,   92,
 /*   500 */   269,  270,  275,  276,  281,  282,  280,  279,  277,  278,
 /*   510 */   267,  266,  225,  225,  277,  277,  277,  277,  277,  277,
 /*   520 */   277,  277,  277,  277,   48,   44,   43,   42,   30,   29,
 /*   530 */   272,  271,   25,   33,  214,  268,   35,   39,  175,  277,
 /*   540 */   277,  207,  277,  277,  277,  153,  136,  269,  270,  275,
 /*   550 */   276,  281,  282,  280,  279,  277,  278,  267,  266,  225,
 /*   560 */   225,  277,  277,  277,  277,  277,  277,  277,  277,  277,
 /*   570 */   277,   48,   44,   43,   42,   30,   29,  272,  271,   25,
 /*   580 */    33,  214,  268,   35,   39,  175,  277,  277,  277,  277,
 /*   590 */   277,  277,  134,   91,  269,  270,  275,  276,  281,  282,
 /*   600 */   280,  279,  277,  278,  267,  266,  225,  225,  277,  277,
 /*   610 */   277,  277,  277,  277,  277,  277,  277,  277,   48,   44,
 /*   620 */    43,   42,   30,   29,  272,  271,   25,   33,  214,  268,
 /*   630 */    35,   39,  175,  277,  277,  277,  277,  277,  277,  262,
 /*   640 */   277,  269,  270,  275,  276,  281,  282,  280,  279,  277,
 /*   650 */   278,  267,  266,  277,  277,  277,  277,  277,  277,  277,
 /*   660 */   277,  277,  277,  277,  277,   48,   44,   43,   42,   30,
 /*   670 */    29,  272,  271,   25,   33,  214,  268,   35,   39,  277,
 /*   680 */   277,  277,  277,  277,  277,  277,  277,  277,  269,  270,
 /*   690 */   275,  276,  281,  282,  280,  279,  277,  278,  267,  266,
 /*   700 */    48,   44,   43,   42,   30,   29,  272,  271,   25,   33,
 /*   710 */   214,  268,   35,   39,  149,  277,  277,  277,  277,  277,
 /*   720 */   277,  277,  243,  269,  270,  275,  276,  281,  282,  280,
 /*   730 */   279,  277,  278,  267,  266,  152,  164,    5,  277,  110,
 /*   740 */    88,   10,   98,  243,  277,  187,  277,  122,  277,  128,
 /*   750 */   142,  203,  183,  196,  200,  139,   21,  164,  243,   47,
 /*   760 */   151,  277,  249,  243,  277,  222,  229,  105,  277,  232,
 /*   770 */   159,  163,  140,   46,   45,  186,  223,  164,    1,  277,
 /*   780 */   243,  277,  116,  277,   40,   28,  277,    5,  144,  112,
 /*   790 */   193,   10,   98,  102,  165,  277,  243,  122,  277,  277,
 /*   800 */   277,  277,  183,  277,  200,  277,   21,  232,  277,   47,
 /*   810 */   277,  277,  277,  277,  187,  277,   14,  277,  108,  231,
 /*   820 */   277,   73,  196,   46,   45,  186,  223,    9,    1,  151,
 /*   830 */   217,  255,    8,  277,  222,  229,  105,    5,  277,  112,
 /*   840 */   168,   10,   98,  102,  277,  174,  263,  122,  277,  277,
 /*   850 */    14,  277,  183,  231,  200,  277,   21,  277,  277,   47,
 /*   860 */   277,    9,  277,  197,  187,  277,    8,  277,  108,  277,
 /*   870 */   277,   73,  196,   46,   45,  186,  223,  277,    1,  151,
 /*   880 */   217,  255,  277,  277,  222,  229,  105,    5,  277,  112,
 /*   890 */   166,   10,   98,  102,  277,  187,  265,  122,  277,  132,
 /*   900 */   277,  277,  183,  196,  172,  277,   21,  277,  277,   47,
 /*   910 */   151,  277,  211,  277,  187,  222,  229,  105,  126,  277,
 /*   920 */   277,   55,  196,   46,   45,  186,  223,  277,    1,  151,
 /*   930 */   217,  255,  277,  277,  222,  229,  105,    5,  277,  112,
 /*   940 */   193,   10,   98,  102,  277,  187,  277,  122,  277,  130,
 /*   950 */   277,  277,  183,  196,  200,  277,   11,  277,  277,   47,
 /*   960 */   151,  277,  277,  277,  187,  222,  229,  105,  126,  145,
 /*   970 */   277,   59,  196,   46,   45,  186,  223,  243,    1,  151,
 /*   980 */   217,  255,  277,  277,  222,  229,  105,    5,  232,  120,
 /*   990 */   193,   10,   98,  102,  277,  187,  277,  122,  277,  127,
 /*  1000 */   277,  277,  183,  196,  200,  277,   21,  277,  277,   47,
 /*  1010 */   151,  277,  277,  277,  187,  222,  229,  105,  126,  277,
 /*  1020 */   277,   65,  196,   46,   45,  186,  223,  277,    1,  151,
 /*  1030 */   217,  255,  277,  277,  222,  229,  105,    5,  277,  112,
 /*  1040 */   193,   10,   98,  102,  277,  187,  277,  122,  277,  129,
 /*  1050 */   277,  277,  183,  196,  200,  277,   11,  277,  277,   47,
 /*  1060 */   151,  277,  277,  277,  187,  222,  229,  105,  126,  277,
 /*  1070 */   277,   70,  196,   46,   45,  186,  223,  277,  277,  151,
 /*  1080 */   217,  255,  277,  277,  222,  229,  105,  277,  277,  277,
 /*  1090 */   277,  170,  277,  102,  277,  187,  277,  277,  277,   99,
 /*  1100 */   277,  277,   61,  196,  277,  187,  277,  277,  277,  123,
 /*  1110 */   151,  217,  255,  196,  187,  222,  229,  105,  126,  277,
 /*  1120 */   151,   75,  196,  277,  187,  222,  229,  105,  125,  151,
 /*  1130 */   217,  255,  196,  187,  222,  229,  105,   89,  277,  151,
 /*  1140 */    50,  176,  277,  187,  222,  229,  105,  131,  151,  217,
 /*  1150 */   255,  196,  187,  222,  229,  105,  126,  277,  151,   58,
 /*  1160 */   196,  277,  277,  222,  229,  105,  277,  151,  217,  255,
 /*  1170 */   277,  277,  222,  229,  105,  277,  187,   95,  143,  277,
 /*  1180 */   126,  277,  277,   60,  196,  277,  243,  277,  277,  277,
 /*  1190 */   277,  151,  217,  255,  277,  187,  222,  229,  105,  126,
 /*  1200 */   165,  277,   52,  196,  277,  277,  277,  277,  277,  277,
 /*  1210 */   151,  217,  255,  277,  187,  222,  229,  105,  126,  277,
 /*  1220 */   277,   68,  196,  277,  277,  277,  277,  277,  277,  151,
 /*  1230 */   217,  255,  277,  187,  222,  229,  105,  126,  277,  277,
 /*  1240 */    64,  196,  277,  277,  277,  277,  277,  277,  151,  217,
 /*  1250 */   255,  277,  277,  222,  229,  105,  277,  187,  277,  277,
 /*  1260 */   277,  126,  277,  277,   80,  196,  277,  277,  277,  277,
 /*  1270 */   277,  277,  151,  217,  255,  277,  187,  222,  229,  105,
 /*  1280 */   126,  277,  277,   56,  196,  277,  277,  277,  277,  277,
 /*  1290 */   277,  151,  217,  255,  277,  187,  222,  229,  105,  126,
 /*  1300 */   277,  277,   77,  196,  277,  277,  277,  277,  277,  277,
 /*  1310 */   151,  217,  255,  277,  187,  222,  229,  105,  126,  277,
 /*  1320 */   277,   82,  196,  277,  277,  277,  277,  277,  277,  151,
 /*  1330 */   217,  255,  277,  277,  222,  229,  105,  277,  187,  277,
 /*  1340 */   277,  277,  126,  277,  277,   79,  196,  277,  277,  277,
 /*  1350 */   277,  277,  277,  151,  217,  255,  277,  187,  222,  229,
 /*  1360 */   105,  126,  277,  277,   78,  196,  277,  277,  277,  277,
 /*  1370 */   277,  277,  151,  217,  255,  277,  187,  222,  229,  105,
 /*  1380 */   126,  277,  277,   63,  171,  277,  277,  277,  277,  277,
 /*  1390 */   277,  151,  217,  255,  277,  187,  222,  229,  105,  126,
 /*  1400 */   277,  277,   83,  196,  277,  277,  277,  277,  277,  277,
 /*  1410 */   151,  217,  255,  277,  277,  222,  229,  105,  277,  187,
 /*  1420 */   277,  277,  277,  126,  277,  277,   86,  196,  277,  277,
 /*  1430 */   277,  277,  277,  277,  151,  217,  255,  277,  187,  222,
 /*  1440 */   229,  105,  126,  277,  277,   53,  196,  277,  277,  277,
 /*  1450 */   277,  277,  277,  151,  217,  255,  277,  187,  222,  229,
 /*  1460 */   105,  126,  277,  277,   71,  196,  277,  277,  277,  277,
 /*  1470 */   277,  277,  151,  217,  255,  277,  187,  222,  229,  105,
 /*  1480 */   126,  277,  277,   84,  196,  277,  277,  277,  277,  277,
 /*  1490 */   277,  151,  217,  255,  277,  277,  222,  229,  105,  277,
 /*  1500 */   187,  277,  277,  277,  126,  277,  277,   62,  196,  277,
 /*  1510 */   277,  277,  277,  277,  277,  151,  217,  255,  277,  187,
 /*  1520 */   222,  229,  105,  126,  277,  277,   69,  196,  277,  277,
 /*  1530 */   277,  277,  277,  277,  151,  217,  255,  277,  187,  222,
 /*  1540 */   229,  105,  126,  277,  277,   49,  196,  277,  277,  277,
 /*  1550 */   277,  277,  277,  151,  217,  255,  277,  187,  222,  229,
 /*  1560 */   105,  100,  277,  277,   72,  196,  277,  277,  277,  277,
 /*  1570 */   277,  277,  151,  217,  255,  277,  277,  222,  229,  105,
 /*  1580 */   277,  187,  277,  277,  277,  126,  277,  277,   85,  196,
 /*  1590 */   277,  277,  277,  277,  277,  277,  151,  217,  255,  277,
 /*  1600 */   187,  222,  229,  105,  103,  277,  277,   74,  196,  277,
 /*  1610 */   277,  277,  277,  277,  277,  151,  217,  255,  277,  187,
 /*  1620 */   222,  229,  105,  109,  277,  277,   81,  196,  277,  277,
 /*  1630 */   277,  277,  277,  277,  151,  217,  255,  277,  187,  222,
 /*  1640 */   229,  105,  126,  277,  277,   54,  196,  277,  277,  277,
 /*  1650 */   277,  277,  277,  151,  217,  255,  277,  277,  222,  229,
 /*  1660 */   105,  277,  187,  277,  277,  277,  126,  277,  277,   51,
 /*  1670 */   196,  277,  277,  277,  277,  277,  277,  151,  217,  255,
 /*  1680 */   277,  187,  222,  229,  105,  126,  277,  277,   67,  196,
 /*  1690 */   277,  277,  277,  277,  277,  277,  151,  217,  255,  277,
 /*  1700 */   187,  222,  229,  105,  126,  277,  277,   57,  196,  277,
 /*  1710 */   277,  277,  277,  277,  277,  151,  217,  255,  277,  187,
 /*  1720 */   222,  229,  105,  126,  277,  277,   66,  196,  335,  277,
 /*  1730 */   277,  277,  277,  277,  151,  217,  255,  277,  185,  222,
 /*  1740 */   229,  105,  277,  187,  277,  277,  277,  126,  335,  277,
 /*  1750 */    76,  196,  277,  335,  277,  277,    4,  277,  151,  217,
 /*  1760 */   255,  163,  141,  222,  229,  105,  277,   93,  155,  277,
 /*  1770 */   243,  277,  277,  277,   40,   28,  243,  277,  163,  138,
 /*  1780 */    40,   28,   14,  277,  165,  231,  277,  243,  277,  277,
 /*  1790 */   165,   40,   28,    9,  277,  198,  277,  277,    8,  277,
 /*  1800 */   277,  165,
    );
    static public $yy_lookahead = array(
 /*     0 */     1,    5,    6,    7,    8,    9,   10,   30,   13,   13,
 /*    10 */    15,   16,   82,   17,   18,   74,   75,   76,   77,   23,
 /*    20 */    90,   22,   51,   24,   28,   30,    1,   51,   29,    4,
 /*    30 */    54,  101,   56,   34,   35,   36,   37,   38,   39,   40,
 /*    40 */    41,   42,   43,   44,   45,   46,   47,    1,    1,   24,
 /*    50 */    25,    4,   15,   31,   29,   81,   57,   58,   59,   60,
 /*    60 */    61,   62,   63,   64,   65,   66,   67,   68,   94,   95,
 /*    70 */    24,   24,   10,   11,   12,   29,   29,   55,  104,   32,
 /*    80 */    34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
 /*    90 */    44,   45,   46,   47,    1,    1,    1,    1,    4,    4,
 /*   100 */     4,   15,   13,   57,   58,   59,   60,   61,   62,   63,
 /*   110 */    64,   65,   66,   67,   68,   75,   76,   77,   24,   24,
 /*   120 */    24,   32,   20,   29,   29,   29,   33,   34,   35,   36,
 /*   130 */    37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
 /*   140 */    47,    1,   13,   14,    1,   16,   15,    4,   81,   20,
 /*   150 */    57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
 /*   160 */    67,   68,    6,   13,   14,   25,   16,   24,    1,   13,
 /*   170 */    13,  104,   29,   16,   34,   35,   36,   37,   38,   39,
 /*   180 */    40,   41,   42,   43,   44,   45,   46,   47,   13,   24,
 /*   190 */    15,   16,   13,   26,   29,   16,   81,   57,   58,   59,
 /*   200 */    60,   61,   62,   63,   64,   65,   66,   67,   68,    1,
 /*   210 */    53,  105,   85,   76,   81,   82,   89,   80,   91,  104,
 /*   220 */    83,   84,   15,   90,    6,   69,   70,   19,   91,   92,
 /*   230 */    93,   13,   53,   96,   97,   98,   31,  104,   33,   32,
 /*   240 */   103,    2,   34,   35,   36,   37,   38,   39,   40,   41,
 /*   250 */    42,   43,   44,   45,   46,   47,    1,    1,   13,    4,
 /*   260 */    51,   16,    4,   54,  106,   57,   58,   59,   60,   61,
 /*   270 */    62,   63,   64,   65,   66,   67,   68,   26,   20,   31,
 /*   280 */    24,   33,   89,   32,   91,   29,    1,   69,   70,   34,
 /*   290 */    35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
 /*   300 */    45,   46,   47,    1,   14,   13,    4,   77,   16,   79,
 /*   310 */    20,   87,   57,   58,   59,   60,   61,   62,   63,   64,
 /*   320 */    65,   66,   67,   68,    1,  101,  105,    4,   24,   72,
 /*   330 */    73,  109,  110,   29,   14,   16,   34,   35,   36,   37,
 /*   340 */    38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
 /*   350 */     1,   99,  100,    4,   13,   16,   89,   16,   91,   57,
 /*   360 */    58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
 /*   370 */    68,   51,   53,   82,  104,   16,   33,   14,   16,    4,
 /*   380 */    15,   90,    2,   34,   35,   36,   37,   38,   39,   40,
 /*   390 */    41,   42,   43,   44,   45,   46,   47,    1,   48,   21,
 /*   400 */     4,    4,   14,   32,   87,   87,   57,   58,   59,   60,
 /*   410 */    61,   62,   63,   64,   65,   66,   67,   68,  101,  101,
 /*   420 */    82,   15,   30,   16,   16,   90,  101,   99,   90,  102,
 /*   430 */    34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
 /*   440 */    44,   45,   46,   47,    1,    3,   99,   24,   78,   11,
 /*   450 */   110,  111,   88,   57,   58,   59,   60,   61,   62,   63,
 /*   460 */    64,   65,   66,   67,   68,  101,  111,   86,   86,  111,
 /*   470 */   111,  111,  111,  111,  111,  111,   33,   34,   35,   36,
 /*   480 */    37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
 /*   490 */    47,    1,    2,  111,  111,  111,  111,  111,   87,   87,
 /*   500 */    57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
 /*   510 */    67,   68,  101,  101,  111,  111,  111,  111,  111,  111,
 /*   520 */   111,  111,  111,  111,   34,   35,   36,   37,   38,   39,
 /*   530 */    40,   41,   42,   43,   44,   45,   46,   47,    1,  111,
 /*   540 */   111,    4,  111,  111,  111,   87,   87,   57,   58,   59,
 /*   550 */    60,   61,   62,   63,   64,   65,   66,   67,   68,  101,
 /*   560 */   101,  111,  111,  111,  111,  111,  111,  111,  111,  111,
 /*   570 */   111,   34,   35,   36,   37,   38,   39,   40,   41,   42,
 /*   580 */    43,   44,   45,   46,   47,    1,  111,  111,  111,  111,
 /*   590 */   111,  111,   87,   87,   57,   58,   59,   60,   61,   62,
 /*   600 */    63,   64,   65,   66,   67,   68,  101,  101,  111,  111,
 /*   610 */   111,  111,  111,  111,  111,  111,  111,  111,   34,   35,
 /*   620 */    36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
 /*   630 */    46,   47,    1,  111,  111,  111,  111,  111,  111,   55,
 /*   640 */   111,   57,   58,   59,   60,   61,   62,   63,   64,   65,
 /*   650 */    66,   67,   68,  111,  111,  111,  111,  111,  111,  111,
 /*   660 */   111,  111,  111,  111,  111,   34,   35,   36,   37,   38,
 /*   670 */    39,   40,   41,   42,   43,   44,   45,   46,   47,  111,
 /*   680 */   111,  111,  111,  111,  111,  111,  111,  111,   57,   58,
 /*   690 */    59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
 /*   700 */    34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
 /*   710 */    44,   45,   46,   47,   82,  111,  111,  111,  111,  111,
 /*   720 */   111,  111,   90,   57,   58,   59,   60,   61,   62,   63,
 /*   730 */    64,   65,   66,   67,   68,   82,  104,   13,  111,   15,
 /*   740 */    16,   17,   18,   90,  111,   76,  111,   23,  111,   80,
 /*   750 */    82,   27,   28,   84,   30,   82,   32,  104,   90,   35,
 /*   760 */    91,  111,   93,   90,  111,   96,   97,   98,  111,  101,
 /*   770 */    19,   81,   82,   49,   50,   51,   52,  104,   54,  111,
 /*   780 */    90,  111,   31,  111,   94,   95,  111,   13,   82,   15,
 /*   790 */    16,   17,   18,   69,  104,  111,   90,   23,  111,  111,
 /*   800 */   111,  111,   28,  111,   30,  111,   32,  101,  111,   35,
 /*   810 */   111,  111,  111,  111,   76,  111,   13,  111,   80,   16,
 /*   820 */   111,   83,   84,   49,   50,   51,   52,   24,   54,   91,
 /*   830 */    92,   93,   29,  111,   96,   97,   98,   13,  111,   15,
 /*   840 */    16,   17,   18,   69,  111,  107,  108,   23,  111,  111,
 /*   850 */    13,  111,   28,   16,   30,  111,   32,  111,  111,   35,
 /*   860 */   111,   24,  111,   26,   76,  111,   29,  111,   80,  111,
 /*   870 */   111,   83,   84,   49,   50,   51,   52,  111,   54,   91,
 /*   880 */    92,   93,  111,  111,   96,   97,   98,   13,  111,   15,
 /*   890 */    16,   17,   18,   69,  111,   76,  108,   23,  111,   80,
 /*   900 */   111,  111,   28,   84,   30,  111,   32,  111,  111,   35,
 /*   910 */    91,  111,   93,  111,   76,   96,   97,   98,   80,  111,
 /*   920 */   111,   83,   84,   49,   50,   51,   52,  111,   54,   91,
 /*   930 */    92,   93,  111,  111,   96,   97,   98,   13,  111,   15,
 /*   940 */    16,   17,   18,   69,  111,   76,  111,   23,  111,   80,
 /*   950 */   111,  111,   28,   84,   30,  111,   32,  111,  111,   35,
 /*   960 */    91,  111,  111,  111,   76,   96,   97,   98,   80,   82,
 /*   970 */   111,   83,   84,   49,   50,   51,   52,   90,   54,   91,
 /*   980 */    92,   93,  111,  111,   96,   97,   98,   13,  101,   15,
 /*   990 */    16,   17,   18,   69,  111,   76,  111,   23,  111,   80,
 /*  1000 */   111,  111,   28,   84,   30,  111,   32,  111,  111,   35,
 /*  1010 */    91,  111,  111,  111,   76,   96,   97,   98,   80,  111,
 /*  1020 */   111,   83,   84,   49,   50,   51,   52,  111,   54,   91,
 /*  1030 */    92,   93,  111,  111,   96,   97,   98,   13,  111,   15,
 /*  1040 */    16,   17,   18,   69,  111,   76,  111,   23,  111,   80,
 /*  1050 */   111,  111,   28,   84,   30,  111,   32,  111,  111,   35,
 /*  1060 */    91,  111,  111,  111,   76,   96,   97,   98,   80,  111,
 /*  1070 */   111,   83,   84,   49,   50,   51,   52,  111,  111,   91,
 /*  1080 */    92,   93,  111,  111,   96,   97,   98,  111,  111,  111,
 /*  1090 */   111,  103,  111,   69,  111,   76,  111,  111,  111,   80,
 /*  1100 */   111,  111,   83,   84,  111,   76,  111,  111,  111,   80,
 /*  1110 */    91,   92,   93,   84,   76,   96,   97,   98,   80,  111,
 /*  1120 */    91,   83,   84,  111,   76,   96,   97,   98,   80,   91,
 /*  1130 */    92,   93,   84,   76,   96,   97,   98,   80,  111,   91,
 /*  1140 */    83,   84,  111,   76,   96,   97,   98,   80,   91,   92,
 /*  1150 */    93,   84,   76,   96,   97,   98,   80,  111,   91,   83,
 /*  1160 */    84,  111,  111,   96,   97,   98,  111,   91,   92,   93,
 /*  1170 */   111,  111,   96,   97,   98,  111,   76,   81,   82,  111,
 /*  1180 */    80,  111,  111,   83,   84,  111,   90,  111,  111,  111,
 /*  1190 */   111,   91,   92,   93,  111,   76,   96,   97,   98,   80,
 /*  1200 */   104,  111,   83,   84,  111,  111,  111,  111,  111,  111,
 /*  1210 */    91,   92,   93,  111,   76,   96,   97,   98,   80,  111,
 /*  1220 */   111,   83,   84,  111,  111,  111,  111,  111,  111,   91,
 /*  1230 */    92,   93,  111,   76,   96,   97,   98,   80,  111,  111,
 /*  1240 */    83,   84,  111,  111,  111,  111,  111,  111,   91,   92,
 /*  1250 */    93,  111,  111,   96,   97,   98,  111,   76,  111,  111,
 /*  1260 */   111,   80,  111,  111,   83,   84,  111,  111,  111,  111,
 /*  1270 */   111,  111,   91,   92,   93,  111,   76,   96,   97,   98,
 /*  1280 */    80,  111,  111,   83,   84,  111,  111,  111,  111,  111,
 /*  1290 */   111,   91,   92,   93,  111,   76,   96,   97,   98,   80,
 /*  1300 */   111,  111,   83,   84,  111,  111,  111,  111,  111,  111,
 /*  1310 */    91,   92,   93,  111,   76,   96,   97,   98,   80,  111,
 /*  1320 */   111,   83,   84,  111,  111,  111,  111,  111,  111,   91,
 /*  1330 */    92,   93,  111,  111,   96,   97,   98,  111,   76,  111,
 /*  1340 */   111,  111,   80,  111,  111,   83,   84,  111,  111,  111,
 /*  1350 */   111,  111,  111,   91,   92,   93,  111,   76,   96,   97,
 /*  1360 */    98,   80,  111,  111,   83,   84,  111,  111,  111,  111,
 /*  1370 */   111,  111,   91,   92,   93,  111,   76,   96,   97,   98,
 /*  1380 */    80,  111,  111,   83,   84,  111,  111,  111,  111,  111,
 /*  1390 */   111,   91,   92,   93,  111,   76,   96,   97,   98,   80,
 /*  1400 */   111,  111,   83,   84,  111,  111,  111,  111,  111,  111,
 /*  1410 */    91,   92,   93,  111,  111,   96,   97,   98,  111,   76,
 /*  1420 */   111,  111,  111,   80,  111,  111,   83,   84,  111,  111,
 /*  1430 */   111,  111,  111,  111,   91,   92,   93,  111,   76,   96,
 /*  1440 */    97,   98,   80,  111,  111,   83,   84,  111,  111,  111,
 /*  1450 */   111,  111,  111,   91,   92,   93,  111,   76,   96,   97,
 /*  1460 */    98,   80,  111,  111,   83,   84,  111,  111,  111,  111,
 /*  1470 */   111,  111,   91,   92,   93,  111,   76,   96,   97,   98,
 /*  1480 */    80,  111,  111,   83,   84,  111,  111,  111,  111,  111,
 /*  1490 */   111,   91,   92,   93,  111,  111,   96,   97,   98,  111,
 /*  1500 */    76,  111,  111,  111,   80,  111,  111,   83,   84,  111,
 /*  1510 */   111,  111,  111,  111,  111,   91,   92,   93,  111,   76,
 /*  1520 */    96,   97,   98,   80,  111,  111,   83,   84,  111,  111,
 /*  1530 */   111,  111,  111,  111,   91,   92,   93,  111,   76,   96,
 /*  1540 */    97,   98,   80,  111,  111,   83,   84,  111,  111,  111,
 /*  1550 */   111,  111,  111,   91,   92,   93,  111,   76,   96,   97,
 /*  1560 */    98,   80,  111,  111,   83,   84,  111,  111,  111,  111,
 /*  1570 */   111,  111,   91,   92,   93,  111,  111,   96,   97,   98,
 /*  1580 */   111,   76,  111,  111,  111,   80,  111,  111,   83,   84,
 /*  1590 */   111,  111,  111,  111,  111,  111,   91,   92,   93,  111,
 /*  1600 */    76,   96,   97,   98,   80,  111,  111,   83,   84,  111,
 /*  1610 */   111,  111,  111,  111,  111,   91,   92,   93,  111,   76,
 /*  1620 */    96,   97,   98,   80,  111,  111,   83,   84,  111,  111,
 /*  1630 */   111,  111,  111,  111,   91,   92,   93,  111,   76,   96,
 /*  1640 */    97,   98,   80,  111,  111,   83,   84,  111,  111,  111,
 /*  1650 */   111,  111,  111,   91,   92,   93,  111,  111,   96,   97,
 /*  1660 */    98,  111,   76,  111,  111,  111,   80,  111,  111,   83,
 /*  1670 */    84,  111,  111,  111,  111,  111,  111,   91,   92,   93,
 /*  1680 */   111,   76,   96,   97,   98,   80,  111,  111,   83,   84,
 /*  1690 */   111,  111,  111,  111,  111,  111,   91,   92,   93,  111,
 /*  1700 */    76,   96,   97,   98,   80,  111,  111,   83,   84,  111,
 /*  1710 */   111,  111,  111,  111,  111,   91,   92,   93,  111,   76,
 /*  1720 */    96,   97,   98,   80,  111,  111,   83,   84,    4,  111,
 /*  1730 */   111,  111,  111,  111,   91,   92,   93,  111,   14,   96,
 /*  1740 */    97,   98,  111,   76,  111,  111,  111,   80,   24,  111,
 /*  1750 */    83,   84,  111,   29,  111,  111,   32,  111,   91,   92,
 /*  1760 */    93,   81,   82,   96,   97,   98,  111,   81,   82,  111,
 /*  1770 */    90,  111,  111,  111,   94,   95,   90,  111,   81,   82,
 /*  1780 */    94,   95,   13,  111,  104,   16,  111,   90,  111,  111,
 /*  1790 */   104,   94,   95,   24,  111,   26,  111,  111,   29,  111,
 /*  1800 */   111,  104,
);
    const YY_SHIFT_USE_DFLT = -30;
    const YY_SHIFT_MAX = 200;
    static public $yy_shift_ofst = array(
 /*     0 */   442,  824,  824,  774,  774,  724,  774,  774,  774,  874,
 /*    10 */   774,  774,  774,  974,  774,  774,  874,  774,  774,  774,
 /*    20 */   774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
 /*    30 */   774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
 /*    40 */   774,  924,  924, 1024, 1024, 1024, 1024, 1024, 1024,   -1,
 /*    50 */    46,   46,   46,  443,  396,  537,  584,  349,  490,  208,
 /*    60 */    93,  140,  302,  255,  631,  631,  631,  631,  631,  631,
 /*    70 */   631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
 /*    80 */   631,  631,  631,  631,  631,  666,  666,   -4,   47,  143,
 /*    90 */    -4,  837, 1769,   95,  803,   95,  803,  256,  207,   25,
 /*   100 */    96,  129,  218,   94,   62,  -24,  245,  245,  167,  323,
 /*   110 */   292,  165,  245,  245,  245,  245,  207,  245,  245,  245,
 /*   120 */   341,  207,  304,  285,  285,  285,  285,  285,  285,  285,
 /*   130 */   285,  285,  -30,  156,  150,  175,  179,  157,  165,  165,
 /*   140 */   165,  165,  165,  165,  165,  165,  165,  165,  209,  165,
 /*   150 */   165,  209,  165,  245,  165,  165,  285,  423,  438,  423,
 /*   160 */   285,  239,  239,  285,  -30,  -30, 1724,   -5,  251,  248,
 /*   170 */   205,  258,  320,   89,   22,  319,  290,  751,  365,  375,
 /*   180 */   380,  363,  406,  359,  131,  407,  -23,  397,  408,  362,
 /*   190 */   343,  378,  392,  371,  388,  339,  102,   86,   37,  350,
 /*   200 */   -29,
);
    const YY_REDUCE_USE_DFLT = -71;
    const YY_REDUCE_MAX = 165;
    static public $yy_reduce_ofst = array(
 /*     0 */   257,  738,  788,  988,  137, 1057,  888, 1505, 1481, 1524,
 /*    10 */  1119, 1100,  938, 1076,  838, 1038, 1019, 1667, 1319, 1300,
 /*    20 */  1343, 1362, 1381, 1281, 1262, 1181, 1157, 1200, 1219, 1238,
 /*    30 */  1400, 1424, 1586, 1605, 1624, 1643, 1562, 1543, 1462, 1443,
 /*    40 */  1138,  819,  669,  869,  919,  969, 1048, 1029, 1067,  690,
 /*    50 */  1686, 1697, 1680,  -26,  -26,  -26,  -26,  -26,  -26,  -26,
 /*    60 */   -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,
 /*    70 */   -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,
 /*    80 */   -26,  -26,  -26,  -26,  -26,  -26,  -26,  -59,  133, 1096,
 /*    90 */    40,  668,  887,  632,  706,  673,  -70,  653,  127,   67,
 /*   100 */    67,  364,  222,   67,  230,  252,  411,  318,   67,   67,
 /*   110 */   224,  291,  224,  458,  317,  412,  267,  506,  505,  459,
 /*   120 */   224,  193,  338,   67,  115,   67,   67,   67,   67,   67,
 /*   130 */    67,   67,   67,  340,  325,  327,  325,  325,  335,  335,
 /*   140 */   335,  335,  335,  335,  335,  335,  335,  335,  328,  335,
 /*   150 */   335,  347,  335,  325,  335,  335,  270,  381,  370,  382,
 /*   160 */   270,  158,  158,  270,  221,  106,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(3, ),
        /* 1 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 2 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 3 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 4 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 5 */ array(13, 15, 16, 17, 18, 23, 27, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 6 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 7 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 8 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 9 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 10 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 11 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 12 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 13 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 14 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 15 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 16 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 17 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 18 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 19 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 20 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 21 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 22 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 23 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 24 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 25 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 26 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 27 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 28 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 29 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 30 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 31 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 32 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 33 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 34 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 35 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 36 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 37 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 38 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 39 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 40 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 41 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 42 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 54, 69, ),
        /* 43 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 69, ),
        /* 44 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 69, ),
        /* 45 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 69, ),
        /* 46 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 69, ),
        /* 47 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 69, ),
        /* 48 */ array(13, 15, 16, 17, 18, 23, 28, 30, 32, 35, 49, 50, 51, 52, 69, ),
        /* 49 */ array(1, 22, 24, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 50 */ array(1, 24, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 51 */ array(1, 24, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 52 */ array(1, 24, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 53 */ array(1, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 54 */ array(1, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 55 */ array(1, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 56 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 57 */ array(1, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 58 */ array(1, 2, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 59 */ array(1, 19, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 60 */ array(1, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 61 */ array(1, 25, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 62 */ array(1, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 63 */ array(1, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 64 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 65 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 66 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 67 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 68 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 69 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 70 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 71 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 72 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 73 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 74 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 75 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 76 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 77 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 78 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 79 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 80 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 81 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 82 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 83 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 84 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 85 */ array(34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 86 */ array(34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, ),
        /* 87 */ array(5, 6, 7, 8, 9, 10, 13, 17, 18, 23, 28, ),
        /* 88 */ array(1, 4, 24, 29, 32, ),
        /* 89 */ array(1, 4, 24, 29, ),
        /* 90 */ array(5, 6, 7, 8, 9, 10, 13, 17, 18, 23, 28, ),
        /* 91 */ array(13, 16, 24, 26, 29, ),
        /* 92 */ array(13, 16, 24, 26, 29, ),
        /* 93 */ array(1, 4, 24, 29, ),
        /* 94 */ array(13, 16, 24, 29, ),
        /* 95 */ array(1, 4, 24, 29, ),
        /* 96 */ array(13, 16, 24, 29, ),
        /* 97 */ array(1, 24, 29, ),
        /* 98 */ array(15, 32, ),
        /* 99 */ array(1, 4, 24, 25, 29, ),
        /* 100 */ array(1, 4, 24, 29, ),
        /* 101 */ array(13, 14, 16, 20, ),
        /* 102 */ array(6, 13, 69, 70, ),
        /* 103 */ array(1, 4, 24, 29, ),
        /* 104 */ array(10, 11, 12, ),
        /* 105 */ array(51, 54, 56, ),
        /* 106 */ array(13, 16, ),
        /* 107 */ array(13, 16, ),
        /* 108 */ array(1, 26, ),
        /* 109 */ array(1, 4, ),
        /* 110 */ array(13, 16, ),
        /* 111 */ array(24, 29, ),
        /* 112 */ array(13, 16, ),
        /* 113 */ array(13, 16, ),
        /* 114 */ array(13, 16, ),
        /* 115 */ array(13, 16, ),
        /* 116 */ array(15, 32, ),
        /* 117 */ array(13, 16, ),
        /* 118 */ array(13, 16, ),
        /* 119 */ array(13, 16, ),
        /* 120 */ array(13, 16, ),
        /* 121 */ array(15, 32, ),
        /* 122 */ array(24, 29, ),
        /* 123 */ array(1, ),
        /* 124 */ array(1, ),
        /* 125 */ array(1, ),
        /* 126 */ array(1, ),
        /* 127 */ array(1, ),
        /* 128 */ array(1, ),
        /* 129 */ array(1, ),
        /* 130 */ array(1, ),
        /* 131 */ array(1, ),
        /* 132 */ array(),
        /* 133 */ array(6, 13, 69, 70, ),
        /* 134 */ array(13, 14, 16, ),
        /* 135 */ array(13, 15, 16, ),
        /* 136 */ array(13, 16, 53, ),
        /* 137 */ array(13, 16, 53, ),
        /* 138 */ array(24, 29, ),
        /* 139 */ array(24, 29, ),
        /* 140 */ array(24, 29, ),
        /* 141 */ array(24, 29, ),
        /* 142 */ array(24, 29, ),
        /* 143 */ array(24, 29, ),
        /* 144 */ array(24, 29, ),
        /* 145 */ array(24, 29, ),
        /* 146 */ array(24, 29, ),
        /* 147 */ array(24, 29, ),
        /* 148 */ array(51, 54, ),
        /* 149 */ array(24, 29, ),
        /* 150 */ array(24, 29, ),
        /* 151 */ array(51, 54, ),
        /* 152 */ array(24, 29, ),
        /* 153 */ array(13, 16, ),
        /* 154 */ array(24, 29, ),
        /* 155 */ array(24, 29, ),
        /* 156 */ array(1, ),
        /* 157 */ array(24, ),
        /* 158 */ array(11, ),
        /* 159 */ array(24, ),
        /* 160 */ array(1, ),
        /* 161 */ array(2, ),
        /* 162 */ array(2, ),
        /* 163 */ array(1, ),
        /* 164 */ array(),
        /* 165 */ array(),
        /* 166 */ array(4, 14, 24, 29, 32, ),
        /* 167 */ array(13, 15, 16, 30, ),
        /* 168 */ array(26, 32, ),
        /* 169 */ array(31, 33, ),
        /* 170 */ array(31, 33, ),
        /* 171 */ array(4, 20, ),
        /* 172 */ array(14, 51, ),
        /* 173 */ array(13, 32, ),
        /* 174 */ array(31, 55, ),
        /* 175 */ array(16, 53, ),
        /* 176 */ array(14, 20, ),
        /* 177 */ array(19, 31, ),
        /* 178 */ array(15, ),
        /* 179 */ array(4, ),
        /* 180 */ array(2, ),
        /* 181 */ array(14, ),
        /* 182 */ array(15, ),
        /* 183 */ array(16, ),
        /* 184 */ array(15, ),
        /* 185 */ array(16, ),
        /* 186 */ array(30, ),
        /* 187 */ array(4, ),
        /* 188 */ array(16, ),
        /* 189 */ array(16, ),
        /* 190 */ array(33, ),
        /* 191 */ array(21, ),
        /* 192 */ array(30, ),
        /* 193 */ array(32, ),
        /* 194 */ array(14, ),
        /* 195 */ array(16, ),
        /* 196 */ array(20, ),
        /* 197 */ array(15, ),
        /* 198 */ array(15, ),
        /* 199 */ array(48, ),
        /* 200 */ array(51, ),
        /* 201 */ array(),
        /* 202 */ array(),
        /* 203 */ array(),
        /* 204 */ array(),
        /* 205 */ array(),
        /* 206 */ array(),
        /* 207 */ array(),
        /* 208 */ array(),
        /* 209 */ array(),
        /* 210 */ array(),
        /* 211 */ array(),
        /* 212 */ array(),
        /* 213 */ array(),
        /* 214 */ array(),
        /* 215 */ array(),
        /* 216 */ array(),
        /* 217 */ array(),
        /* 218 */ array(),
        /* 219 */ array(),
        /* 220 */ array(),
        /* 221 */ array(),
        /* 222 */ array(),
        /* 223 */ array(),
        /* 224 */ array(),
        /* 225 */ array(),
        /* 226 */ array(),
        /* 227 */ array(),
        /* 228 */ array(),
        /* 229 */ array(),
        /* 230 */ array(),
        /* 231 */ array(),
        /* 232 */ array(),
        /* 233 */ array(),
        /* 234 */ array(),
        /* 235 */ array(),
        /* 236 */ array(),
        /* 237 */ array(),
        /* 238 */ array(),
        /* 239 */ array(),
        /* 240 */ array(),
        /* 241 */ array(),
        /* 242 */ array(),
        /* 243 */ array(),
        /* 244 */ array(),
        /* 245 */ array(),
        /* 246 */ array(),
        /* 247 */ array(),
        /* 248 */ array(),
        /* 249 */ array(),
        /* 250 */ array(),
        /* 251 */ array(),
        /* 252 */ array(),
        /* 253 */ array(),
        /* 254 */ array(),
        /* 255 */ array(),
        /* 256 */ array(),
        /* 257 */ array(),
        /* 258 */ array(),
        /* 259 */ array(),
        /* 260 */ array(),
        /* 261 */ array(),
        /* 262 */ array(),
        /* 263 */ array(),
        /* 264 */ array(),
        /* 265 */ array(),
        /* 266 */ array(),
        /* 267 */ array(),
        /* 268 */ array(),
        /* 269 */ array(),
        /* 270 */ array(),
        /* 271 */ array(),
        /* 272 */ array(),
        /* 273 */ array(),
        /* 274 */ array(),
        /* 275 */ array(),
        /* 276 */ array(),
        /* 277 */ array(),
        /* 278 */ array(),
        /* 279 */ array(),
        /* 280 */ array(),
        /* 281 */ array(),
        /* 282 */ array(),
        /* 283 */ array(),
);
    static public $yy_default = array(
 /*     0 */   286,  434,  448,  410,  410,  448,  448,  448,  448,  448,
 /*    10 */   448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
 /*    20 */   448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
 /*    30 */   448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
 /*    40 */   448,  448,  448,  448,  448,  448,  448,  448,  448,  331,
 /*    50 */   331,  331,  314,  448,  448,  448,  448,  448,  448,  448,
 /*    60 */   448,  336,  448,  448,  342,  338,  363,  360,  351,  364,
 /*    70 */   409,  308,  333,  437,  336,  436,  435,  354,  408,  341,
 /*    80 */   359,  310,  356,  317,  355,  365,  366,  289,  376,  344,
 /*    90 */   284,  331,  331,  350,  331,  382,  331,  331,  448,  344,
 /*   100 */   344,  448,  448,  344,  448,  383,  448,  448,  344,  344,
 /*   110 */   448,  331,  448,  448,  448,  448,  448,  448,  448,  448,
 /*   120 */   448,  448,  331,  368,  327,  369,  344,  347,  353,  370,
 /*   130 */   348,  346,  417,  448,  448,  448,  391,  384,  320,  304,
 /*   140 */   319,  315,  322,  305,  325,  324,  316,  321,  387,  306,
 /*   150 */   323,  388,  313,  402,  311,  307,  382,  447,  300,  447,
 /*   160 */   328,  412,  411,  350,  416,  416,  376,  448,  376,  448,
 /*   170 */   448,  367,  372,  401,  448,  448,  367,  448,  448,  448,
 /*   180 */   399,  399,  448,  448,  448,  448,  448,  448,  448,  448,
 /*   190 */   448,  339,  374,  376,  448,  448,  367,  448,  448,  378,
 /*   200 */   372,  378,  343,  326,  287,  285,  340,  400,  332,  406,
 /*   210 */   318,  418,  446,  405,  361,  373,  375,  345,  414,  413,
 /*   220 */   415,  371,  377,  379,  392,  397,  393,  389,  385,  380,
 /*   230 */   381,  399,  398,  293,  294,  295,  292,  291,  288,  290,
 /*   240 */   296,  297,  329,  330,  302,  301,  298,  299,  394,  352,
 /*   250 */   442,  444,  443,  440,  439,  349,  438,  445,  441,  395,
 /*   260 */   404,  407,  396,  432,  431,  433,  430,  429,  362,  419,
 /*   270 */   420,  358,  357,  390,  386,  421,  422,  427,  428,  426,
 /*   280 */   425,  423,  424,  403,
);
    const YYNOCODE = 112;
    const YYSTACKDEPTH = 500;
    const YYNSTATE = 284;
    const YYNRULE = 164;
    const YYERRORSYMBOL = 71;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    public static $yyFallback = array(
    );

    public $yyidx;                    /* Index of top element in stack */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    public $yystack = array();  /* The parser's stack */

    public $yyTokenName = array(
  '$',             'VERT',          'COLON',         'SETSTRICT',   
  'RDEL',          'COMMENT',       'TEXT',          'STRIPON',     
  'STRIPOFF',      'BLOCKSOURCE',   'LITERALSTART',  'LITERALEND',  
  'LITERAL',       'LDEL',          'EQUAL',         'DOLLAR',      
  'ID',            'LDELIF',        'LDELFOR',       'SEMICOLON',   
  'INCDEC',        'TO',            'STEP',          'LDELFOREACH', 
  'SPACE',         'AS',            'APTR',          'SMARTYBLOCKCHILDPARENT',
  'LDELSLASH',     'ATTR',          'INTEGER',       'COMMA',       
  'OPENP',         'CLOSEP',        'MATH',          'UNIMATH',     
  'ANDSYM',        'ISIN',          'ISDIVBY',       'ISNOTDIVBY',  
  'ISEVEN',        'ISNOTEVEN',     'ISEVENBY',      'ISNOTEVENBY', 
  'ISODD',         'ISNOTODD',      'ISODDBY',       'ISNOTODDBY',  
  'QMARK',         'NOT',           'TYPECAST',      'DOT',         
  'SINGLEQUOTESTRING',  'AT',            'OPENB',         'CLOSEB',      
  'PTR',           'EQUALS',        'NOTEQUALS',     'GREATERTHAN', 
  'LESSTHAN',      'GREATEREQUAL',  'LESSEQUAL',     'IDENTITY',    
  'NONEIDENTITY',  'MOD',           'LAND',          'LOR',         
  'LXOR',          'QUOTE',         'DOLLARID',      'error',       
  'start',         'strictmode',    'template',      'template_element',
  'smartytag',     'literal',       'literal_elements',  'literal_element',
  'value',         'modifierlist',  'attributes',    'expr',        
  'variable',      'statements',    'optspace',      'varvar',      
  'foraction',     'statement',     'attribute',     'variablebase',
  'ternary',       'array',         'ifcond',        'lop',         
  'function',      'doublequoted_with_quotes',  'variableinternal',  'indexdef',    
  'objectelement',  'varvarele',     'method',        'params',      
  'modifier',      'modparameters',  'modparameter',  'arrayelements',
  'arrayelement',  'doublequoted',  'doublequotedcontent',
    );

    public static $yyRuleName = array(
 /*   0 */ "start ::= strictmode template",
 /*   1 */ "strictmode ::= SETSTRICT",
 /*   2 */ "strictmode ::=",
 /*   3 */ "template ::= template_element",
 /*   4 */ "template ::= template template_element",
 /*   5 */ "template ::=",
 /*   6 */ "template_element ::= smartytag RDEL",
 /*   7 */ "template_element ::= COMMENT",
 /*   8 */ "template_element ::= literal",
 /*   9 */ "template_element ::= TEXT",
 /*  10 */ "template_element ::= STRIPON",
 /*  11 */ "template_element ::= STRIPOFF",
 /*  12 */ "template_element ::= BLOCKSOURCE",
 /*  13 */ "literal ::= LITERALSTART LITERALEND",
 /*  14 */ "literal ::= LITERALSTART literal_elements LITERALEND",
 /*  15 */ "literal_elements ::= literal_elements literal_element",
 /*  16 */ "literal_elements ::=",
 /*  17 */ "literal_element ::= literal",
 /*  18 */ "literal_element ::= LITERAL",
 /*  19 */ "smartytag ::= LDEL value",
 /*  20 */ "smartytag ::= LDEL value modifierlist attributes",
 /*  21 */ "smartytag ::= LDEL value attributes",
 /*  22 */ "smartytag ::= LDEL expr modifierlist attributes",
 /*  23 */ "smartytag ::= LDEL expr attributes",
 /*  24 */ "smartytag ::= LDEL variable EQUAL expr",
 /*  25 */ "smartytag ::= LDEL DOLLAR ID EQUAL value",
 /*  26 */ "smartytag ::= LDEL DOLLAR ID EQUAL expr",
 /*  27 */ "smartytag ::= LDEL ID attributes",
 /*  28 */ "smartytag ::= LDEL ID",
 /*  29 */ "smartytag ::= LDEL ID modifierlist attributes",
 /*  30 */ "smartytag ::= LDELIF expr",
 /*  31 */ "smartytag ::= LDELIF expr attributes",
 /*  32 */ "smartytag ::= LDELFOR statements SEMICOLON optspace expr SEMICOLON optspace DOLLAR varvar foraction attributes",
 /*  33 */ "foraction ::= EQUAL expr",
 /*  34 */ "foraction ::= INCDEC",
 /*  35 */ "smartytag ::= LDELFOR statement TO expr attributes",
 /*  36 */ "smartytag ::= LDELFOR statement TO expr STEP expr attributes",
 /*  37 */ "smartytag ::= LDELFOREACH attributes",
 /*  38 */ "smartytag ::= LDELFOREACH SPACE value AS DOLLAR varvar attributes",
 /*  39 */ "smartytag ::= LDELFOREACH SPACE value AS DOLLAR varvar APTR DOLLAR varvar attributes",
 /*  40 */ "smartytag ::= LDELFOREACH SPACE expr AS DOLLAR varvar attributes",
 /*  41 */ "smartytag ::= LDELFOREACH SPACE expr AS DOLLAR varvar APTR DOLLAR varvar attributes",
 /*  42 */ "smartytag ::= LDEL SMARTYBLOCKCHILDPARENT",
 /*  43 */ "smartytag ::= LDELSLASH ID",
 /*  44 */ "smartytag ::= LDELSLASH ID modifierlist",
 /*  45 */ "attributes ::= attributes attribute",
 /*  46 */ "attributes ::= attribute",
 /*  47 */ "attributes ::=",
 /*  48 */ "attribute ::= SPACE ID EQUAL ID",
 /*  49 */ "attribute ::= ATTR expr",
 /*  50 */ "attribute ::= ATTR value",
 /*  51 */ "attribute ::= SPACE ID",
 /*  52 */ "attribute ::= SPACE expr",
 /*  53 */ "attribute ::= SPACE value",
 /*  54 */ "attribute ::= SPACE INTEGER EQUAL expr",
 /*  55 */ "statements ::= statement",
 /*  56 */ "statements ::= statements COMMA statement",
 /*  57 */ "statement ::= DOLLAR varvar EQUAL expr",
 /*  58 */ "statement ::= variablebase EQUAL expr",
 /*  59 */ "statement ::= OPENP statement CLOSEP",
 /*  60 */ "expr ::= value",
 /*  61 */ "expr ::= ternary",
 /*  62 */ "expr ::= expr MATH value",
 /*  63 */ "expr ::= expr UNIMATH value",
 /*  64 */ "expr ::= expr ANDSYM value",
 /*  65 */ "expr ::= array",
 /*  66 */ "expr ::= expr modifierlist",
 /*  67 */ "expr ::= expr ifcond expr",
 /*  68 */ "expr ::= expr ISIN array",
 /*  69 */ "expr ::= expr ISIN value",
 /*  70 */ "expr ::= expr lop expr",
 /*  71 */ "expr ::= expr ISDIVBY expr",
 /*  72 */ "expr ::= expr ISNOTDIVBY expr",
 /*  73 */ "expr ::= expr ISEVEN",
 /*  74 */ "expr ::= expr ISNOTEVEN",
 /*  75 */ "expr ::= expr ISEVENBY expr",
 /*  76 */ "expr ::= expr ISNOTEVENBY expr",
 /*  77 */ "expr ::= expr ISODD",
 /*  78 */ "expr ::= expr ISNOTODD",
 /*  79 */ "expr ::= expr ISODDBY expr",
 /*  80 */ "expr ::= expr ISNOTODDBY expr",
 /*  81 */ "ternary ::= OPENP expr CLOSEP QMARK DOLLAR ID COLON expr",
 /*  82 */ "ternary ::= OPENP expr CLOSEP QMARK expr COLON expr",
 /*  83 */ "value ::= variable",
 /*  84 */ "value ::= UNIMATH value",
 /*  85 */ "value ::= NOT value",
 /*  86 */ "value ::= TYPECAST value",
 /*  87 */ "value ::= variable INCDEC",
 /*  88 */ "value ::= INTEGER",
 /*  89 */ "value ::= INTEGER DOT INTEGER",
 /*  90 */ "value ::= INTEGER DOT",
 /*  91 */ "value ::= DOT INTEGER",
 /*  92 */ "value ::= ID",
 /*  93 */ "value ::= function",
 /*  94 */ "value ::= OPENP expr CLOSEP",
 /*  95 */ "value ::= SINGLEQUOTESTRING",
 /*  96 */ "value ::= doublequoted_with_quotes",
 /*  97 */ "value ::= smartytag RDEL",
 /*  98 */ "value ::= value modifierlist",
 /*  99 */ "variable ::= variableinternal",
 /* 100 */ "variablebase ::= DOLLAR varvar",
 /* 101 */ "variableinternal ::= variableinternal indexdef",
 /* 102 */ "variableinternal ::= variablebase indexdef indexdef",
 /* 103 */ "variableinternal ::= variablebase indexdef",
 /* 104 */ "variableinternal ::= variablebase",
 /* 105 */ "variableinternal ::= variableinternal objectelement",
 /* 106 */ "variableinternal ::= DOLLAR varvar AT ID",
 /* 107 */ "indexdef ::= DOT DOLLAR varvar",
 /* 108 */ "indexdef ::= DOT DOLLAR varvar AT ID",
 /* 109 */ "indexdef ::= DOT ID",
 /* 110 */ "indexdef ::= DOT INTEGER",
 /* 111 */ "indexdef ::= DOT LDEL expr RDEL",
 /* 112 */ "indexdef ::= OPENB expr CLOSEB",
 /* 113 */ "varvar ::= varvarele",
 /* 114 */ "varvar ::= varvar varvarele",
 /* 115 */ "varvarele ::= ID",
 /* 116 */ "varvarele ::= LDEL expr RDEL",
 /* 117 */ "objectelement ::= PTR ID",
 /* 118 */ "objectelement ::= PTR DOLLAR varvar",
 /* 119 */ "objectelement ::= PTR LDEL expr RDEL",
 /* 120 */ "objectelement ::= PTR ID LDEL expr RDEL",
 /* 121 */ "objectelement ::= PTR method",
 /* 122 */ "function ::= ID OPENP params CLOSEP",
 /* 123 */ "method ::= ID OPENP params CLOSEP",
 /* 124 */ "params ::= params COMMA expr",
 /* 125 */ "params ::= expr",
 /* 126 */ "params ::=",
 /* 127 */ "modifierlist ::= modifierlist modifier modparameters",
 /* 128 */ "modifierlist ::= modifier modparameters",
 /* 129 */ "modifier ::= VERT AT ID",
 /* 130 */ "modifier ::= VERT ID",
 /* 131 */ "modparameters ::= modparameters modparameter",
 /* 132 */ "modparameters ::=",
 /* 133 */ "modparameter ::= COLON value",
 /* 134 */ "modparameter ::= COLON array",
 /* 135 */ "ifcond ::= EQUALS",
 /* 136 */ "ifcond ::= NOTEQUALS",
 /* 137 */ "ifcond ::= GREATERTHAN",
 /* 138 */ "ifcond ::= LESSTHAN",
 /* 139 */ "ifcond ::= GREATEREQUAL",
 /* 140 */ "ifcond ::= LESSEQUAL",
 /* 141 */ "ifcond ::= IDENTITY",
 /* 142 */ "ifcond ::= NONEIDENTITY",
 /* 143 */ "ifcond ::= MOD",
 /* 144 */ "lop ::= LAND",
 /* 145 */ "lop ::= LOR",
 /* 146 */ "lop ::= LXOR",
 /* 147 */ "array ::= OPENB arrayelements CLOSEB",
 /* 148 */ "arrayelements ::= arrayelement",
 /* 149 */ "arrayelements ::= arrayelements COMMA arrayelement",
 /* 150 */ "arrayelements ::=",
 /* 151 */ "arrayelement ::= value APTR expr",
 /* 152 */ "arrayelement ::= ID APTR expr",
 /* 153 */ "arrayelement ::= expr",
 /* 154 */ "doublequoted_with_quotes ::= QUOTE QUOTE",
 /* 155 */ "doublequoted_with_quotes ::= QUOTE doublequoted QUOTE",
 /* 156 */ "doublequoted ::= doublequoted doublequotedcontent",
 /* 157 */ "doublequoted ::= doublequotedcontent",
 /* 158 */ "doublequotedcontent ::= DOLLARID",
 /* 159 */ "doublequotedcontent ::= LDEL variable RDEL",
 /* 160 */ "doublequotedcontent ::= LDEL expr RDEL",
 /* 161 */ "doublequotedcontent ::= TEXT",
 /* 162 */ "optspace ::= SPACE",
 /* 163 */ "optspace ::=",
    );

    public function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count($this->yyTokenName)) {
            return $this->yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    public static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    public function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;

        return $yymajor;
    }

    public function __destruct()
    {
        while ($this->yystack !== Array()) {
            $this->yy_pop_parser_stack();
        }
    }

    public function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                $expected = array_merge($expected, self::$yyExpectedTokens[$nextstate]);
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;

                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new TP_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
    $this->yyidx = $yyidx;
    $this->yystack = $stack;

        return array_unique($expected);
    }

    public function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;

                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new TP_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token && $token !== '0') {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;

        return true;
    }

   public function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;

        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {

                return $this->yy_find_shift_action($iFallback);
            }

            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    public function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    public function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
#line 127 "Parser.y"

    $this->internalError = true;
    $this->compiler->trigger_template_error("Stack overflow in template parser");
#line 1381 "Parser.php"

            return;
        }
        $yytos = new TP_yyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
    }

    public static $yyRuleInfo = array(
  array( 'lhs' => 72, 'rhs' => 2 ),
  array( 'lhs' => 73, 'rhs' => 1 ),
  array( 'lhs' => 73, 'rhs' => 0 ),
  array( 'lhs' => 74, 'rhs' => 1 ),
  array( 'lhs' => 74, 'rhs' => 2 ),
  array( 'lhs' => 74, 'rhs' => 0 ),
  array( 'lhs' => 75, 'rhs' => 2 ),
  array( 'lhs' => 75, 'rhs' => 1 ),
  array( 'lhs' => 75, 'rhs' => 1 ),
  array( 'lhs' => 75, 'rhs' => 1 ),
  array( 'lhs' => 75, 'rhs' => 1 ),
  array( 'lhs' => 75, 'rhs' => 1 ),
  array( 'lhs' => 75, 'rhs' => 1 ),
  array( 'lhs' => 77, 'rhs' => 2 ),
  array( 'lhs' => 77, 'rhs' => 3 ),
  array( 'lhs' => 78, 'rhs' => 2 ),
  array( 'lhs' => 78, 'rhs' => 0 ),
  array( 'lhs' => 79, 'rhs' => 1 ),
  array( 'lhs' => 79, 'rhs' => 1 ),
  array( 'lhs' => 76, 'rhs' => 2 ),
  array( 'lhs' => 76, 'rhs' => 4 ),
  array( 'lhs' => 76, 'rhs' => 3 ),
  array( 'lhs' => 76, 'rhs' => 4 ),
  array( 'lhs' => 76, 'rhs' => 3 ),
  array( 'lhs' => 76, 'rhs' => 4 ),
  array( 'lhs' => 76, 'rhs' => 5 ),
  array( 'lhs' => 76, 'rhs' => 5 ),
  array( 'lhs' => 76, 'rhs' => 3 ),
  array( 'lhs' => 76, 'rhs' => 2 ),
  array( 'lhs' => 76, 'rhs' => 4 ),
  array( 'lhs' => 76, 'rhs' => 2 ),
  array( 'lhs' => 76, 'rhs' => 3 ),
  array( 'lhs' => 76, 'rhs' => 11 ),
  array( 'lhs' => 88, 'rhs' => 2 ),
  array( 'lhs' => 88, 'rhs' => 1 ),
  array( 'lhs' => 76, 'rhs' => 5 ),
  array( 'lhs' => 76, 'rhs' => 7 ),
  array( 'lhs' => 76, 'rhs' => 2 ),
  array( 'lhs' => 76, 'rhs' => 7 ),
  array( 'lhs' => 76, 'rhs' => 10 ),
  array( 'lhs' => 76, 'rhs' => 7 ),
  array( 'lhs' => 76, 'rhs' => 10 ),
  array( 'lhs' => 76, 'rhs' => 2 ),
  array( 'lhs' => 76, 'rhs' => 2 ),
  array( 'lhs' => 76, 'rhs' => 3 ),
  array( 'lhs' => 82, 'rhs' => 2 ),
  array( 'lhs' => 82, 'rhs' => 1 ),
  array( 'lhs' => 82, 'rhs' => 0 ),
  array( 'lhs' => 90, 'rhs' => 4 ),
  array( 'lhs' => 90, 'rhs' => 2 ),
  array( 'lhs' => 90, 'rhs' => 2 ),
  array( 'lhs' => 90, 'rhs' => 2 ),
  array( 'lhs' => 90, 'rhs' => 2 ),
  array( 'lhs' => 90, 'rhs' => 2 ),
  array( 'lhs' => 90, 'rhs' => 4 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 3 ),
  array( 'lhs' => 89, 'rhs' => 4 ),
  array( 'lhs' => 89, 'rhs' => 3 ),
  array( 'lhs' => 89, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 1 ),
  array( 'lhs' => 83, 'rhs' => 1 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 1 ),
  array( 'lhs' => 83, 'rhs' => 2 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 2 ),
  array( 'lhs' => 83, 'rhs' => 2 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 2 ),
  array( 'lhs' => 83, 'rhs' => 2 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 92, 'rhs' => 8 ),
  array( 'lhs' => 92, 'rhs' => 7 ),
  array( 'lhs' => 80, 'rhs' => 1 ),
  array( 'lhs' => 80, 'rhs' => 2 ),
  array( 'lhs' => 80, 'rhs' => 2 ),
  array( 'lhs' => 80, 'rhs' => 2 ),
  array( 'lhs' => 80, 'rhs' => 2 ),
  array( 'lhs' => 80, 'rhs' => 1 ),
  array( 'lhs' => 80, 'rhs' => 3 ),
  array( 'lhs' => 80, 'rhs' => 2 ),
  array( 'lhs' => 80, 'rhs' => 2 ),
  array( 'lhs' => 80, 'rhs' => 1 ),
  array( 'lhs' => 80, 'rhs' => 1 ),
  array( 'lhs' => 80, 'rhs' => 3 ),
  array( 'lhs' => 80, 'rhs' => 1 ),
  array( 'lhs' => 80, 'rhs' => 1 ),
  array( 'lhs' => 80, 'rhs' => 2 ),
  array( 'lhs' => 80, 'rhs' => 2 ),
  array( 'lhs' => 84, 'rhs' => 1 ),
  array( 'lhs' => 91, 'rhs' => 2 ),
  array( 'lhs' => 98, 'rhs' => 2 ),
  array( 'lhs' => 98, 'rhs' => 3 ),
  array( 'lhs' => 98, 'rhs' => 2 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 2 ),
  array( 'lhs' => 98, 'rhs' => 4 ),
  array( 'lhs' => 99, 'rhs' => 3 ),
  array( 'lhs' => 99, 'rhs' => 5 ),
  array( 'lhs' => 99, 'rhs' => 2 ),
  array( 'lhs' => 99, 'rhs' => 2 ),
  array( 'lhs' => 99, 'rhs' => 4 ),
  array( 'lhs' => 99, 'rhs' => 3 ),
  array( 'lhs' => 87, 'rhs' => 1 ),
  array( 'lhs' => 87, 'rhs' => 2 ),
  array( 'lhs' => 101, 'rhs' => 1 ),
  array( 'lhs' => 101, 'rhs' => 3 ),
  array( 'lhs' => 100, 'rhs' => 2 ),
  array( 'lhs' => 100, 'rhs' => 3 ),
  array( 'lhs' => 100, 'rhs' => 4 ),
  array( 'lhs' => 100, 'rhs' => 5 ),
  array( 'lhs' => 100, 'rhs' => 2 ),
  array( 'lhs' => 96, 'rhs' => 4 ),
  array( 'lhs' => 102, 'rhs' => 4 ),
  array( 'lhs' => 103, 'rhs' => 3 ),
  array( 'lhs' => 103, 'rhs' => 1 ),
  array( 'lhs' => 103, 'rhs' => 0 ),
  array( 'lhs' => 81, 'rhs' => 3 ),
  array( 'lhs' => 81, 'rhs' => 2 ),
  array( 'lhs' => 104, 'rhs' => 3 ),
  array( 'lhs' => 104, 'rhs' => 2 ),
  array( 'lhs' => 105, 'rhs' => 2 ),
  array( 'lhs' => 105, 'rhs' => 0 ),
  array( 'lhs' => 106, 'rhs' => 2 ),
  array( 'lhs' => 106, 'rhs' => 2 ),
  array( 'lhs' => 94, 'rhs' => 1 ),
  array( 'lhs' => 94, 'rhs' => 1 ),
  array( 'lhs' => 94, 'rhs' => 1 ),
  array( 'lhs' => 94, 'rhs' => 1 ),
  array( 'lhs' => 94, 'rhs' => 1 ),
  array( 'lhs' => 94, 'rhs' => 1 ),
  array( 'lhs' => 94, 'rhs' => 1 ),
  array( 'lhs' => 94, 'rhs' => 1 ),
  array( 'lhs' => 94, 'rhs' => 1 ),
  array( 'lhs' => 95, 'rhs' => 1 ),
  array( 'lhs' => 95, 'rhs' => 1 ),
  array( 'lhs' => 95, 'rhs' => 1 ),
  array( 'lhs' => 93, 'rhs' => 3 ),
  array( 'lhs' => 107, 'rhs' => 1 ),
  array( 'lhs' => 107, 'rhs' => 3 ),
  array( 'lhs' => 107, 'rhs' => 0 ),
  array( 'lhs' => 108, 'rhs' => 3 ),
  array( 'lhs' => 108, 'rhs' => 3 ),
  array( 'lhs' => 108, 'rhs' => 1 ),
  array( 'lhs' => 97, 'rhs' => 2 ),
  array( 'lhs' => 97, 'rhs' => 3 ),
  array( 'lhs' => 109, 'rhs' => 2 ),
  array( 'lhs' => 109, 'rhs' => 1 ),
  array( 'lhs' => 110, 'rhs' => 1 ),
  array( 'lhs' => 110, 'rhs' => 3 ),
  array( 'lhs' => 110, 'rhs' => 3 ),
  array( 'lhs' => 110, 'rhs' => 1 ),
  array( 'lhs' => 86, 'rhs' => 1 ),
  array( 'lhs' => 86, 'rhs' => 0 ),
    );

    public static $yyReduceMap = array(
        0 => 0,
        1 => 1,
        2 => 2,
        13 => 2,
        16 => 2,
        163 => 2,
        3 => 3,
        4 => 3,
        6 => 6,
        7 => 7,
        8 => 8,
        9 => 9,
        10 => 10,
        11 => 11,
        12 => 12,
        14 => 14,
        59 => 14,
        112 => 14,
        15 => 15,
        86 => 15,
        87 => 15,
        105 => 15,
        17 => 17,
        18 => 17,
        34 => 17,
        52 => 17,
        53 => 17,
        60 => 17,
        61 => 17,
        65 => 17,
        83 => 17,
        93 => 17,
        99 => 17,
        110 => 17,
        148 => 17,
        153 => 17,
        162 => 17,
        19 => 19,
        20 => 20,
        22 => 20,
        21 => 21,
        23 => 21,
        24 => 24,
        25 => 25,
        26 => 25,
        27 => 27,
        28 => 28,
        29 => 29,
        30 => 30,
        31 => 31,
        32 => 32,
        33 => 33,
        35 => 35,
        36 => 36,
        37 => 37,
        38 => 38,
        39 => 39,
        40 => 40,
        41 => 41,
        42 => 42,
        43 => 43,
        44 => 44,
        45 => 45,
        46 => 46,
        55 => 46,
        125 => 46,
        133 => 46,
        134 => 46,
        47 => 47,
        126 => 47,
        132 => 47,
        48 => 48,
        49 => 49,
        50 => 49,
        51 => 51,
        54 => 54,
        56 => 56,
        57 => 57,
        58 => 58,
        62 => 62,
        63 => 62,
        64 => 62,
        66 => 66,
        98 => 66,
        67 => 67,
        70 => 67,
        68 => 68,
        69 => 69,
        71 => 71,
        72 => 72,
        73 => 73,
        74 => 74,
        75 => 75,
        76 => 76,
        77 => 77,
        78 => 78,
        79 => 79,
        80 => 80,
        81 => 81,
        82 => 82,
        84 => 84,
        85 => 85,
        88 => 88,
        95 => 88,
        96 => 88,
        89 => 89,
        90 => 90,
        91 => 91,
        92 => 92,
        94 => 94,
        97 => 97,
        100 => 100,
        113 => 100,
        101 => 101,
        102 => 102,
        103 => 103,
        104 => 104,
        106 => 106,
        107 => 107,
        108 => 108,
        109 => 109,
        111 => 111,
        114 => 114,
        115 => 115,
        116 => 116,
        117 => 117,
        118 => 118,
        119 => 119,
        120 => 120,
        121 => 121,
        122 => 122,
        123 => 123,
        124 => 124,
        127 => 127,
        128 => 128,
        129 => 129,
        130 => 130,
        131 => 131,
        135 => 135,
        136 => 136,
        137 => 137,
        138 => 138,
        139 => 139,
        140 => 140,
        141 => 141,
        142 => 142,
        143 => 143,
        144 => 144,
        145 => 145,
        146 => 146,
        147 => 147,
        149 => 149,
        150 => 150,
        151 => 151,
        152 => 152,
        154 => 154,
        155 => 155,
        156 => 156,
        157 => 157,
        158 => 158,
        159 => 159,
        160 => 160,
        161 => 161,
    );
#line 136 "Parser.y"
    function yy_r0(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor . $this->root_buffer->to_smarty_php();
    }
#line 1728 "Parser.php"
#line 140 "Parser.y"
    function yy_r1(){
    $this->strict_mode = true;
    $this->_retvalue = "/* strict mode */\n\$_smarty_tpl->strict_mode = true;\n";
    }
#line 1734 "Parser.php"
#line 144 "Parser.y"
    function yy_r2(){
    $this->_retvalue = '';
    }
#line 1739 "Parser.php"
#line 150 "Parser.y"
    function yy_r3(){
    if ($this->yystack[$this->yyidx + 0]->minor !== null) {
        $this->current_buffer->append_subtree($this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 1746 "Parser.php"
#line 167 "Parser.y"
    function yy_r6(){
    if ($this->compiler->has_code) {
        $this->_retvalue = new Helpers\Tag($this, (string) $this->yystack[$this->yyidx + -1]->minor);
    } else {
        $this->_retvalue = null;
    }
    $this->compiler->has_variable_string = false;
    $this->block_nesting_level = count($this->compiler->_tag_stack);
    }
#line 1757 "Parser.php"
#line 178 "Parser.y"
    function yy_r7(){
    $this->_retvalue = null;
    }
#line 1762 "Parser.php"
#line 183 "Parser.y"
    function yy_r8(){
    $this->_retvalue = new Helpers\Text($this, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 1767 "Parser.php"
#line 188 "Parser.y"
    function yy_r9(){
    if ($this->strip) {
        $this->_retvalue = new Helpers\Text($this, self::stripString($this->yystack[$this->yyidx + 0]->minor));
    } else {
        $this->_retvalue = new Helpers\Text($this, $this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 1776 "Parser.php"
#line 197 "Parser.y"
    function yy_r10(){
    $this->strip++;
    }
#line 1781 "Parser.php"
#line 201 "Parser.y"
    function yy_r11(){
    if (!$this->strip) {
        $this->compiler->trigger_template_error('Unbalanced {strip} tags');
    }
    $this->strip--;
    }
#line 1789 "Parser.php"
#line 208 "Parser.y"
    function yy_r12(){
    if ($this->strip) {
        SMARTY_INTERNAL_COMPILE_BLOCK::blockSource($this->compiler, self::stripString($this->yystack[$this->yyidx + 0]->minor));
    } else {
        SMARTY_INTERNAL_COMPILE_BLOCK::blockSource($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 1798 "Parser.php"
#line 220 "Parser.y"
    function yy_r14(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 1803 "Parser.php"
#line 224 "Parser.y"
    function yy_r15(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor . $this->yystack[$this->yyidx + 0]->minor;
    }
#line 1808 "Parser.php"
#line 232 "Parser.y"
    function yy_r17(){
    $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 1813 "Parser.php"
#line 246 "Parser.y"
    function yy_r19(){
    $this->compiler->assert_no_enforced_modifiers($this->yystack[$this->yyidx + 0]->minor instanceof Wrappers\StaticWrapper);
    if ($this->yystack[$this->yyidx + 0]->minor instanceof Wrappers\StaticWrapper) {
        $this->yystack[$this->yyidx + 0]->minor = (string) $this->yystack[$this->yyidx + 0]->minor;
    }
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructPrintExpression::compileOpen(
        $this->compiler,
        array('value' => $this->yystack[$this->yyidx + 0]->minor),
        array()
    );
    }
#line 1827 "Parser.php"
#line 259 "Parser.y"
    function yy_r20(){
    $this->compiler->assert_expected_modifier($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + -2]->minor instanceof Wrappers\StaticWrapper);
    if ($this->yystack[$this->yyidx + -2]->minor instanceof Wrappers\StaticWrapper) {
        $this->yystack[$this->yyidx + -2]->minor = (string) $this->yystack[$this->yyidx + -2]->minor;
    }
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructPrintExpression::compileOpen(
        $this->compiler,
        array('value' => $this->yystack[$this->yyidx + -2]->minor, 'modifierlist' => $this->yystack[$this->yyidx + -1]->minor),
        $this->yystack[$this->yyidx + 0]->minor
    );
    }
#line 1841 "Parser.php"
#line 272 "Parser.y"
    function yy_r21(){
    $this->compiler->assert_no_enforced_modifiers($this->yystack[$this->yyidx + -1]->minor instanceof Wrappers\StaticWrapper);
    if ($this->yystack[$this->yyidx + -1]->minor instanceof Wrappers\StaticWrapper) {
        $this->yystack[$this->yyidx + -1]->minor = (string) $this->yystack[$this->yyidx + -1]->minor;
    }
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructPrintExpression::compileOpen(
        $this->compiler,
        array('value' => $this->yystack[$this->yyidx + -1]->minor),
        $this->yystack[$this->yyidx + 0]->minor
    );
    }
#line 1855 "Parser.php"
#line 314 "Parser.y"
    function yy_r24(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor . ' = (' . $this->yystack[$this->yyidx + 0]->minor . ');';
    }
#line 1860 "Parser.php"
#line 318 "Parser.y"
    function yy_r25(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructAssign::compileOpen(
        $this->compiler,
        array('value' => $this->yystack[$this->yyidx + 0]->minor, 'var' => "'" . $this->yystack[$this->yyidx + -2]->minor . "'"),
        null
    );
    }
#line 1870 "Parser.php"
#line 337 "Parser.y"
    function yy_r27(){
    $this->compiler->has_code = true;
    switch ($this->yystack[$this->yyidx + -1]->minor) {
        case 'assign':
            $this->_retvalue = Constructs\ConstructAssign::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor, null);
            break;
        default:
            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 1882 "Parser.php"
#line 348 "Parser.y"
    function yy_r28(){
    $this->compiler->has_code = true;
    switch ($this->yystack[$this->yyidx + 0]->minor) {
        case 'foreachelse':
            $this->_retvalue = Constructs\ConstructForEachElse::compileOpen($this->compiler, null, null);
            break;
        case 'forelse':
            $this->_retvalue = Constructs\ConstructForElse::compileOpen($this->compiler, null, null);
            break;
        case 'else':
            $this->_retvalue = Constructs\ConstructElse::compileOpen($this->compiler, null, null);
            break;
        case 'ldelim':
            $this->_retvalue = 'echo ' . var_export($this->compiler->smarty->left_delimiter) . ";\n";
            break;
        case 'rdelim':
            $this->_retvalue = 'echo ' . var_export($this->compiler->smarty->right_delimiter) . ";\n";
            break;
        default:
            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + 0]->minor,array());
    }
    }
#line 1906 "Parser.php"
#line 372 "Parser.y"
    function yy_r29(){
    $this->_retvalue = "ob_start();\n".$this->compiler->compileTag($this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor).'echo ';
    $this->compiler->has_code = true;
    $this->_retvalue .= Constructs\ConstructModifier::compileOpen($compiler, array(
        'value' => 'ob_get_clean()',
        'modifierlist' => $this->yystack[$this->yyidx + -1]->minor,
    ));
    }
#line 1916 "Parser.php"
#line 383 "Parser.y"
    function yy_r30(){
    $tag = trim(substr($this->yystack[$this->yyidx + -1]->minor, $this->lex->ldel_length));
    $this->compiler->has_code = true;
    switch ($tag) {
        case 'if':
            $this->_retvalue = Constructs\ConstructIf::compileOpen($this->compiler, array('cond' => $this->yystack[$this->yyidx + 0]->minor), null);
            break;
        case 'elseif':
            $this->_retvalue = Constructs\ConstructElseIf::compileOpen($this->compiler, array('cond' => $this->yystack[$this->yyidx + 0]->minor), null);
            break;
        case 'while':
            $this->_retvalue = Constructs\ConstructWhile::compileOpen($this->compiler, array('cond' => $this->yystack[$this->yyidx + 0]->minor), null);
            break;
    }
    }
#line 1933 "Parser.php"
#line 399 "Parser.y"
    function yy_r31(){
    $tag = trim(substr($this->yystack[$this->yyidx + -2]->minor, $this->lex->ldel_length));
    $this->compiler->has_code = true;
    switch ($tag) {
        case 'if':
            $this->_retvalue = Constructs\ConstructIf::compileOpen($this->compiler, array('cond' => $this->yystack[$this->yyidx + -1]->minor), $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'elseif':
            $this->_retvalue = Constructs\ConstructElseIf::compileOpen($this->compiler, array('cond' => $this->yystack[$this->yyidx + -1]->minor), $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'while':
            $this->_retvalue = Constructs\ConstructWhile::compileOpen($this->compiler, array('cond' => $this->yystack[$this->yyidx + -1]->minor), $this->yystack[$this->yyidx + 0]->minor);
            break;
    }
    }
#line 1950 "Parser.php"
#line 415 "Parser.y"
    function yy_r32(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructFor::compileOpen(
        $this->compiler,
        array_merge(
            $this->yystack[$this->yyidx + 0]->minor,
            array(
                array('start' => $this->yystack[$this->yyidx + -9]->minor),
                array('ifexp' => $this->yystack[$this->yyidx + -6]->minor),
                array('var' => $this->yystack[$this->yyidx + -2]->minor),
                array('step' => $this->yystack[$this->yyidx + -1]->minor)
            )
        ),
        null
    );
    }
#line 1968 "Parser.php"
#line 432 "Parser.y"
    function yy_r33(){
    $this->_retvalue = '='.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 1973 "Parser.php"
#line 440 "Parser.y"
    function yy_r35(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructFor::compileOpen(
        $this->compiler,
        array_merge(
            $this->yystack[$this->yyidx + 0]->minor,
            array(array('start' => $this->yystack[$this->yyidx + -3]->minor), array('to' => $this->yystack[$this->yyidx + -1]->minor))
        ),
        null
    );
    }
#line 1986 "Parser.php"
#line 452 "Parser.y"
    function yy_r36(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructFor::compileOpen(
        $this->compiler,
        array_merge(
            $this->yystack[$this->yyidx + 0]->minor,
            array(array('start' => $this->yystack[$this->yyidx + -5]->minor), array('to' => $this->yystack[$this->yyidx + -3]->minor), array('step' => $this->yystack[$this->yyidx + -1]->minor))
        ),
        null
    );
    }
#line 1999 "Parser.php"
#line 465 "Parser.y"
    function yy_r37(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructForEach::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor, null);
    }
#line 2005 "Parser.php"
#line 471 "Parser.y"
    function yy_r38(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructForEach::compileOpen(
        $this->compiler,
        array_merge($this->yystack[$this->yyidx + 0]->minor, array(array('from' => $this->yystack[$this->yyidx + -4]->minor), array('item' => $this->yystack[$this->yyidx + -1]->minor))),
        null
    );
    }
#line 2015 "Parser.php"
#line 480 "Parser.y"
    function yy_r39(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructForEach::compileOpen(
        $this->compiler,
        array_merge(
            $this->yystack[$this->yyidx + 0]->minor,
            array(
                array('from' => $this->yystack[$this->yyidx + -7]->minor),
                array('item' => $this->yystack[$this->yyidx + -1]->minor),
                array('key' => $this->yystack[$this->yyidx + -4]->minor),
            )
        ),
        null
    );
    }
#line 2032 "Parser.php"
#line 496 "Parser.y"
    function yy_r40(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructForEach::compileOpen(
        $this->compiler,
        array_merge($this->yystack[$this->yyidx + 0]->minor, array(array('from' => v1), array('item' => $this->yystack[$this->yyidx + -1]->minor))),
        null
    );
    }
#line 2042 "Parser.php"
#line 505 "Parser.y"
    function yy_r41(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructForEach::compileOpen(
        $this->compiler,
        array_merge(
            $this->yystack[$this->yyidx + 0]->minor,
            array(
                array('from' => $this->yystack[$this->yyidx + -4]->minor),
                array('item' => $this->yystack[$this->yyidx + -1]->minor),
                array('key' => v2),
            )
        ),
        null
    );
    }
#line 2059 "Parser.php"
#line 523 "Parser.y"
    function yy_r42(){
    $j = strrpos($this->yystack[$this->yyidx + 0]->minor,'.');
    if ($this->yystack[$this->yyidx + 0]->minor[$j+1] == 'c') {
        // {$smarty.block.child}
        $this->_retvalue = SMARTY_INTERNAL_COMPILE_BLOCK::compileChildBlock($this->compiler);
    } else {
        // {$smarty.block.parent}
        $this->_retvalue = SMARTY_INTERNAL_COMPILE_BLOCK::compileParentBlock($this->compiler);
    }
    }
#line 2071 "Parser.php"
#line 536 "Parser.y"
    function yy_r43(){
    switch ($this->yystack[$this->yyidx + 0]->minor) {
        case 'for':
            $this->_retvalue = Constructs\ConstructFor::compileClose($this->compiler, null, null);
            break;
        case 'foreach':
            $this->_retvalue = Constructs\ConstructForEach::compileClose($this->compiler, null, null);
            break;
        default:
            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + 0]->minor.'close',array());
    }
    }
#line 2085 "Parser.php"
#line 549 "Parser.y"
    function yy_r44(){
    switch ($this->yystack[$this->yyidx + -1]->minor) {
        case 'for':
            $this->_retvalue = Constructs\ConstructFor::compileClose($this->compiler, null, null);
            break;
        case 'foreach':
            $this->_retvalue = Constructs\ConstructForEach::compileClose($this->compiler, null, null);
            break;
        default:
            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -1]->minor.'close',array(),array('modifier_list'=>$this->yystack[$this->yyidx + 0]->minor));
    }
    }
#line 2099 "Parser.php"
#line 566 "Parser.y"
    function yy_r45(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    $this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 2105 "Parser.php"
#line 572 "Parser.y"
    function yy_r46(){
    $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2110 "Parser.php"
#line 577 "Parser.y"
    function yy_r47(){
    $this->_retvalue = array();
    }
#line 2115 "Parser.php"
#line 582 "Parser.y"
    function yy_r48(){
    if (preg_match('~^true$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>'true');
    } elseif (preg_match('~^false$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>'false');
    } elseif (preg_match('~^null$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>'null');
    } else {
        $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>"'".$this->yystack[$this->yyidx + 0]->minor."'");
    }
    }
#line 2128 "Parser.php"
#line 594 "Parser.y"
    function yy_r49(){
    $this->_retvalue = array(trim($this->yystack[$this->yyidx + -1]->minor," =\n\r\t")=>$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2133 "Parser.php"
#line 602 "Parser.y"
    function yy_r51(){
    $this->_retvalue = "'".$this->yystack[$this->yyidx + 0]->minor."'";
    }
#line 2138 "Parser.php"
#line 614 "Parser.y"
    function yy_r54(){
    $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2143 "Parser.php"
#line 627 "Parser.y"
    function yy_r56(){
    $this->yystack[$this->yyidx + -2]->minor[]=$this->yystack[$this->yyidx + 0]->minor;
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor;
    }
#line 2149 "Parser.php"
#line 632 "Parser.y"
    function yy_r57(){
    $this->compiler->assert_is_not_strict('Variable variable assignment is not supported in strict mode', $this);
    $this->_retvalue = array('var' => $this->yystack[$this->yyidx + -2]->minor, 'value'=>$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2155 "Parser.php"
#line 637 "Parser.y"
    function yy_r58(){
    $this->_retvalue = array('var' => $this->yystack[$this->yyidx + -2]->minor, 'value'=>$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2160 "Parser.php"
#line 661 "Parser.y"
    function yy_r62(){
    $this->_retvalue = Wrappers\StaticWrapper::static_if_all($this->yystack[$this->yyidx + -2]->minor . trim($this->yystack[$this->yyidx + -1]->minor) . $this->yystack[$this->yyidx + 0]->minor, array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 2165 "Parser.php"
#line 680 "Parser.y"
    function yy_r66(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructModifier::compileOpen($compiler, array(
        'value' => $this->yystack[$this->yyidx + -1]->minor,
        'modifierlist' => $this->yystack[$this->yyidx + 0]->minor,
    ));
    }
#line 2174 "Parser.php"
#line 690 "Parser.y"
    function yy_r67(){
    $this->_retvalue = new Wrappers\StaticWrapper($this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2179 "Parser.php"
#line 694 "Parser.y"
    function yy_r68(){
    $this->_retvalue = new Wrappers\StaticWrapper('in_array('.$this->yystack[$this->yyidx + -2]->minor.','.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2184 "Parser.php"
#line 698 "Parser.y"
    function yy_r69(){
    $this->_retvalue = new Wrappers\StaticWrapper('in_array('.$this->yystack[$this->yyidx + -2]->minor.',(array)'.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2189 "Parser.php"
#line 706 "Parser.y"
    function yy_r71(){
    $this->_retvalue = new Wrappers\StaticWrapper('!('.$this->yystack[$this->yyidx + -2]->minor.' % '.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2194 "Parser.php"
#line 710 "Parser.y"
    function yy_r72(){
    $this->compiler->assert_is_not_strict('`is not div by` is not supported in strict mode', $this);
    $this->_retvalue = new Wrappers\StaticWrapper('('.$this->yystack[$this->yyidx + -2]->minor.' % '.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2200 "Parser.php"
#line 715 "Parser.y"
    function yy_r73(){
    $this->_retvalue = new Wrappers\StaticWrapper('!(1 & '.$this->yystack[$this->yyidx + -1]->minor.')');
    }
#line 2205 "Parser.php"
#line 719 "Parser.y"
    function yy_r74(){
    $this->compiler->assert_is_not_strict('`is not even` is not supported in strict mode', $this);
    $this->_retvalue = new Wrappers\StaticWrapper('(1 & '.$this->yystack[$this->yyidx + -1]->minor.')');
    }
#line 2211 "Parser.php"
#line 724 "Parser.y"
    function yy_r75(){
    $this->compiler->assert_is_not_strict('`is even by` is not supported in strict mode', $this);
    $this->_retvalue = new Wrappers\StaticWrapper('!(1 & '.$this->yystack[$this->yyidx + -2]->minor.' / '.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2217 "Parser.php"
#line 729 "Parser.y"
    function yy_r76(){
    $this->compiler->assert_is_not_strict('`is not even by` is not supported in strict mode', $this);
    $this->_retvalue = new Wrappers\StaticWrapper('(1 & '.$this->yystack[$this->yyidx + -2]->minor.' / '.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2223 "Parser.php"
#line 734 "Parser.y"
    function yy_r77(){
    $this->_retvalue = new Wrappers\StaticWrapper('(1 & '.$this->yystack[$this->yyidx + -1]->minor.')');
    }
#line 2228 "Parser.php"
#line 738 "Parser.y"
    function yy_r78(){
    $this->compiler->assert_is_not_strict('`is not odd` is not supported in strict mode', $this);
    $this->_retvalue = new Wrappers\StaticWrapper('!(1 & '.$this->yystack[$this->yyidx + -1]->minor.')');
    }
#line 2234 "Parser.php"
#line 743 "Parser.y"
    function yy_r79(){
    $this->compiler->assert_is_not_strict('`is odd by` is not supported in strict mode', $this);
    $this->_retvalue = new Wrappers\StaticWrapper('(1 & '.$this->yystack[$this->yyidx + -2]->minor.' / '.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2240 "Parser.php"
#line 748 "Parser.y"
    function yy_r80(){
    $this->compiler->assert_is_not_strict('`is not odd by` is not supported in strict mode', $this);
    $this->_retvalue = new Wrappers\StaticWrapper('!(1 & '.$this->yystack[$this->yyidx + -2]->minor.' / '.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2246 "Parser.php"
#line 756 "Parser.y"
    function yy_r81(){
    $this->_retvalue = $this->yystack[$this->yyidx + -6]->minor.' ? '. $this->compileVariable("'".$this->yystack[$this->yyidx + -2]->minor."'") . ' : '.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2251 "Parser.php"
#line 760 "Parser.y"
    function yy_r82(){
    $this->_retvalue = $this->yystack[$this->yyidx + -5]->minor.' ? '.$this->yystack[$this->yyidx + -2]->minor.' : '.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2256 "Parser.php"
#line 770 "Parser.y"
    function yy_r84(){
    $this->_retvalue = Wrappers\StaticWrapper::static_concat($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2261 "Parser.php"
#line 775 "Parser.y"
    function yy_r85(){
    $this->_retvalue = Wrappers\StaticWrapper::static_concat('!', $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2266 "Parser.php"
#line 788 "Parser.y"
    function yy_r88(){
    $this->_retvalue = new Wrappers\StaticWrapper($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2271 "Parser.php"
#line 792 "Parser.y"
    function yy_r89(){
    $this->_retvalue = new Wrappers\StaticWrapper($this->yystack[$this->yyidx + -2]->minor.'.'.$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2276 "Parser.php"
#line 796 "Parser.y"
    function yy_r90(){
    $this->_retvalue = new Wrappers\StaticWrapper($this->yystack[$this->yyidx + -1]->minor.'.');
    }
#line 2281 "Parser.php"
#line 800 "Parser.y"
    function yy_r91(){
    $this->_retvalue = new Wrappers\StaticWrapper('.'.$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2286 "Parser.php"
#line 805 "Parser.y"
    function yy_r92(){
    if (preg_match('~^true$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = new Wrappers\StaticWrapper('true');
    } elseif (preg_match('~^false$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = new Wrappers\StaticWrapper('false');
    } elseif (preg_match('~^null$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = new Wrappers\StaticWrapper('null');
    } else {
        $this->_retvalue = new Wrappers\StaticWrapper(var_export($this->yystack[$this->yyidx + 0]->minor, true));
    }
    }
#line 2299 "Parser.php"
#line 823 "Parser.y"
    function yy_r94(){
    $this->_retvalue = Wrappers\StaticWrapper::static_if_all("(". $this->yystack[$this->yyidx + -1]->minor .")", array($this->yystack[$this->yyidx + -1]->minor));
    }
#line 2304 "Parser.php"
#line 839 "Parser.y"
    function yy_r97(){
    $this->_retvalue = 'array(ob_start(),' . $this->yystack[$this->yyidx + -1]->minor . ', ob_get_clean())[2]';
    }
#line 2309 "Parser.php"
#line 860 "Parser.y"
    function yy_r100(){
    $this->compiler->assert_is_not_strict('Variable variables are not supported in strict mode', $this);
    $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 2315 "Parser.php"
#line 865 "Parser.y"
    function yy_r101(){
    $this->_retvalue = $this->compileSafeLookupWithBase($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2320 "Parser.php"
#line 870 "Parser.y"
    function yy_r102(){
    if ($this->yystack[$this->yyidx + -2]->minor == '\'smarty\'') {
        $this->_retvalue = $this->compiler->compileTag('private_special_variable', array(), $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    } else {
        $this->_retvalue = $this->compileSafeLookupWithBase($this->compileVariable($this->yystack[$this->yyidx + -2]->minor), $this->yystack[$this->yyidx + -1]->minor);
        $this->_retvalue = $this->compileSafeLookupWithBase($this->_retvalue, $this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 2330 "Parser.php"
#line 879 "Parser.y"
    function yy_r103(){
    if ($this->yystack[$this->yyidx + -1]->minor == '\'smarty\'') {
        $this->_retvalue = $this->compiler->compileTag('private_special_variable', array(), $this->yystack[$this->yyidx + 0]->minor);
    } else {
        $this->_retvalue = $this->compileSafeLookupWithBase($this->compileVariable($this->yystack[$this->yyidx + -1]->minor), $this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 2339 "Parser.php"
#line 887 "Parser.y"
    function yy_r104(){
    $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2344 "Parser.php"
#line 895 "Parser.y"
    function yy_r106(){
    $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2349 "Parser.php"
#line 901 "Parser.y"
    function yy_r107(){
    $this->compiler->assert_is_not_strict('Variable indicies with dot syntax is not supported in strict mode', $this);
    $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2355 "Parser.php"
#line 906 "Parser.y"
    function yy_r108(){
    $this->compiler->assert_is_not_strict('Variable indicies with dot syntax is not supported in strict mode', $this);
    $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + -2]->minor).'->'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2361 "Parser.php"
#line 911 "Parser.y"
    function yy_r109(){
    $this->_retvalue = "'". $this->yystack[$this->yyidx + 0]->minor ."'";
    }
#line 2366 "Parser.php"
#line 919 "Parser.y"
    function yy_r111(){
    $this->compiler->assert_is_not_strict('Dot syntax with expressions is not supported in strict mode', $this);
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 2372 "Parser.php"
#line 938 "Parser.y"
    function yy_r114(){
    $this->compiler->assert_is_not_strict('Variable variables are not supported in strict mode', $this);
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.'.'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2378 "Parser.php"
#line 944 "Parser.y"
    function yy_r115(){
    $this->_retvalue = '\''.$this->yystack[$this->yyidx + 0]->minor.'\'';
    }
#line 2383 "Parser.php"
#line 949 "Parser.y"
    function yy_r116(){
    $this->_retvalue = '('.$this->yystack[$this->yyidx + -1]->minor.')';
    }
#line 2388 "Parser.php"
#line 958 "Parser.y"
    function yy_r117(){
    if ($this->security && substr($this->yystack[$this->yyidx + 0]->minor, 0, 1) == '_') {
        $this->compiler->trigger_template_error(self::Err1);
    }
    $this->_retvalue = '->'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2396 "Parser.php"
#line 965 "Parser.y"
    function yy_r118(){
    $this->compiler->assert_is_not_strict('Variable method calls are not supported in strict mode', $this);
    if ($this->security) {
        $this->compiler->trigger_template_error (self::Err2);
    }
    $this->_retvalue = '->{'.$this->compileVariable($this->yystack[$this->yyidx + 0]->minor).'}';
    }
#line 2405 "Parser.php"
#line 973 "Parser.y"
    function yy_r119(){
    $this->compiler->assert_is_not_strict('Variable method calls are not supported in strict mode', $this);
    if ($this->security) {
        $this->compiler->trigger_template_error (self::Err2);
    }
    $this->_retvalue = '->{'.$this->yystack[$this->yyidx + -1]->minor.'}';
    }
#line 2414 "Parser.php"
#line 981 "Parser.y"
    function yy_r120(){
    $this->compiler->assert_is_not_strict('Variable method calls are not supported in strict mode', $this);
    if ($this->security) {
        $this->compiler->trigger_template_error (self::Err2);
    }
    $this->_retvalue = '->{\''.$this->yystack[$this->yyidx + -3]->minor.'\'.'.$this->yystack[$this->yyidx + -1]->minor.'}';
    }
#line 2423 "Parser.php"
#line 990 "Parser.y"
    function yy_r121(){
    $this->_retvalue = '->'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2428 "Parser.php"
#line 998 "Parser.y"
    function yy_r122(){
    if (!$this->security || $this->smarty->security_policy->isTrustedPhpFunction($this->yystack[$this->yyidx + -3]->minor, $this->compiler)) {
        if (strcasecmp($this->yystack[$this->yyidx + -3]->minor, 'isset') === 0 || strcasecmp($this->yystack[$this->yyidx + -3]->minor, 'empty') === 0 || strcasecmp($this->yystack[$this->yyidx + -3]->minor, 'array') === 0 || is_callable($this->yystack[$this->yyidx + -3]->minor)) {
            $func_name = strtolower($this->yystack[$this->yyidx + -3]->minor);

            $is_language_construct = $func_name === 'isset' || $func_name === 'empty';
            $combined_params = array();
            foreach ($this->yystack[$this->yyidx + -1]->minor as $param) {
                if ($is_language_construct && $param instanceof Wrappers\SafeLookupWrapper) {
                    $combined_params[] = $param->getUnsafe();
                    continue;
                }
                $combined_params[] = $param;
            }
            $par = implode(',', $combined_params);

            if ($func_name == 'isset') {
                if (count($combined_params) == 0) {
                    $this->compiler->trigger_template_error('Illegal number of paramer in "isset()"');
                }
                $isset_par=str_replace("')->value","',null,true,false)->value",$par);
                $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". $isset_par .")";

            } elseif (in_array($func_name, array('empty', 'reset', 'current', 'end', 'prev', 'next'))) {

                if ($func_name !== 'empty') {
                    $this->compiler->assert_is_not_strict($func_name . ' is not allowed in strict mode', $this);
                }

                if (count($combined_params) != 1) {
                    $this->compiler->trigger_template_error('Illegal number of paramer in "empty()"');
                }
                if ($func_name == 'empty') {
                    $this->_retvalue = $func_name.'('.str_replace("')->value","',null,true,false)->value",$combined_params[0]).')';
                } else {
                    $this->_retvalue = $func_name.'('.$combined_params[0].')';
                }
            } else {
                $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". $par .")";
            }
        } else {
            $this->compiler->trigger_template_error("unknown function \"" . $this->yystack[$this->yyidx + -3]->minor . "\"");
        }
    }
    }
#line 2475 "Parser.php"
#line 1047 "Parser.y"
    function yy_r123(){
    if ($this->security && substr($this->yystack[$this->yyidx + -3]->minor,0,1) == '_') {
        $this->compiler->trigger_template_error(self::Err1);
    }
    $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". implode(',',$this->yystack[$this->yyidx + -1]->minor) .")";
    }
#line 2483 "Parser.php"
#line 1056 "Parser.y"
    function yy_r124(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -2]->minor,array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 2488 "Parser.php"
#line 1073 "Parser.y"
    function yy_r127(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -2]->minor,array(array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor)));
    }
#line 2493 "Parser.php"
#line 1077 "Parser.y"
    function yy_r128(){
    $this->_retvalue = array(array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor));
    }
#line 2498 "Parser.php"
#line 1081 "Parser.y"
    function yy_r129(){
    $this->compiler->assert_is_not_strict('@ is not allowed in templates', $this);
    $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2504 "Parser.php"
#line 1086 "Parser.y"
    function yy_r130(){
    $this->_retvalue =  array($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2509 "Parser.php"
#line 1094 "Parser.y"
    function yy_r131(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2514 "Parser.php"
#line 1114 "Parser.y"
    function yy_r135(){
    $this->_retvalue = '==';
    }
#line 2519 "Parser.php"
#line 1118 "Parser.y"
    function yy_r136(){
    $this->_retvalue = '!=';
    }
#line 2524 "Parser.php"
#line 1122 "Parser.y"
    function yy_r137(){
    $this->_retvalue = '>';
    }
#line 2529 "Parser.php"
#line 1126 "Parser.y"
    function yy_r138(){
    $this->_retvalue = '<';
    }
#line 2534 "Parser.php"
#line 1130 "Parser.y"
    function yy_r139(){
    $this->_retvalue = '>=';
    }
#line 2539 "Parser.php"
#line 1134 "Parser.y"
    function yy_r140(){
    $this->_retvalue = '<=';
    }
#line 2544 "Parser.php"
#line 1138 "Parser.y"
    function yy_r141(){
    $this->_retvalue = '===';
    }
#line 2549 "Parser.php"
#line 1142 "Parser.y"
    function yy_r142(){
    $this->_retvalue = '!==';
    }
#line 2554 "Parser.php"
#line 1146 "Parser.y"
    function yy_r143(){
    $this->_retvalue = '%';
    }
#line 2559 "Parser.php"
#line 1150 "Parser.y"
    function yy_r144(){
    $this->_retvalue = '&&';
    }
#line 2564 "Parser.php"
#line 1154 "Parser.y"
    function yy_r145(){
    $this->_retvalue = '||';
    }
#line 2569 "Parser.php"
#line 1158 "Parser.y"
    function yy_r146(){
    $this->compiler->assert_is_not_strict('XOR is not supported in strict mode', $this);
    $this->_retvalue = ' XOR ';
    }
#line 2575 "Parser.php"
#line 1166 "Parser.y"
    function yy_r147(){
    $this->_retvalue = 'array('.$this->yystack[$this->yyidx + -1]->minor.')';
    }
#line 2580 "Parser.php"
#line 1174 "Parser.y"
    function yy_r149(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.','.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2585 "Parser.php"
#line 1178 "Parser.y"
    function yy_r150(){
    return;
    }
#line 2590 "Parser.php"
#line 1182 "Parser.y"
    function yy_r151(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'=>'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2595 "Parser.php"
#line 1186 "Parser.y"
    function yy_r152(){
    $this->_retvalue = '\''.$this->yystack[$this->yyidx + -2]->minor.'\'=>'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2600 "Parser.php"
#line 1198 "Parser.y"
    function yy_r154(){
    $this->_retvalue = "''";
    }
#line 2605 "Parser.php"
#line 1202 "Parser.y"
    function yy_r155(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor->to_smarty_php();
    }
#line 2610 "Parser.php"
#line 1207 "Parser.y"
    function yy_r156(){
    $this->yystack[$this->yyidx + -1]->minor->append_subtree($this->yystack[$this->yyidx + 0]->minor);
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 2616 "Parser.php"
#line 1212 "Parser.y"
    function yy_r157(){
    $this->_retvalue = new Helpers\DoubleQuoted($this, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2621 "Parser.php"
#line 1216 "Parser.y"
    function yy_r158(){
    $this->_retvalue = new Helpers\Code($this, '(string)' . $this->compileVariable("'" . substr($this->yystack[$this->yyidx + 0]->minor,1) . "'"));
    }
#line 2626 "Parser.php"
#line 1220 "Parser.y"
    function yy_r159(){
    $this->_retvalue = new Helpers\Code($this, '(string)'.$this->yystack[$this->yyidx + -1]->minor);
    }
#line 2631 "Parser.php"
#line 1224 "Parser.y"
    function yy_r160(){
    $this->_retvalue = new Helpers\Code($this, '(string)('.$this->yystack[$this->yyidx + -1]->minor.')');
    }
#line 2636 "Parser.php"
#line 1228 "Parser.y"
    function yy_r161(){
    $this->_retvalue = new Helpers\DoubleQuotedContent($this, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2641 "Parser.php"

    private $_retvalue;

    public function yy_reduce($yyruleno)
    {
        $yymsp = $this->yystack[$this->yyidx];

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for ($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            if ($yysize) {
                $this->yyidx++;
                $x = new TP_yyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    public function yy_parse_failed()
    {
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
    }

    public function yy_syntax_error($yymajor, $TOKEN)
    {
#line 120 "Parser.y"

    $this->internalError = true;
    $this->yymajor = $yymajor;
    $this->compiler->trigger_template_error();
#line 2695 "Parser.php"
    }

    public function yy_accept()
    {
        while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
#line 113 "Parser.y"

    $this->successful = !$this->internalError;
    $this->internalError = false;
    $this->retvalue = $this->_retvalue;
#line 2709 "Parser.php"
    }

    public function doParse($yymajor, $yytokenvalue)
    {
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */

        if ($this->yyidx === null || $this->yyidx < 0) {
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new TP_yyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);

        do {
            $yyact = $this->yy_find_shift_action($yymajor);
            if ($yymajor < self::YYERRORSYMBOL &&
                  !$this->yy_is_expected_token($yymajor)) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if (self::YYERRORSYMBOL) {
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit) {
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0 &&
                                 $yymx != self::YYERRORSYMBOL &&
        ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                              ){
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}
