<?php
/**
 * Brainy Internal Plugin Templateparser
 *
 * This is the template parser.
 * It is generated from the Parser.y file
 * @package Brainy
 * @subpackage Compiler
 * @author Uwe Tews
 * @author Matt Basta
 */

namespace Box\Brainy\Compiler;


class TP_yyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};


#line 17 "Parser.y"
class Parser#line 16 "Parser.php"
{
#line 19 "Parser.y"

    public $successful = true;
    public $retvalue = 0;
    public static $prefix_number = 0;
    private $lex;
    private $internalError = false;
    private $strip = 0;

    private $safe_lookups = 0;
    private $strict_mode = false;

    public function __construct($lex, $compiler) {
        $this->lex = $lex;
        $this->compiler = $compiler;
        $this->smarty = $this->compiler->smarty;
        $this->template = $this->compiler->template;
        $this->compiler->has_variable_string = false;
        $this->security = isset($this->smarty->security_policy);
        $this->block_nesting_level = 0;
        $this->current_buffer = $this->root_buffer = new Helpers\TemplateBuffer();

        $this->safe_lookups = $this->smarty->safe_lookups;
    }

    /**
     * Strips whitespace from a string
     * @param string $string
     * @return string
     */
    protected static function stripString($string) {
        // Replaces whitespace followed by a `<` with null.
        // `     \n     </foo>` -> `</foo>`
        $string = preg_replace('/\s+(?=<\/)/ims', '', $string);
        // `     \n     <foo>` -> ` <foo>`
        // `     \n     &nbsp;` -> ` &nbsp;`
        $string = preg_replace('/\s+(?=[<&])/ims', ' ', $string);
        // Replaces `>` followed by whitespace with `>`
        // `<div>\n  foo` -> `<div>foo`
        $string = preg_replace('/>\s+(?=\S)/ims', '>', $string);
        // Replaces whitespace followed by anything else with a space.
        // `            data-hello="` -> ` data-hello="`
        $string = preg_replace('/\s+(?=\w)/ims', ' ', $string);

        // Is there work to be done at the end of the string?
        if ($string !== rtrim($string)) {
            $string = rtrim($string);
            // If the last non-whitespace character is not a `>`, add a space.
            if (substr($string, -1) !== '>') {
                $string .= ' ';
            }
        }
        return $string;
    }

    /**
     * @return bool
     */
    public function isStrictMode() {
        return $this->strict_mode;
    }

    /**
     * @param string $variable The name of the variable to look up
     * @param string|void $value The member of the SmartyVariable to access
     * @return string|Wrappers\SafeLookupWrapper
     */
    public function compileVariable($variable, $value = 'value')
    {
        $unsafe = '$_smarty_tpl->tpl_vars[' . $variable . ']->' . $value;
        if ($this->safe_lookups === 0) { // Unsafe lookups
            return $unsafe;
        }
        $safe = '\Box\Brainy\Runtime\Lookups::safeVarLookup($_smarty_tpl->tpl_vars, '. $variable .', ' . $this->safe_lookups . ')->' . $value;
        return new Wrappers\SafeLookupWrapper($unsafe, $safe);
    }

    /**
     * @param string $base
     * @param string $variable
     * @return string|Wrappers\SafeLookupWrapper
     */
    public function compileSafeLookupWithBase($base, $variable)
    {
        $unsafe = $base . '[' . $variable . ']';
        if ($this->safe_lookups === 0) { // Unsafe lookups
            return $unsafe;
        }
        $safe = '\Box\Brainy\Runtime\Lookups::safeArrayLookup(' . $base . ', '. $variable .', ' . $this->safe_lookups . ')';
        return new Wrappers\SafeLookupWrapper($unsafe, $safe);
    }
#line 110 "Parser.php"

    const TP_VERT                           =  1;
    const TP_COLON                          =  2;
    const TP_SETSTRICT                      =  3;
    const TP_RDEL                           =  4;
    const TP_COMMENT                        =  5;
    const TP_TEXT                           =  6;
    const TP_STRIPON                        =  7;
    const TP_STRIPOFF                       =  8;
    const TP_BLOCKSOURCE                    =  9;
    const TP_LITERALSTART                   = 10;
    const TP_LITERALEND                     = 11;
    const TP_LITERAL                        = 12;
    const TP_LDEL                           = 13;
    const TP_EQUAL                          = 14;
    const TP_DOLLAR                         = 15;
    const TP_ID                             = 16;
    const TP_LDELIF                         = 17;
    const TP_LDELFOR                        = 18;
    const TP_SEMICOLON                      = 19;
    const TP_INCDEC                         = 20;
    const TP_TO                             = 21;
    const TP_STEP                           = 22;
    const TP_LDELFOREACH                    = 23;
    const TP_SPACE                          = 24;
    const TP_AS                             = 25;
    const TP_APTR                           = 26;
    const TP_SMARTYBLOCKCHILDPARENT         = 27;
    const TP_LDELSLASH                      = 28;
    const TP_COMMA                          = 29;
    const TP_OPENP                          = 30;
    const TP_CLOSEP                         = 31;
    const TP_MATH                           = 32;
    const TP_UNIMATH                        = 33;
    const TP_ANDSYM                         = 34;
    const TP_ISIN                           = 35;
    const TP_ISDIVBY                        = 36;
    const TP_ISEVEN                         = 37;
    const TP_ISODD                          = 38;
    const TP_QMARK                          = 39;
    const TP_NOT                            = 40;
    const TP_TYPECAST                       = 41;
    const TP_INTEGER                        = 42;
    const TP_DOT                            = 43;
    const TP_SINGLEQUOTESTRING              = 44;
    const TP_OPENB                          = 45;
    const TP_CLOSEB                         = 46;
    const TP_PTR                            = 47;
    const TP_AT                             = 48;
    const TP_EQUALS                         = 49;
    const TP_NOTEQUALS                      = 50;
    const TP_GREATERTHAN                    = 51;
    const TP_LESSTHAN                       = 52;
    const TP_GREATEREQUAL                   = 53;
    const TP_LESSEQUAL                      = 54;
    const TP_IDENTITY                       = 55;
    const TP_NONEIDENTITY                   = 56;
    const TP_MOD                            = 57;
    const TP_LAND                           = 58;
    const TP_LOR                            = 59;
    const TP_LXOR                           = 60;
    const TP_QUOTE                          = 61;
    const TP_DOLLARID                       = 62;
    const YY_NO_ACTION = 331;
    const YY_ACCEPT_ACTION = 330;
    const YY_ERROR_ACTION = 329;

    const YY_SZ_ACTTAB = 983;
static public $yy_action = array(
 /*     0 */   107,   93,  165,  162,  163,  168,  169,  100,    4,  182,
 /*    10 */     5,   80,   95,   27,   16,   72,   12,   28,  140,  205,
 /*    20 */    74,   99,   29,   25,  133,  114,  100,  174,  170,  101,
 /*    30 */     3,   65,   62,   63,   33,   13,  176,  196,   21,  107,
 /*    40 */    78,  188,   66,  143,  116,  164,  171,  179,  194,  192,
 /*    50 */   193,  198,  199,  204,  203,  202,  200,  201,  191,  190,
 /*    60 */     7,   28,   26,  184,  156,  175,   81,  187,   70,  120,
 /*    70 */    65,   62,   63,   33,   13,  176,  196,  107,  159,  229,
 /*    80 */   138,   85,  146,  153,  166,  116,  164,  194,  192,  193,
 /*    90 */   198,  199,  204,  203,  202,  200,  201,  191,  190,   26,
 /*   100 */   103,  226,   22,    2,  117,    4,   70,  124,   65,   62,
 /*   110 */    63,   33,   13,  176,  196,  107,  157,  171,  185,  102,
 /*   120 */   146,  153,  186,   70,  123,  194,  192,  193,  198,  199,
 /*   130 */   204,  203,  202,  200,  201,  191,  190,  146,  153,   77,
 /*   140 */   180,   70,  122,   56,   70,  134,   65,   62,   63,   33,
 /*   150 */    13,  176,  196,  149,  145,  146,  153,   17,  146,  153,
 /*   160 */   151,   69,  108,  194,  192,  193,  198,  199,  204,  203,
 /*   170 */   202,  200,  201,  191,  190,  107,   17,   97,   26,  111,
 /*   180 */   110,   37,   70,  134,   56,   70,  134,   24,  330,   59,
 /*   190 */    86,  149,  145,   90,  149,  145,  146,  153,  105,  146,
 /*   200 */   153,  135,  118,  104,  106,  178,   65,   62,   63,   33,
 /*   210 */    13,  176,  196,  107,    8,  172,  103,  173,   22,  167,
 /*   220 */   117,   70,  128,  194,  192,  193,  198,  199,  204,  203,
 /*   230 */   202,  200,  201,  191,  190,  146,  153,   15,   14,   70,
 /*   240 */   125,   34,   70,  134,   65,   62,   63,   33,   13,  176,
 /*   250 */   196,  149,  145,  146,  153,  197,  146,  153,   79,  161,
 /*   260 */   160,  194,  192,  193,  198,  199,  204,  203,  202,  200,
 /*   270 */   201,  191,  190,  107,  121,  107,   87,   37,   70,  134,
 /*   280 */    57,   68,  134,   70,  132,    6,   27,  149,  145,  142,
 /*   290 */   149,  145,  146,  153,   11,  146,  153,  146,  153,   23,
 /*   300 */   137,  177,   70,  112,   65,   62,   63,   33,   13,  176,
 /*   310 */   196,  107,   99,   29,   25,  148,  146,  153,  195,  115,
 /*   320 */   101,  194,  192,  193,  198,  199,  204,  203,  202,  200,
 /*   330 */   201,  191,  190,  182,   91,  141,   26,   73,   76,  147,
 /*   340 */    12,  126,   65,   62,   63,   33,   13,  176,  196,  107,
 /*   350 */   127,   32,  130,  136,    9,  158,  119,   83,   10,  194,
 /*   360 */   192,  193,  198,  199,  204,  203,  202,  200,  201,  191,
 /*   370 */   190,   88,   26,   98,   75,  131,  224,  140,  150,  140,
 /*   380 */    65,   62,   63,   33,   13,  176,  196,  107,  154,  175,
 /*   390 */    94,  155,  224,  144,  224,  224,  140,  194,  192,  193,
 /*   400 */   198,  199,  204,  203,  202,  200,  201,  191,  190,   89,
 /*   410 */   224,  224,  224,  224,  224,  140,  224,  183,   65,   62,
 /*   420 */    63,   33,   13,  176,  196,  107,   92,  224,  181,  224,
 /*   430 */   224,  224,  140,  224,  224,  194,  192,  193,  198,  199,
 /*   440 */   204,  203,  202,  200,  201,  191,  190,  224,  224,  224,
 /*   450 */   224,  224,  224,  224,  224,  224,   65,   62,   63,   33,
 /*   460 */    13,  176,  196,  107,  224,  224,  224,  224,  224,  224,
 /*   470 */   224,  224,  224,  194,  192,  193,  198,  199,  204,  203,
 /*   480 */   202,  200,  201,  191,  190,  224,  224,  224,   19,  224,
 /*   490 */   224,  224,  224,  224,   65,   62,   63,   33,   13,  176,
 /*   500 */   196,  107,  224,  224,  189,  224,  224,  224,  224,  224,
 /*   510 */   224,  194,  192,  193,  198,  199,  204,  203,  202,  200,
 /*   520 */   201,  191,  190,  224,  224,  224,  224,  224,  224,  224,
 /*   530 */   224,  224,   65,   62,   63,   33,   13,  176,  196,  107,
 /*   540 */   224,  224,  224,  224,  224,  224,  224,  224,  224,  194,
 /*   550 */   192,  193,  198,  199,  204,  203,  202,  200,  201,  191,
 /*   560 */   190,  224,  224,  224,  224,  224,  224,   31,   70,  134,
 /*   570 */    65,   62,   63,   33,   13,  176,  196,  149,  145,  224,
 /*   580 */   224,  224,  146,  153,  224,  224,  224,  194,  192,  193,
 /*   590 */   198,  199,  204,  203,  202,  200,  201,  191,  190,  224,
 /*   600 */   224,  224,  224,   65,   62,   63,   33,   13,  176,  196,
 /*   610 */   224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
 /*   620 */   194,  192,  193,  198,  199,  204,  203,  202,  200,  201,
 /*   630 */   191,  190,  224,  224,  224,   96,   82,   71,  224,  224,
 /*   640 */   224,  140,   84,  113,   99,   29,   25,  224,  139,  224,
 /*   650 */   224,   18,  101,  224,   61,  224,  224,   18,  224,  224,
 /*   660 */    61,   64,   60,  129,  224,  152,    1,   64,   60,  129,
 /*   670 */   224,  152,    1,  224,  224,  224,   84,  113,  224,  224,
 /*   680 */   224,  224,   67,  224,  224,  224,  224,  224,   67,  224,
 /*   690 */   224,   20,   84,  113,   61,  224,  224,  224,   39,   70,
 /*   700 */   134,   64,   60,  129,  224,  152,    1,   20,  149,  145,
 /*   710 */    61,  224,  224,  146,  153,  224,  224,   64,   60,  129,
 /*   720 */   224,  152,   67,  224,   58,   70,  134,  224,  224,  224,
 /*   730 */   224,  224,  224,  224,  149,  145,  224,  224,   67,  146,
 /*   740 */   153,   36,   70,  134,   38,   70,  134,  224,  224,  224,
 /*   750 */   224,  149,  145,  224,  149,  145,  146,  153,  224,  146,
 /*   760 */   153,   48,   70,  134,   35,   70,  134,  224,  224,  224,
 /*   770 */   224,  149,  145,  224,  149,  145,  146,  153,  224,  146,
 /*   780 */   153,   44,   70,  134,  224,  224,  224,  224,  224,  224,
 /*   790 */   224,  149,  145,  224,  224,  224,  146,  153,   51,   70,
 /*   800 */   134,  224,  224,  224,  224,  224,  224,  224,  149,  145,
 /*   810 */   224,  224,  224,  146,  153,   50,   70,  134,   55,   70,
 /*   820 */   134,  224,  224,  224,  224,  149,  145,  224,  149,  145,
 /*   830 */   146,  153,  224,  146,  153,   46,   70,  109,   41,   70,
 /*   840 */   134,  224,  224,  224,  224,  149,  145,  224,  149,  145,
 /*   850 */   146,  153,  224,  146,  153,   40,   70,  134,  224,  224,
 /*   860 */   224,  224,  224,  224,  224,  149,  145,  224,  224,  224,
 /*   870 */   146,  153,   45,   70,  134,  224,  224,  224,  224,  224,
 /*   880 */   224,  224,  149,  145,  224,  224,  224,  146,  153,   53,
 /*   890 */    70,  134,   49,   70,  134,  224,  224,  224,  224,  149,
 /*   900 */   145,  224,  149,  145,  146,  153,  224,  146,  153,   54,
 /*   910 */    70,  134,   42,   70,  134,  224,  224,  224,  224,  149,
 /*   920 */   145,  224,  149,  145,  146,  153,  224,  146,  153,   30,
 /*   930 */    70,  134,  224,  224,  224,  224,  224,  224,  224,  149,
 /*   940 */   145,  224,  224,  224,  146,  153,   47,   70,  134,  224,
 /*   950 */   224,  224,  224,  224,  224,  224,  149,  145,  224,  224,
 /*   960 */   224,  146,  153,   52,   70,  134,   43,   70,  134,  224,
 /*   970 */   224,  224,  224,  149,  145,  224,  149,  145,  146,  153,
 /*   980 */   224,  146,  153,
    );
    static public $yy_lookahead = array(
 /*     0 */     1,   19,    5,    6,    7,    8,    9,   10,   30,    6,
 /*    10 */    13,   29,   75,   14,   17,   18,   13,   29,   81,   31,
 /*    20 */    23,   84,   85,   86,   25,   28,   10,   11,   12,   92,
 /*    30 */    29,   32,   33,   34,   35,   36,   37,   38,   13,    1,
 /*    40 */    15,   16,   66,   67,   68,   69,   20,   46,   49,   50,
 /*    50 */    51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
 /*    60 */    22,   29,   24,   31,   61,   62,   15,   42,   73,   74,
 /*    70 */    32,   33,   34,   35,   36,   37,   38,    1,   83,    4,
 /*    80 */    16,   30,   87,   88,   67,   68,   69,   49,   50,   51,
 /*    90 */    52,   53,   54,   55,   56,   57,   58,   59,   60,   24,
 /*   100 */    43,    4,   45,   30,   47,   30,   73,   74,   32,   33,
 /*   110 */    34,   35,   36,   37,   38,    1,   83,   20,    4,   92,
 /*   120 */    87,   88,   46,   73,   74,   49,   50,   51,   52,   53,
 /*   130 */    54,   55,   56,   57,   58,   59,   60,   87,   88,   97,
 /*   140 */    98,   73,   74,   72,   73,   74,   32,   33,   34,   35,
 /*   150 */    36,   37,   38,   82,   83,   87,   88,   13,   87,   88,
 /*   160 */    16,   70,   91,   49,   50,   51,   52,   53,   54,   55,
 /*   170 */    56,   57,   58,   59,   60,    1,   13,   93,   24,   16,
 /*   180 */    26,   72,   73,   74,   72,   73,   74,   14,   64,   65,
 /*   190 */    15,   82,   83,   19,   82,   83,   87,   88,   76,   87,
 /*   200 */    88,    3,   80,   91,   95,   96,   32,   33,   34,   35,
 /*   210 */    36,   37,   38,    1,    2,   69,   43,   71,   45,    4,
 /*   220 */    47,   73,   74,   49,   50,   51,   52,   53,   54,   55,
 /*   230 */    56,   57,   58,   59,   60,   87,   88,   14,   14,   73,
 /*   240 */    74,   72,   73,   74,   32,   33,   34,   35,   36,   37,
 /*   250 */    38,   82,   83,   87,   88,   16,   87,   88,   15,   89,
 /*   260 */    90,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*   270 */    58,   59,   60,    1,   43,    1,   15,   72,   73,   74,
 /*   280 */    72,   73,   74,   73,   74,   39,   14,   82,   83,   31,
 /*   290 */    82,   83,   87,   88,   14,   87,   88,   87,   88,   21,
 /*   300 */    20,   96,   73,   74,   32,   33,   34,   35,   36,   37,
 /*   310 */    38,    1,   84,   85,   86,   42,   87,   88,   16,   16,
 /*   320 */    92,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*   330 */    58,   59,   60,    6,   93,   81,   24,   78,   78,   94,
 /*   340 */    13,   31,   32,   33,   34,   35,   36,   37,   38,    1,
 /*   350 */    48,    2,   77,   24,   24,   78,   80,   78,   77,   49,
 /*   360 */    50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
 /*   370 */    60,   75,   24,   75,   79,   78,   99,   81,   78,   81,
 /*   380 */    32,   33,   34,   35,   36,   37,   38,    1,   61,   62,
 /*   390 */    75,   98,   99,   80,   99,   99,   81,   49,   50,   51,
 /*   400 */    52,   53,   54,   55,   56,   57,   58,   59,   60,   75,
 /*   410 */    99,   99,   99,   99,   99,   81,   99,   31,   32,   33,
 /*   420 */    34,   35,   36,   37,   38,    1,   75,   99,    4,   99,
 /*   430 */    99,   99,   81,   99,   99,   49,   50,   51,   52,   53,
 /*   440 */    54,   55,   56,   57,   58,   59,   60,   99,   99,   99,
 /*   450 */    99,   99,   99,   99,   99,   99,   32,   33,   34,   35,
 /*   460 */    36,   37,   38,    1,   99,   99,   99,   99,   99,   99,
 /*   470 */    99,   99,   99,   49,   50,   51,   52,   53,   54,   55,
 /*   480 */    56,   57,   58,   59,   60,   99,   99,   99,   26,   99,
 /*   490 */    99,   99,   99,   99,   32,   33,   34,   35,   36,   37,
 /*   500 */    38,    1,   99,   99,    4,   99,   99,   99,   99,   99,
 /*   510 */    99,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*   520 */    58,   59,   60,   99,   99,   99,   99,   99,   99,   99,
 /*   530 */    99,   99,   32,   33,   34,   35,   36,   37,   38,    1,
 /*   540 */    99,   99,   99,   99,   99,   99,   99,   99,   99,   49,
 /*   550 */    50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
 /*   560 */    60,   99,   99,   99,   99,   99,   99,   72,   73,   74,
 /*   570 */    32,   33,   34,   35,   36,   37,   38,   82,   83,   99,
 /*   580 */    99,   99,   87,   88,   99,   99,   99,   49,   50,   51,
 /*   590 */    52,   53,   54,   55,   56,   57,   58,   59,   60,   99,
 /*   600 */    99,   99,   99,   32,   33,   34,   35,   36,   37,   38,
 /*   610 */    99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
 /*   620 */    49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
 /*   630 */    59,   60,   99,   99,   99,   75,   15,   16,   99,   99,
 /*   640 */    99,   81,   15,   16,   84,   85,   86,   99,   27,   99,
 /*   650 */    99,   30,   92,   99,   33,   99,   99,   30,   99,   99,
 /*   660 */    33,   40,   41,   42,   99,   44,   45,   40,   41,   42,
 /*   670 */    99,   44,   45,   99,   99,   99,   15,   16,   99,   99,
 /*   680 */    99,   99,   61,   99,   99,   99,   99,   99,   61,   99,
 /*   690 */    99,   30,   15,   16,   33,   99,   99,   99,   72,   73,
 /*   700 */    74,   40,   41,   42,   99,   44,   45,   30,   82,   83,
 /*   710 */    33,   99,   99,   87,   88,   99,   99,   40,   41,   42,
 /*   720 */    99,   44,   61,   99,   72,   73,   74,   99,   99,   99,
 /*   730 */    99,   99,   99,   99,   82,   83,   99,   99,   61,   87,
 /*   740 */    88,   72,   73,   74,   72,   73,   74,   99,   99,   99,
 /*   750 */    99,   82,   83,   99,   82,   83,   87,   88,   99,   87,
 /*   760 */    88,   72,   73,   74,   72,   73,   74,   99,   99,   99,
 /*   770 */    99,   82,   83,   99,   82,   83,   87,   88,   99,   87,
 /*   780 */    88,   72,   73,   74,   99,   99,   99,   99,   99,   99,
 /*   790 */    99,   82,   83,   99,   99,   99,   87,   88,   72,   73,
 /*   800 */    74,   99,   99,   99,   99,   99,   99,   99,   82,   83,
 /*   810 */    99,   99,   99,   87,   88,   72,   73,   74,   72,   73,
 /*   820 */    74,   99,   99,   99,   99,   82,   83,   99,   82,   83,
 /*   830 */    87,   88,   99,   87,   88,   72,   73,   74,   72,   73,
 /*   840 */    74,   99,   99,   99,   99,   82,   83,   99,   82,   83,
 /*   850 */    87,   88,   99,   87,   88,   72,   73,   74,   99,   99,
 /*   860 */    99,   99,   99,   99,   99,   82,   83,   99,   99,   99,
 /*   870 */    87,   88,   72,   73,   74,   99,   99,   99,   99,   99,
 /*   880 */    99,   99,   82,   83,   99,   99,   99,   87,   88,   72,
 /*   890 */    73,   74,   72,   73,   74,   99,   99,   99,   99,   82,
 /*   900 */    83,   99,   82,   83,   87,   88,   99,   87,   88,   72,
 /*   910 */    73,   74,   72,   73,   74,   99,   99,   99,   99,   82,
 /*   920 */    83,   99,   82,   83,   87,   88,   99,   87,   88,   72,
 /*   930 */    73,   74,   99,   99,   99,   99,   99,   99,   99,   82,
 /*   940 */    83,   99,   99,   99,   87,   88,   72,   73,   74,   99,
 /*   950 */    99,   99,   99,   99,   99,   99,   82,   83,   99,   99,
 /*   960 */    99,   87,   88,   72,   73,   74,   72,   73,   74,   99,
 /*   970 */    99,   99,   99,   82,   83,   99,   82,   83,   87,   88,
 /*   980 */    99,   87,   88,
);
    const YY_SHIFT_USE_DFLT = -23;
    const YY_SHIFT_MAX = 134;
    static public $yy_shift_ofst = array(
 /*     0 */   198,  627,  627,  627,  627,  621,  627,  627,  627,  627,
 /*    10 */   627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
 /*    20 */   627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
 /*    30 */    38,  348,  661,  661,   -1,  386,  424,  462,  310,  212,
 /*    40 */    76,  114,  272,  174,  500,  538,  538,  538,  538,  538,
 /*    50 */   538,  538,  538,  538,  538,  538,  538,  538,  571,   -3,
 /*    60 */   677,  677,  677,  677,  677,  677,   -3,    3,  173,   16,
 /*    70 */    57,   75,   51,  154,  330,  312,  312,  327,  144,  144,
 /*    80 */    51,  144,  163,  280,  144,   51,  144,  144,  312,  312,
 /*    90 */   329,  349,  312,  329,  312,  312,  312,  349,  312,  274,
 /*   100 */   -23,  -23,  -23,   25,  -12,  -18,    1,  302,   32,   97,
 /*   110 */   175,  223,   26,  -22,   64,   73,  215,  303,  278,  258,
 /*   120 */    26,  273,   26,   26,   26,   26,  246,  239,   26,  231,
 /*   130 */   243,  224,   26,  261,   26,
);
    const YY_REDUCE_USE_DFLT = -64;
    const YY_REDUCE_MAX = 102;
    static public $yy_reduce_ofst = array(
 /*     0 */   124,  109,  112,  205,   71,  208,  626,  495,  652,  169,
 /*    10 */   894,  820,  669,  743,  746,  763,  726,  709,  672,  689,
 /*    20 */   692,  766,  783,  857,  874,  891,  840,  837,  800,  817,
 /*    30 */   560,  -63,   -5,   33,  228,  228,  228,  228,  228,  228,
 /*    40 */   228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
 /*    50 */   228,  228,  228,  228,  228,  228,  228,  228,  228,  -24,
 /*    60 */   148,  166,  210,  229,   68,   50,   17,   42,  170,  146,
 /*    70 */   170,  296,  122,  351,  315,  298,  334,  293,  300,  279,
 /*    80 */   313,  297,  277,  295,  277,  276,  260,  259,  254,  254,
 /*    90 */   275,  245,  254,  281,  254,  254,  254,  245,  254,   27,
 /*   100 */    91,   84,  241,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(3, ),
        /* 1 */ array(15, 16, 30, 33, 40, 41, 42, 44, 45, 61, ),
        /* 2 */ array(15, 16, 30, 33, 40, 41, 42, 44, 45, 61, ),
        /* 3 */ array(15, 16, 30, 33, 40, 41, 42, 44, 45, 61, ),
        /* 4 */ array(15, 16, 30, 33, 40, 41, 42, 44, 45, 61, ),
        /* 5 */ array(15, 16, 27, 30, 33, 40, 41, 42, 44, 45, 61, ),
        /* 6 */ array(15, 16, 30, 33, 40, 41, 42, 44, 45, 61, ),
        /* 7 */ array(15, 16, 30, 33, 40, 41, 42, 44, 45, 61, ),
        /* 8 */ array(15, 16, 30, 33, 40, 41, 42, 44, 45, 61, ),
        /* 9 */ array(15, 16, 30, 33, 40, 41, 42, 44, 45, 61, ),
        /* 10 */ array(15, 16, 30, 33, 40, 41, 42, 44, 45, 61, ),
        /* 11 */ array(15, 16, 30, 33, 40, 41, 42, 44, 45, 61, ),
        /* 12 */ array(15, 16, 30, 33, 40, 41, 42, 44, 45, 61, ),
        /* 13 */ array(15, 16, 30, 33, 40, 41, 42, 44, 45, 61, ),
        /* 14 */ array(15, 16, 30, 33, 40, 41, 42, 44, 45, 61, ),
        /* 15 */ array(15, 16, 30, 33, 40, 41, 42, 44, 45, 61, ),
        /* 16 */ array(15, 16, 30, 33, 40, 41, 42, 44, 45, 61, ),
        /* 17 */ array(15, 16, 30, 33, 40, 41, 42, 44, 45, 61, ),
        /* 18 */ array(15, 16, 30, 33, 40, 41, 42, 44, 45, 61, ),
        /* 19 */ array(15, 16, 30, 33, 40, 41, 42, 44, 45, 61, ),
        /* 20 */ array(15, 16, 30, 33, 40, 41, 42, 44, 45, 61, ),
        /* 21 */ array(15, 16, 30, 33, 40, 41, 42, 44, 45, 61, ),
        /* 22 */ array(15, 16, 30, 33, 40, 41, 42, 44, 45, 61, ),
        /* 23 */ array(15, 16, 30, 33, 40, 41, 42, 44, 45, 61, ),
        /* 24 */ array(15, 16, 30, 33, 40, 41, 42, 44, 45, 61, ),
        /* 25 */ array(15, 16, 30, 33, 40, 41, 42, 44, 45, 61, ),
        /* 26 */ array(15, 16, 30, 33, 40, 41, 42, 44, 45, 61, ),
        /* 27 */ array(15, 16, 30, 33, 40, 41, 42, 44, 45, 61, ),
        /* 28 */ array(15, 16, 30, 33, 40, 41, 42, 44, 45, 61, ),
        /* 29 */ array(15, 16, 30, 33, 40, 41, 42, 44, 45, 61, ),
        /* 30 */ array(1, 22, 24, 32, 33, 34, 35, 36, 37, 38, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 31 */ array(1, 24, 32, 33, 34, 35, 36, 37, 38, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 32 */ array(15, 16, 30, 33, 40, 41, 42, 44, 45, 61, ),
        /* 33 */ array(15, 16, 30, 33, 40, 41, 42, 44, 45, 61, ),
        /* 34 */ array(1, 14, 25, 32, 33, 34, 35, 36, 37, 38, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 35 */ array(1, 31, 32, 33, 34, 35, 36, 37, 38, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 36 */ array(1, 4, 32, 33, 34, 35, 36, 37, 38, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 37 */ array(1, 26, 32, 33, 34, 35, 36, 37, 38, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 38 */ array(1, 31, 32, 33, 34, 35, 36, 37, 38, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 39 */ array(1, 2, 32, 33, 34, 35, 36, 37, 38, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 40 */ array(1, 32, 33, 34, 35, 36, 37, 38, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 41 */ array(1, 4, 32, 33, 34, 35, 36, 37, 38, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 42 */ array(1, 14, 32, 33, 34, 35, 36, 37, 38, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 43 */ array(1, 19, 32, 33, 34, 35, 36, 37, 38, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 44 */ array(1, 4, 32, 33, 34, 35, 36, 37, 38, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 45 */ array(1, 32, 33, 34, 35, 36, 37, 38, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 46 */ array(1, 32, 33, 34, 35, 36, 37, 38, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 47 */ array(1, 32, 33, 34, 35, 36, 37, 38, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 48 */ array(1, 32, 33, 34, 35, 36, 37, 38, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 49 */ array(1, 32, 33, 34, 35, 36, 37, 38, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 50 */ array(1, 32, 33, 34, 35, 36, 37, 38, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 51 */ array(1, 32, 33, 34, 35, 36, 37, 38, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 52 */ array(1, 32, 33, 34, 35, 36, 37, 38, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 53 */ array(1, 32, 33, 34, 35, 36, 37, 38, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 54 */ array(1, 32, 33, 34, 35, 36, 37, 38, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 55 */ array(1, 32, 33, 34, 35, 36, 37, 38, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 56 */ array(1, 32, 33, 34, 35, 36, 37, 38, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 57 */ array(1, 32, 33, 34, 35, 36, 37, 38, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 58 */ array(32, 33, 34, 35, 36, 37, 38, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 59 */ array(5, 6, 7, 8, 9, 10, 13, 17, 18, 23, 28, ),
        /* 60 */ array(15, 16, 30, 33, 40, 41, 42, 44, 61, ),
        /* 61 */ array(15, 16, 30, 33, 40, 41, 42, 44, 61, ),
        /* 62 */ array(15, 16, 30, 33, 40, 41, 42, 44, 61, ),
        /* 63 */ array(15, 16, 30, 33, 40, 41, 42, 44, 61, ),
        /* 64 */ array(15, 16, 30, 33, 40, 41, 42, 44, 61, ),
        /* 65 */ array(15, 16, 30, 33, 40, 41, 42, 44, 61, ),
        /* 66 */ array(5, 6, 7, 8, 9, 10, 13, 17, 18, 23, 28, ),
        /* 67 */ array(6, 13, 61, 62, ),
        /* 68 */ array(14, 43, 45, 47, ),
        /* 69 */ array(10, 11, 12, ),
        /* 70 */ array(43, 45, 47, ),
        /* 71 */ array(4, 24, 30, ),
        /* 72 */ array(15, 30, ),
        /* 73 */ array(24, 26, ),
        /* 74 */ array(24, ),
        /* 75 */ array(24, ),
        /* 76 */ array(24, ),
        /* 77 */ array(6, 13, 61, 62, ),
        /* 78 */ array(13, 16, ),
        /* 79 */ array(13, 16, ),
        /* 80 */ array(15, 30, ),
        /* 81 */ array(13, 16, ),
        /* 82 */ array(13, 16, ),
        /* 83 */ array(14, 20, ),
        /* 84 */ array(13, 16, ),
        /* 85 */ array(15, 30, ),
        /* 86 */ array(13, 16, ),
        /* 87 */ array(13, 16, ),
        /* 88 */ array(24, ),
        /* 89 */ array(24, ),
        /* 90 */ array(24, ),
        /* 91 */ array(2, ),
        /* 92 */ array(24, ),
        /* 93 */ array(24, ),
        /* 94 */ array(24, ),
        /* 95 */ array(24, ),
        /* 96 */ array(24, ),
        /* 97 */ array(2, ),
        /* 98 */ array(24, ),
        /* 99 */ array(1, ),
        /* 100 */ array(),
        /* 101 */ array(),
        /* 102 */ array(),
        /* 103 */ array(13, 15, 16, 42, ),
        /* 104 */ array(29, 31, ),
        /* 105 */ array(19, 29, ),
        /* 106 */ array(29, 46, ),
        /* 107 */ array(16, 48, ),
        /* 108 */ array(29, 31, ),
        /* 109 */ array(4, 20, ),
        /* 110 */ array(15, ),
        /* 111 */ array(14, ),
        /* 112 */ array(20, ),
        /* 113 */ array(30, ),
        /* 114 */ array(16, ),
        /* 115 */ array(30, ),
        /* 116 */ array(4, ),
        /* 117 */ array(16, ),
        /* 118 */ array(21, ),
        /* 119 */ array(31, ),
        /* 120 */ array(20, ),
        /* 121 */ array(42, ),
        /* 122 */ array(20, ),
        /* 123 */ array(20, ),
        /* 124 */ array(20, ),
        /* 125 */ array(20, ),
        /* 126 */ array(39, ),
        /* 127 */ array(16, ),
        /* 128 */ array(20, ),
        /* 129 */ array(43, ),
        /* 130 */ array(15, ),
        /* 131 */ array(14, ),
        /* 132 */ array(20, ),
        /* 133 */ array(15, ),
        /* 134 */ array(20, ),
        /* 135 */ array(),
        /* 136 */ array(),
        /* 137 */ array(),
        /* 138 */ array(),
        /* 139 */ array(),
        /* 140 */ array(),
        /* 141 */ array(),
        /* 142 */ array(),
        /* 143 */ array(),
        /* 144 */ array(),
        /* 145 */ array(),
        /* 146 */ array(),
        /* 147 */ array(),
        /* 148 */ array(),
        /* 149 */ array(),
        /* 150 */ array(),
        /* 151 */ array(),
        /* 152 */ array(),
        /* 153 */ array(),
        /* 154 */ array(),
        /* 155 */ array(),
        /* 156 */ array(),
        /* 157 */ array(),
        /* 158 */ array(),
        /* 159 */ array(),
        /* 160 */ array(),
        /* 161 */ array(),
        /* 162 */ array(),
        /* 163 */ array(),
        /* 164 */ array(),
        /* 165 */ array(),
        /* 166 */ array(),
        /* 167 */ array(),
        /* 168 */ array(),
        /* 169 */ array(),
        /* 170 */ array(),
        /* 171 */ array(),
        /* 172 */ array(),
        /* 173 */ array(),
        /* 174 */ array(),
        /* 175 */ array(),
        /* 176 */ array(),
        /* 177 */ array(),
        /* 178 */ array(),
        /* 179 */ array(),
        /* 180 */ array(),
        /* 181 */ array(),
        /* 182 */ array(),
        /* 183 */ array(),
        /* 184 */ array(),
        /* 185 */ array(),
        /* 186 */ array(),
        /* 187 */ array(),
        /* 188 */ array(),
        /* 189 */ array(),
        /* 190 */ array(),
        /* 191 */ array(),
        /* 192 */ array(),
        /* 193 */ array(),
        /* 194 */ array(),
        /* 195 */ array(),
        /* 196 */ array(),
        /* 197 */ array(),
        /* 198 */ array(),
        /* 199 */ array(),
        /* 200 */ array(),
        /* 201 */ array(),
        /* 202 */ array(),
        /* 203 */ array(),
        /* 204 */ array(),
        /* 205 */ array(),
);
    static public $yy_default = array(
 /*     0 */   208,  317,  293,  329,  293,  329,  329,  329,  329,  329,
 /*    10 */   329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
 /*    20 */   329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
 /*    30 */   329,  329,  329,  329,  246,  329,  329,  319,  329,  329,
 /*    40 */   329,  329,  246,  329,  329,  291,  227,  225,  318,  232,
 /*    50 */   262,  230,  261,  258,  245,  249,  292,  224,  265,  211,
 /*    60 */   329,  329,  329,  329,  329,  329,  206,  329,  266,  329,
 /*    70 */   266,  273,  329,  237,  329,  329,  239,  329,  329,  329,
 /*    80 */   329,  329,  329,  329,  329,  329,  329,  329,  228,  240,
 /*    90 */   328,  294,  238,  328,  236,  235,  234,  295,  231,  257,
 /*   100 */   221,  299,  299,  329,  329,  329,  329,  329,  329,  251,
 /*   110 */   329,  286,  255,  273,  329,  288,  329,  329,  247,  329,
 /*   120 */   300,  329,  268,  253,  260,  267,  275,  329,  269,  271,
 /*   130 */   329,  329,  254,  329,  251,  207,  327,  233,  242,  241,
 /*   140 */   244,  243,  250,  209,  248,  256,  274,  298,  272,  252,
 /*   150 */   281,  286,  276,  277,  321,  322,  320,  259,  278,  301,
 /*   160 */   280,  279,  215,  216,  214,  213,  210,  212,  217,  218,
 /*   170 */   223,  270,  222,  220,  219,  324,  263,  315,  316,  314,
 /*   180 */   323,  325,  326,  275,  290,  284,  285,  283,  282,  287,
 /*   190 */   313,  312,  303,  304,  302,  297,  264,  296,  305,  306,
 /*   200 */   310,  311,  309,  308,  307,  289,
);
    const YYNOCODE = 100;
    const YYSTACKDEPTH = 500;
    const YYNSTATE = 206;
    const YYNRULE = 123;
    const YYERRORSYMBOL = 63;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    public static $yyFallback = array(
    );

    public $yyidx;                    /* Index of top element in stack */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    public $yystack = array();  /* The parser's stack */

    public $yyTokenName = array(
  '$',             'VERT',          'COLON',         'SETSTRICT',   
  'RDEL',          'COMMENT',       'TEXT',          'STRIPON',     
  'STRIPOFF',      'BLOCKSOURCE',   'LITERALSTART',  'LITERALEND',  
  'LITERAL',       'LDEL',          'EQUAL',         'DOLLAR',      
  'ID',            'LDELIF',        'LDELFOR',       'SEMICOLON',   
  'INCDEC',        'TO',            'STEP',          'LDELFOREACH', 
  'SPACE',         'AS',            'APTR',          'SMARTYBLOCKCHILDPARENT',
  'LDELSLASH',     'COMMA',         'OPENP',         'CLOSEP',      
  'MATH',          'UNIMATH',       'ANDSYM',        'ISIN',        
  'ISDIVBY',       'ISEVEN',        'ISODD',         'QMARK',       
  'NOT',           'TYPECAST',      'INTEGER',       'DOT',         
  'SINGLEQUOTESTRING',  'OPENB',         'CLOSEB',        'PTR',         
  'AT',            'EQUALS',        'NOTEQUALS',     'GREATERTHAN', 
  'LESSTHAN',      'GREATEREQUAL',  'LESSEQUAL',     'IDENTITY',    
  'NONEIDENTITY',  'MOD',           'LAND',          'LOR',         
  'LXOR',          'QUOTE',         'DOLLARID',      'error',       
  'start',         'strictmode',    'template',      'template_element',
  'smartytag',     'literal',       'literal_elements',  'literal_element',
  'expr',          'variable',      'value',         'attributes',  
  'statements',    'optspace',      'varvar',        'foraction',   
  'statement',     'attribute',     'ternary',       'array',       
  'modifierlist',  'ifcond',        'lop',           'function',    
  'doublequoted_with_quotes',  'indexdef',      'objectelement',  'params',      
  'modifier',      'modparameters',  'modparameter',  'arrayelements',
  'arrayelement',  'doublequoted',  'doublequotedcontent',
    );

    public static $yyRuleName = array(
 /*   0 */ "start ::= strictmode template",
 /*   1 */ "strictmode ::= SETSTRICT",
 /*   2 */ "strictmode ::=",
 /*   3 */ "template ::= template_element",
 /*   4 */ "template ::= template template_element",
 /*   5 */ "template ::=",
 /*   6 */ "template_element ::= smartytag RDEL",
 /*   7 */ "template_element ::= COMMENT",
 /*   8 */ "template_element ::= literal",
 /*   9 */ "template_element ::= TEXT",
 /*  10 */ "template_element ::= STRIPON",
 /*  11 */ "template_element ::= STRIPOFF",
 /*  12 */ "template_element ::= BLOCKSOURCE",
 /*  13 */ "literal ::= LITERALSTART literal_elements LITERALEND",
 /*  14 */ "literal_elements ::= literal_elements literal_element",
 /*  15 */ "literal_elements ::=",
 /*  16 */ "literal_element ::= literal",
 /*  17 */ "literal_element ::= LITERAL",
 /*  18 */ "smartytag ::= LDEL expr",
 /*  19 */ "smartytag ::= LDEL variable EQUAL expr",
 /*  20 */ "smartytag ::= LDEL DOLLAR ID EQUAL value",
 /*  21 */ "smartytag ::= LDEL DOLLAR ID EQUAL expr",
 /*  22 */ "smartytag ::= LDEL ID attributes",
 /*  23 */ "smartytag ::= LDEL ID",
 /*  24 */ "smartytag ::= LDELIF expr",
 /*  25 */ "smartytag ::= LDELFOR statements SEMICOLON optspace expr SEMICOLON optspace DOLLAR varvar foraction attributes",
 /*  26 */ "foraction ::= EQUAL expr",
 /*  27 */ "foraction ::= INCDEC",
 /*  28 */ "smartytag ::= LDELFOR statement TO expr attributes",
 /*  29 */ "smartytag ::= LDELFOR statement TO expr STEP expr attributes",
 /*  30 */ "smartytag ::= LDELFOREACH attributes",
 /*  31 */ "smartytag ::= LDELFOREACH SPACE expr AS DOLLAR varvar",
 /*  32 */ "smartytag ::= LDELFOREACH SPACE expr AS DOLLAR varvar attributes",
 /*  33 */ "smartytag ::= LDELFOREACH SPACE expr AS DOLLAR varvar APTR DOLLAR varvar",
 /*  34 */ "smartytag ::= LDELFOREACH SPACE expr AS DOLLAR varvar APTR DOLLAR varvar attributes",
 /*  35 */ "smartytag ::= LDEL SMARTYBLOCKCHILDPARENT",
 /*  36 */ "smartytag ::= LDELSLASH ID",
 /*  37 */ "attributes ::= attributes attribute",
 /*  38 */ "attributes ::= attribute",
 /*  39 */ "attribute ::= SPACE expr EQUAL expr",
 /*  40 */ "attribute ::= SPACE expr",
 /*  41 */ "statements ::= statement",
 /*  42 */ "statements ::= statements COMMA statement",
 /*  43 */ "statement ::= DOLLAR varvar EQUAL expr",
 /*  44 */ "statement ::= OPENP statement CLOSEP",
 /*  45 */ "expr ::= value",
 /*  46 */ "expr ::= ternary",
 /*  47 */ "expr ::= expr MATH value",
 /*  48 */ "expr ::= expr UNIMATH value",
 /*  49 */ "expr ::= expr ANDSYM value",
 /*  50 */ "expr ::= array",
 /*  51 */ "expr ::= expr modifierlist",
 /*  52 */ "expr ::= expr ifcond expr",
 /*  53 */ "expr ::= expr ISIN array",
 /*  54 */ "expr ::= expr ISIN value",
 /*  55 */ "expr ::= expr lop expr",
 /*  56 */ "expr ::= expr ISDIVBY expr",
 /*  57 */ "expr ::= expr ISEVEN",
 /*  58 */ "expr ::= expr ISODD",
 /*  59 */ "ternary ::= OPENP expr CLOSEP QMARK expr COLON expr",
 /*  60 */ "value ::= variable",
 /*  61 */ "value ::= UNIMATH value",
 /*  62 */ "value ::= NOT value",
 /*  63 */ "value ::= TYPECAST value",
 /*  64 */ "value ::= value INCDEC",
 /*  65 */ "value ::= INTEGER",
 /*  66 */ "value ::= INTEGER DOT INTEGER",
 /*  67 */ "value ::= ID",
 /*  68 */ "value ::= function",
 /*  69 */ "value ::= OPENP expr CLOSEP",
 /*  70 */ "value ::= SINGLEQUOTESTRING",
 /*  71 */ "value ::= doublequoted_with_quotes",
 /*  72 */ "variable ::= DOLLAR varvar",
 /*  73 */ "variable ::= variable indexdef",
 /*  74 */ "variable ::= variable objectelement",
 /*  75 */ "indexdef ::= DOT DOLLAR varvar",
 /*  76 */ "indexdef ::= DOT ID",
 /*  77 */ "indexdef ::= DOT INTEGER",
 /*  78 */ "indexdef ::= DOT LDEL expr RDEL",
 /*  79 */ "indexdef ::= OPENB expr CLOSEB",
 /*  80 */ "varvar ::= ID",
 /*  81 */ "varvar ::= LDEL expr RDEL",
 /*  82 */ "objectelement ::= PTR ID",
 /*  83 */ "objectelement ::= PTR ID OPENP params CLOSEP",
 /*  84 */ "function ::= ID OPENP params CLOSEP",
 /*  85 */ "params ::= params COMMA expr",
 /*  86 */ "params ::= expr",
 /*  87 */ "params ::=",
 /*  88 */ "modifierlist ::= modifierlist modifier modparameters",
 /*  89 */ "modifierlist ::= modifier modparameters",
 /*  90 */ "modifier ::= VERT AT ID",
 /*  91 */ "modifier ::= VERT ID",
 /*  92 */ "modparameters ::= modparameters modparameter",
 /*  93 */ "modparameters ::=",
 /*  94 */ "modparameter ::= COLON value",
 /*  95 */ "modparameter ::= COLON array",
 /*  96 */ "ifcond ::= EQUALS",
 /*  97 */ "ifcond ::= NOTEQUALS",
 /*  98 */ "ifcond ::= GREATERTHAN",
 /*  99 */ "ifcond ::= LESSTHAN",
 /* 100 */ "ifcond ::= GREATEREQUAL",
 /* 101 */ "ifcond ::= LESSEQUAL",
 /* 102 */ "ifcond ::= IDENTITY",
 /* 103 */ "ifcond ::= NONEIDENTITY",
 /* 104 */ "ifcond ::= MOD",
 /* 105 */ "lop ::= LAND",
 /* 106 */ "lop ::= LOR",
 /* 107 */ "lop ::= LXOR",
 /* 108 */ "array ::= OPENB arrayelements CLOSEB",
 /* 109 */ "arrayelements ::= arrayelements COMMA arrayelement",
 /* 110 */ "arrayelements ::= arrayelement",
 /* 111 */ "arrayelements ::=",
 /* 112 */ "arrayelement ::= expr APTR expr",
 /* 113 */ "arrayelement ::= expr",
 /* 114 */ "doublequoted_with_quotes ::= QUOTE QUOTE",
 /* 115 */ "doublequoted_with_quotes ::= QUOTE doublequoted QUOTE",
 /* 116 */ "doublequoted ::= doublequoted doublequotedcontent",
 /* 117 */ "doublequoted ::= doublequotedcontent",
 /* 118 */ "doublequotedcontent ::= DOLLARID",
 /* 119 */ "doublequotedcontent ::= LDEL expr RDEL",
 /* 120 */ "doublequotedcontent ::= TEXT",
 /* 121 */ "optspace ::= SPACE",
 /* 122 */ "optspace ::=",
    );

    public function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count($this->yyTokenName)) {
            return $this->yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    public static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    public function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;

        return $yymajor;
    }

    public function __destruct()
    {
        while ($this->yystack !== Array()) {
            $this->yy_pop_parser_stack();
        }
    }

    public function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                $expected = array_merge($expected, self::$yyExpectedTokens[$nextstate]);
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;

                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new TP_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
    $this->yyidx = $yyidx;
    $this->yystack = $stack;

        return array_unique($expected);
    }

    public function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;

                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new TP_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token && $token !== '0') {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;

        return true;
    }

   public function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;

        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {

                return $this->yy_find_shift_action($iFallback);
            }

            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    public function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    public function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
#line 125 "Parser.y"

    $this->internalError = true;
    $this->compiler->trigger_template_error("Stack overflow in template parser");
#line 1064 "Parser.php"

            return;
        }
        $yytos = new TP_yyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
    }

    public static $yyRuleInfo = array(
  array( 'lhs' => 64, 'rhs' => 2 ),
  array( 'lhs' => 65, 'rhs' => 1 ),
  array( 'lhs' => 65, 'rhs' => 0 ),
  array( 'lhs' => 66, 'rhs' => 1 ),
  array( 'lhs' => 66, 'rhs' => 2 ),
  array( 'lhs' => 66, 'rhs' => 0 ),
  array( 'lhs' => 67, 'rhs' => 2 ),
  array( 'lhs' => 67, 'rhs' => 1 ),
  array( 'lhs' => 67, 'rhs' => 1 ),
  array( 'lhs' => 67, 'rhs' => 1 ),
  array( 'lhs' => 67, 'rhs' => 1 ),
  array( 'lhs' => 67, 'rhs' => 1 ),
  array( 'lhs' => 67, 'rhs' => 1 ),
  array( 'lhs' => 69, 'rhs' => 3 ),
  array( 'lhs' => 70, 'rhs' => 2 ),
  array( 'lhs' => 70, 'rhs' => 0 ),
  array( 'lhs' => 71, 'rhs' => 1 ),
  array( 'lhs' => 71, 'rhs' => 1 ),
  array( 'lhs' => 68, 'rhs' => 2 ),
  array( 'lhs' => 68, 'rhs' => 4 ),
  array( 'lhs' => 68, 'rhs' => 5 ),
  array( 'lhs' => 68, 'rhs' => 5 ),
  array( 'lhs' => 68, 'rhs' => 3 ),
  array( 'lhs' => 68, 'rhs' => 2 ),
  array( 'lhs' => 68, 'rhs' => 2 ),
  array( 'lhs' => 68, 'rhs' => 11 ),
  array( 'lhs' => 79, 'rhs' => 2 ),
  array( 'lhs' => 79, 'rhs' => 1 ),
  array( 'lhs' => 68, 'rhs' => 5 ),
  array( 'lhs' => 68, 'rhs' => 7 ),
  array( 'lhs' => 68, 'rhs' => 2 ),
  array( 'lhs' => 68, 'rhs' => 6 ),
  array( 'lhs' => 68, 'rhs' => 7 ),
  array( 'lhs' => 68, 'rhs' => 9 ),
  array( 'lhs' => 68, 'rhs' => 10 ),
  array( 'lhs' => 68, 'rhs' => 2 ),
  array( 'lhs' => 68, 'rhs' => 2 ),
  array( 'lhs' => 75, 'rhs' => 2 ),
  array( 'lhs' => 75, 'rhs' => 1 ),
  array( 'lhs' => 81, 'rhs' => 4 ),
  array( 'lhs' => 81, 'rhs' => 2 ),
  array( 'lhs' => 76, 'rhs' => 1 ),
  array( 'lhs' => 76, 'rhs' => 3 ),
  array( 'lhs' => 80, 'rhs' => 4 ),
  array( 'lhs' => 80, 'rhs' => 3 ),
  array( 'lhs' => 72, 'rhs' => 1 ),
  array( 'lhs' => 72, 'rhs' => 1 ),
  array( 'lhs' => 72, 'rhs' => 3 ),
  array( 'lhs' => 72, 'rhs' => 3 ),
  array( 'lhs' => 72, 'rhs' => 3 ),
  array( 'lhs' => 72, 'rhs' => 1 ),
  array( 'lhs' => 72, 'rhs' => 2 ),
  array( 'lhs' => 72, 'rhs' => 3 ),
  array( 'lhs' => 72, 'rhs' => 3 ),
  array( 'lhs' => 72, 'rhs' => 3 ),
  array( 'lhs' => 72, 'rhs' => 3 ),
  array( 'lhs' => 72, 'rhs' => 3 ),
  array( 'lhs' => 72, 'rhs' => 2 ),
  array( 'lhs' => 72, 'rhs' => 2 ),
  array( 'lhs' => 82, 'rhs' => 7 ),
  array( 'lhs' => 74, 'rhs' => 1 ),
  array( 'lhs' => 74, 'rhs' => 2 ),
  array( 'lhs' => 74, 'rhs' => 2 ),
  array( 'lhs' => 74, 'rhs' => 2 ),
  array( 'lhs' => 74, 'rhs' => 2 ),
  array( 'lhs' => 74, 'rhs' => 1 ),
  array( 'lhs' => 74, 'rhs' => 3 ),
  array( 'lhs' => 74, 'rhs' => 1 ),
  array( 'lhs' => 74, 'rhs' => 1 ),
  array( 'lhs' => 74, 'rhs' => 3 ),
  array( 'lhs' => 74, 'rhs' => 1 ),
  array( 'lhs' => 74, 'rhs' => 1 ),
  array( 'lhs' => 73, 'rhs' => 2 ),
  array( 'lhs' => 73, 'rhs' => 2 ),
  array( 'lhs' => 73, 'rhs' => 2 ),
  array( 'lhs' => 89, 'rhs' => 3 ),
  array( 'lhs' => 89, 'rhs' => 2 ),
  array( 'lhs' => 89, 'rhs' => 2 ),
  array( 'lhs' => 89, 'rhs' => 4 ),
  array( 'lhs' => 89, 'rhs' => 3 ),
  array( 'lhs' => 78, 'rhs' => 1 ),
  array( 'lhs' => 78, 'rhs' => 3 ),
  array( 'lhs' => 90, 'rhs' => 2 ),
  array( 'lhs' => 90, 'rhs' => 5 ),
  array( 'lhs' => 87, 'rhs' => 4 ),
  array( 'lhs' => 91, 'rhs' => 3 ),
  array( 'lhs' => 91, 'rhs' => 1 ),
  array( 'lhs' => 91, 'rhs' => 0 ),
  array( 'lhs' => 84, 'rhs' => 3 ),
  array( 'lhs' => 84, 'rhs' => 2 ),
  array( 'lhs' => 92, 'rhs' => 3 ),
  array( 'lhs' => 92, 'rhs' => 2 ),
  array( 'lhs' => 93, 'rhs' => 2 ),
  array( 'lhs' => 93, 'rhs' => 0 ),
  array( 'lhs' => 94, 'rhs' => 2 ),
  array( 'lhs' => 94, 'rhs' => 2 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 86, 'rhs' => 1 ),
  array( 'lhs' => 86, 'rhs' => 1 ),
  array( 'lhs' => 86, 'rhs' => 1 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 95, 'rhs' => 3 ),
  array( 'lhs' => 95, 'rhs' => 1 ),
  array( 'lhs' => 95, 'rhs' => 0 ),
  array( 'lhs' => 96, 'rhs' => 3 ),
  array( 'lhs' => 96, 'rhs' => 1 ),
  array( 'lhs' => 88, 'rhs' => 2 ),
  array( 'lhs' => 88, 'rhs' => 3 ),
  array( 'lhs' => 97, 'rhs' => 2 ),
  array( 'lhs' => 97, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 3 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 77, 'rhs' => 1 ),
  array( 'lhs' => 77, 'rhs' => 0 ),
    );

    public static $yyReduceMap = array(
        0 => 0,
        1 => 1,
        2 => 2,
        15 => 2,
        122 => 2,
        3 => 3,
        4 => 3,
        6 => 6,
        7 => 7,
        8 => 8,
        9 => 9,
        10 => 10,
        11 => 11,
        12 => 12,
        13 => 13,
        44 => 13,
        79 => 13,
        14 => 14,
        63 => 14,
        64 => 14,
        74 => 14,
        16 => 16,
        17 => 16,
        27 => 16,
        40 => 16,
        45 => 16,
        46 => 16,
        50 => 16,
        60 => 16,
        68 => 16,
        77 => 16,
        110 => 16,
        113 => 16,
        121 => 16,
        18 => 18,
        19 => 19,
        20 => 20,
        21 => 20,
        22 => 22,
        23 => 23,
        24 => 24,
        25 => 25,
        26 => 26,
        28 => 28,
        29 => 29,
        30 => 30,
        31 => 31,
        32 => 32,
        33 => 33,
        34 => 34,
        35 => 35,
        36 => 36,
        37 => 37,
        38 => 38,
        41 => 38,
        86 => 38,
        94 => 38,
        95 => 38,
        39 => 39,
        42 => 42,
        43 => 43,
        47 => 47,
        48 => 47,
        49 => 47,
        51 => 51,
        52 => 52,
        53 => 53,
        54 => 54,
        55 => 55,
        56 => 56,
        57 => 57,
        58 => 58,
        59 => 59,
        61 => 61,
        62 => 62,
        65 => 65,
        70 => 65,
        71 => 65,
        66 => 66,
        67 => 67,
        69 => 69,
        72 => 72,
        73 => 73,
        75 => 75,
        76 => 76,
        78 => 78,
        80 => 80,
        81 => 81,
        82 => 82,
        83 => 83,
        84 => 84,
        85 => 85,
        87 => 87,
        93 => 87,
        88 => 88,
        89 => 89,
        90 => 90,
        91 => 91,
        92 => 92,
        96 => 96,
        97 => 97,
        98 => 98,
        99 => 99,
        100 => 100,
        101 => 101,
        102 => 102,
        103 => 103,
        104 => 104,
        105 => 105,
        106 => 106,
        107 => 107,
        108 => 108,
        109 => 109,
        111 => 111,
        112 => 112,
        114 => 114,
        115 => 115,
        116 => 116,
        117 => 117,
        118 => 118,
        119 => 119,
        120 => 120,
    );
#line 134 "Parser.y"
    function yy_r0(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor . $this->root_buffer->to_smarty_php();
    }
#line 1329 "Parser.php"
#line 138 "Parser.y"
    function yy_r1(){
    $this->strict_mode = true;
    $this->_retvalue = "/* strict mode */\n\$_smarty_tpl->strict_mode = true;\n";
    }
#line 1335 "Parser.php"
#line 142 "Parser.y"
    function yy_r2(){
    $this->_retvalue = '';
    }
#line 1340 "Parser.php"
#line 148 "Parser.y"
    function yy_r3(){
    if ($this->yystack[$this->yyidx + 0]->minor !== null) {
        $this->current_buffer->append_subtree($this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 1347 "Parser.php"
#line 165 "Parser.y"
    function yy_r6(){
    if ($this->compiler->has_code && !is_object($this->yystack[$this->yyidx + -1]->minor)) {
        $this->_retvalue = new Helpers\Tag((string) $this->yystack[$this->yyidx + -1]->minor);
    } elseif ($this->compiler->has_code) {
        $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    } else {
        $this->_retvalue = null;
    }
    $this->compiler->has_variable_string = false;
    $this->block_nesting_level = count($this->compiler->_tag_stack);
    }
#line 1360 "Parser.php"
#line 178 "Parser.y"
    function yy_r7(){
    $this->_retvalue = null;
    }
#line 1365 "Parser.php"
#line 183 "Parser.y"
    function yy_r8(){
    $this->_retvalue = new Helpers\Text($this->yystack[$this->yyidx + 0]->minor);
    }
#line 1370 "Parser.php"
#line 188 "Parser.y"
    function yy_r9(){
    if ($this->strip) {
        $this->_retvalue = new Helpers\Text(self::stripString($this->yystack[$this->yyidx + 0]->minor));
    } else {
        $this->_retvalue = new Helpers\Text($this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 1379 "Parser.php"
#line 197 "Parser.y"
    function yy_r10(){
    $this->strip++;
    }
#line 1384 "Parser.php"
#line 201 "Parser.y"
    function yy_r11(){
    if (!$this->strip) {
        $this->compiler->trigger_template_error('Unbalanced {strip} tags');
    }
    $this->strip--;
    }
#line 1392 "Parser.php"
#line 208 "Parser.y"
    function yy_r12(){
// if ($this->strip) {
    //     SMARTY_INTERNAL_COMPILE_BLOCK::blockSource($this->compiler, self::stripString($this->yystack[$this->yyidx + 0]->minor));
// } else {
    //     SMARTY_INTERNAL_COMPILE_BLOCK::blockSource($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
    // }
    }
#line 1401 "Parser.php"
#line 217 "Parser.y"
    function yy_r13(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 1406 "Parser.php"
#line 221 "Parser.y"
    function yy_r14(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor . $this->yystack[$this->yyidx + 0]->minor;
    }
#line 1411 "Parser.php"
#line 229 "Parser.y"
    function yy_r16(){
    $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 1416 "Parser.php"
#line 244 "Parser.y"
    function yy_r18(){
    $this->compiler->assert_no_enforced_modifiers($this->yystack[$this->yyidx + 0]->minor instanceof Wrappers\StaticWrapper);
    if ($this->yystack[$this->yyidx + 0]->minor instanceof Wrappers\StaticWrapper) {
        $this->yystack[$this->yyidx + 0]->minor = (string) $this->yystack[$this->yyidx + 0]->minor;
    }
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructPrintExpression::compileOpen(
        $this->compiler,
        array('value' => $this->yystack[$this->yyidx + 0]->minor, 'modifierlist' => array())
    );
    }
#line 1429 "Parser.php"
#line 260 "Parser.y"
    function yy_r19(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor . ' = (' . $this->yystack[$this->yyidx + 0]->minor . ');';
    }
#line 1434 "Parser.php"
#line 264 "Parser.y"
    function yy_r20(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructAssign::compileOpen(
        $this->compiler,
        array('value' => $this->yystack[$this->yyidx + 0]->minor, 'var' => "'" . $this->yystack[$this->yyidx + -2]->minor . "'")
    );
    }
#line 1443 "Parser.php"
#line 281 "Parser.y"
    function yy_r22(){
    $this->compiler->has_code = true;
    switch ($this->yystack[$this->yyidx + -1]->minor) {
        case 'assign':
            $this->_retvalue = Constructs\ConstructAssign::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'break':
            $this->_retvalue = Constructs\ConstructBreak::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'capture':
            $this->_retvalue = Constructs\ConstructCapture::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'continue':
            $this->_retvalue = Constructs\ConstructContinue::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
            break;
        case 'include':
            $this->_retvalue = Constructs\ConstructInclude::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
            break;
        default:
            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 1467 "Parser.php"
#line 304 "Parser.y"
    function yy_r23(){
    $this->compiler->has_code = true;
    switch ($this->yystack[$this->yyidx + 0]->minor) {
        case 'break':
            $this->_retvalue = Constructs\ConstructBreak::compileOpen($this->compiler, array());
            break;
        case 'capture':
            $this->_retvalue = Constructs\ConstructCapture::compileOpen($this->compiler, array());
            break;
        case 'continue':
            $this->_retvalue = Constructs\ConstructContinue::compileOpen($this->compiler, array());
            break;
        case 'else':
            $this->_retvalue = Constructs\ConstructElse::compileOpen($this->compiler, null);
            break;
        case 'foreachelse':
            $this->_retvalue = Constructs\ConstructForEachElse::compileOpen($this->compiler, null);
            break;
        case 'forelse':
            $this->_retvalue = Constructs\ConstructForElse::compileOpen($this->compiler, null);
            break;
        case 'ldelim':
            $this->_retvalue = new Helpers\Text($this->compiler->smarty->left_delimiter);
            break;
        case 'rdelim':
            $this->_retvalue = new Helpers\Text($this->compiler->smarty->right_delimiter);
            break;
        default:
            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + 0]->minor, array());
    }
    }
#line 1500 "Parser.php"
#line 338 "Parser.y"
    function yy_r24(){
    $tag = trim(substr($this->yystack[$this->yyidx + -1]->minor, $this->lex->ldel_length));
    $this->compiler->has_code = true;
    switch ($tag) {
        case 'if':
            $this->_retvalue = Constructs\ConstructIf::compileOpen($this->compiler, array('cond' => $this->yystack[$this->yyidx + 0]->minor));
            break;
        case 'elseif':
            $this->_retvalue = Constructs\ConstructElseIf::compileOpen($this->compiler, array('cond' => $this->yystack[$this->yyidx + 0]->minor));
            break;
        case 'while':
            $this->_retvalue = Constructs\ConstructWhile::compileOpen($this->compiler, array('cond' => $this->yystack[$this->yyidx + 0]->minor));
            break;
    }
    }
#line 1517 "Parser.php"
#line 354 "Parser.y"
    function yy_r25(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructFor::compileOpen(
        $this->compiler,
        array_merge(
            $this->yystack[$this->yyidx + 0]->minor,
            array(
                array('start' => $this->yystack[$this->yyidx + -9]->minor),
                array('ifexp' => $this->yystack[$this->yyidx + -6]->minor),
                array('var' => $this->yystack[$this->yyidx + -2]->minor),
                array('step' => $this->yystack[$this->yyidx + -1]->minor)
            )
        )
    );
    }
#line 1534 "Parser.php"
#line 370 "Parser.y"
    function yy_r26(){
    $this->_retvalue = '=' . $this->yystack[$this->yyidx + 0]->minor;
    }
#line 1539 "Parser.php"
#line 378 "Parser.y"
    function yy_r28(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructFor::compileOpen(
        $this->compiler,
        array_merge(
            $this->yystack[$this->yyidx + 0]->minor,
            array(array('start' => $this->yystack[$this->yyidx + -3]->minor), array('to' => $this->yystack[$this->yyidx + -1]->minor))
        )
    );
    }
#line 1551 "Parser.php"
#line 389 "Parser.y"
    function yy_r29(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructFor::compileOpen(
        $this->compiler,
        array_merge(
            $this->yystack[$this->yyidx + 0]->minor,
            array(array('start' => $this->yystack[$this->yyidx + -5]->minor), array('to' => $this->yystack[$this->yyidx + -3]->minor), array('step' => $this->yystack[$this->yyidx + -1]->minor))
        )
    );
    }
#line 1563 "Parser.php"
#line 401 "Parser.y"
    function yy_r30(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructForEach::compileOpen($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 1569 "Parser.php"
#line 407 "Parser.y"
    function yy_r31(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructForEach::compileOpen(
        $this->compiler,
        array(array('from' => $this->yystack[$this->yyidx + -3]->minor), array('item' => $this->yystack[$this->yyidx + 0]->minor))
    );
    }
#line 1578 "Parser.php"
#line 416 "Parser.y"
    function yy_r32(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructForEach::compileOpen(
        $this->compiler,
        array_merge($this->yystack[$this->yyidx + 0]->minor, array(array('from' => $this->yystack[$this->yyidx + -4]->minor), array('item' => $this->yystack[$this->yyidx + -1]->minor)))
    );
    }
#line 1587 "Parser.php"
#line 425 "Parser.y"
    function yy_r33(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructForEach::compileOpen(
        $this->compiler,
        array(
            array('from' => $this->yystack[$this->yyidx + -6]->minor),
            array('item' => $this->yystack[$this->yyidx + 0]->minor),
            array('key' => $this->yystack[$this->yyidx + -3]->minor),
        )
    );
    }
#line 1600 "Parser.php"
#line 438 "Parser.y"
    function yy_r34(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructForEach::compileOpen(
        $this->compiler,
        array_merge(
            $this->yystack[$this->yyidx + 0]->minor,
            array(
                array('from' => $this->yystack[$this->yyidx + -7]->minor),
                array('item' => $this->yystack[$this->yyidx + -1]->minor),
                array('key' => $this->yystack[$this->yyidx + -4]->minor),
            )
        )
    );
    }
#line 1616 "Parser.php"
#line 455 "Parser.y"
    function yy_r35(){
    $j = strrpos($this->yystack[$this->yyidx + 0]->minor, '.');
    if ($this->yystack[$this->yyidx + 0]->minor[$j + 1] == 'c') {
// {$smarty.block.child}
        // $this->_retvalue = SMARTY_INTERNAL_COMPILE_BLOCK::compileChildBlock($this->compiler);
    } else {
// {$smarty.block.parent}
        // $this->_retvalue = SMARTY_INTERNAL_COMPILE_BLOCK::compileParentBlock($this->compiler);
    }
    }
#line 1628 "Parser.php"
#line 468 "Parser.y"
    function yy_r36(){
    switch ($this->yystack[$this->yyidx + 0]->minor) {
        case 'capture':
            $this->_retvalue = Constructs\ConstructCapture::compileClose($this->compiler, null);
            break;
        case 'for':
            $this->_retvalue = Constructs\ConstructFor::compileClose($this->compiler, null);
            break;
        case 'foreach':
            $this->_retvalue = Constructs\ConstructForEach::compileClose($this->compiler, null);
            break;
        case 'if':
            $this->_retvalue = Constructs\ConstructIf::compileClose($this->compiler, null);
            break;
        case 'while':
            $this->_retvalue = Constructs\ConstructWhile::compileClose($this->compiler, null);
            break;
        default:
            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + 0]->minor.'close',array());
    }
    }
#line 1651 "Parser.php"
#line 494 "Parser.y"
    function yy_r37(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    $this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 1657 "Parser.php"
#line 500 "Parser.y"
    function yy_r38(){
    $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);
    }
#line 1662 "Parser.php"
#line 505 "Parser.y"
    function yy_r39(){
    $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor => $this->yystack[$this->yyidx + 0]->minor);
    }
#line 1667 "Parser.php"
#line 522 "Parser.y"
    function yy_r42(){
    $this->yystack[$this->yyidx + -2]->minor[]=$this->yystack[$this->yyidx + 0]->minor;
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor;
    }
#line 1673 "Parser.php"
#line 527 "Parser.y"
    function yy_r43(){
    $this->_retvalue = array('var' => $this->yystack[$this->yyidx + -2]->minor, 'value'=>$this->yystack[$this->yyidx + 0]->minor);
    }
#line 1678 "Parser.php"
#line 551 "Parser.y"
    function yy_r47(){
    $this->_retvalue = Wrappers\StaticWrapper::static_if_all($this->yystack[$this->yyidx + -2]->minor . trim($this->yystack[$this->yyidx + -1]->minor) . $this->yystack[$this->yyidx + 0]->minor, array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 1683 "Parser.php"
#line 570 "Parser.y"
    function yy_r51(){
    $this->compiler->has_code = true;
    $this->_retvalue = Constructs\ConstructModifier::compileOpen($this->compiler, array(
        'value' => $this->yystack[$this->yyidx + -1]->minor,
        'modifierlist' => $this->yystack[$this->yyidx + 0]->minor,
    ));
    }
#line 1692 "Parser.php"
#line 580 "Parser.y"
    function yy_r52(){
    $this->_retvalue = new Wrappers\StaticWrapper($this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor);
    }
#line 1697 "Parser.php"
#line 584 "Parser.y"
    function yy_r53(){
    $this->_retvalue = new Wrappers\StaticWrapper('in_array('.$this->yystack[$this->yyidx + -2]->minor.','.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 1702 "Parser.php"
#line 588 "Parser.y"
    function yy_r54(){
    $this->_retvalue = new Wrappers\StaticWrapper('in_array('.$this->yystack[$this->yyidx + -2]->minor.',(array)'.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 1707 "Parser.php"
#line 592 "Parser.y"
    function yy_r55(){
    $this->_retvalue = new Wrappers\StaticWrapper($this->yystack[$this->yyidx + -2]->minor . $this->yystack[$this->yyidx + -1]->minor . $this->yystack[$this->yyidx + 0]->minor);
    }
#line 1712 "Parser.php"
#line 596 "Parser.y"
    function yy_r56(){
    $this->_retvalue = new Wrappers\StaticWrapper('!('.$this->yystack[$this->yyidx + -2]->minor.' % '.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 1717 "Parser.php"
#line 600 "Parser.y"
    function yy_r57(){
    $this->_retvalue = new Wrappers\StaticWrapper('!(1 & '.$this->yystack[$this->yyidx + -1]->minor.')');
    }
#line 1722 "Parser.php"
#line 604 "Parser.y"
    function yy_r58(){
    $this->_retvalue = new Wrappers\StaticWrapper('(1 & '.$this->yystack[$this->yyidx + -1]->minor.')');
    }
#line 1727 "Parser.php"
#line 612 "Parser.y"
    function yy_r59(){
    $this->_retvalue = $this->yystack[$this->yyidx + -5]->minor.' ? '.$this->yystack[$this->yyidx + -2]->minor.' : '.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 1732 "Parser.php"
#line 622 "Parser.y"
    function yy_r61(){
    $this->_retvalue = Wrappers\StaticWrapper::static_concat($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 1737 "Parser.php"
#line 627 "Parser.y"
    function yy_r62(){
    $this->_retvalue = Wrappers\StaticWrapper::static_concat('!', $this->yystack[$this->yyidx + 0]->minor);
    }
#line 1742 "Parser.php"
#line 640 "Parser.y"
    function yy_r65(){
    $this->_retvalue = new Wrappers\StaticWrapper($this->yystack[$this->yyidx + 0]->minor);
    }
#line 1747 "Parser.php"
#line 644 "Parser.y"
    function yy_r66(){
    $this->_retvalue = new Wrappers\StaticWrapper($this->yystack[$this->yyidx + -2]->minor.'.'.$this->yystack[$this->yyidx + 0]->minor);
    }
#line 1752 "Parser.php"
#line 649 "Parser.y"
    function yy_r67(){
    if (preg_match('~^true$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = new Wrappers\StaticWrapper('true');
    } elseif (preg_match('~^false$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = new Wrappers\StaticWrapper('false');
    } elseif (preg_match('~^null$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = new Wrappers\StaticWrapper('null');
    } else {
        $this->_retvalue = new Wrappers\StaticWrapper(var_export($this->yystack[$this->yyidx + 0]->minor, true));
    }
    }
#line 1765 "Parser.php"
#line 667 "Parser.y"
    function yy_r69(){
    $this->_retvalue = Wrappers\StaticWrapper::static_if_all("(". $this->yystack[$this->yyidx + -1]->minor .")", array($this->yystack[$this->yyidx + -1]->minor));
    }
#line 1770 "Parser.php"
#line 686 "Parser.y"
    function yy_r72(){
    if ($this->yystack[$this->yyidx + 0]->minor === "'smarty'") {
        $this->_retvalue = new Wrappers\SmartyVarLookupWrapper();
    } else {
        $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 1779 "Parser.php"
#line 694 "Parser.y"
    function yy_r73(){
    if ($this->yystack[$this->yyidx + -1]->minor instanceof Wrappers\SmartyVarLookupWrapper) {
        $decompiled = Decompile::decompileString($this->yystack[$this->yyidx + 0]->minor);
        switch ($decompiled) {
            case 'now':
                $this->_retvalue = new Wrappers\StaticWrapper('time()');
                break;
            case 'template':
                $this->compiler->assert_is_not_strict('$smarty.template is not supported in strict mode', $this);
                $this->_retvalue = new Wrappers\StaticWrapper('basename($_smarty_tpl->source->filepath)');
                break;
            case 'version':
                $this->_retvalue = new Wrappers\StaticWrapper(var_export(\Box\Brainy\Brainy::SMARTY_VERSION, true));
                break;
            case 'ldelim':
                $this->_retvalue = new Wrappers\StaticWrapper(var_export($this->compiler->smarty->left_delimiter, true));
                break;
            case 'rdelim':
                $this->_retvalue = new Wrappers\StaticWrapper(var_export($this->compiler->smarty->right_delimiter, true));
                break;
            case 'foreach':
            case 'capture':
                $this->_retvalue = new Wrappers\SmartyVarPoisonWrapper($decompiled);
                break;
            default:
                $this->compiler->trigger_template_error('$smarty[' . $this->yystack[$this->yyidx + 0]->minor . '] is invalid');
        }

    } elseif ($this->yystack[$this->yyidx + -1]->minor instanceof Wrappers\SmartyVarPoisonWrapper) {
        $this->_retvalue = new Wrappers\StaticWrapper("\$_smarty_tpl->tpl_vars['smarty']->value[" . $this->yystack[$this->yyidx + -1]->minor->type . "][" . $this->yystack[$this->yyidx + 0]->minor . "]");

    } else {
        $this->_retvalue = $this->compileSafeLookupWithBase($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 1816 "Parser.php"
#line 736 "Parser.y"
    function yy_r75(){
    $this->compiler->assert_is_not_strict('Variable indicies with dot syntax is not supported in strict mode', $this);
    $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + 0]->minor);
    }
#line 1822 "Parser.php"
#line 741 "Parser.y"
    function yy_r76(){
    $this->_retvalue = var_export($this->yystack[$this->yyidx + 0]->minor, true);
    }
#line 1827 "Parser.php"
#line 749 "Parser.y"
    function yy_r78(){
    $this->compiler->assert_is_not_strict('Dot syntax with expressions is not supported in strict mode', $this);
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 1833 "Parser.php"
#line 762 "Parser.y"
    function yy_r80(){
    $this->_retvalue = '\''.$this->yystack[$this->yyidx + 0]->minor.'\'';
    }
#line 1838 "Parser.php"
#line 767 "Parser.y"
    function yy_r81(){
    $this->_retvalue = '('.$this->yystack[$this->yyidx + -1]->minor.')';
    }
#line 1843 "Parser.php"
#line 777 "Parser.y"
    function yy_r82(){
    if ($this->security && substr($this->yystack[$this->yyidx + 0]->minor, 0, 1) == '_') {
        $this->compiler->trigger_template_error('Call to private object member "' . $this->yystack[$this->yyidx + 0]->minor . '" not allowed');
    }
    $this->_retvalue = '->'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 1851 "Parser.php"
#line 785 "Parser.y"
    function yy_r83(){
    if ($this->security && substr($this->yystack[$this->yyidx + -3]->minor, 0, 1) == '_') {
        $this->compiler->trigger_template_error('Call to private object member "' . $this->yystack[$this->yyidx + -3]->minor . '" not allowed');
    }
    $this->_retvalue = '->' . $this->yystack[$this->yyidx + -3]->minor . "(" . implode(',', $this->yystack[$this->yyidx + -1]->minor) . ")";
    }
#line 1859 "Parser.php"
#line 796 "Parser.y"
    function yy_r84(){
    if ($this->security && !$this->smarty->security_policy->isTrustedPhpFunction($this->yystack[$this->yyidx + -3]->minor, $this->compiler)) {
        $this->compiler->trigger_template_error('Cannot use untrusted function: ' . $this->yystack[$this->yyidx + -3]->minor);
    }
    if (!(strcasecmp($this->yystack[$this->yyidx + -3]->minor, 'isset') === 0 || strcasecmp($this->yystack[$this->yyidx + -3]->minor, 'empty') === 0 || strcasecmp($this->yystack[$this->yyidx + -3]->minor, 'array') === 0 || is_callable($this->yystack[$this->yyidx + -3]->minor))) {
        $this->compiler->trigger_template_error("unknown function \"" . $this->yystack[$this->yyidx + -3]->minor . "\"");
    }

    $func_name = strtolower($this->yystack[$this->yyidx + -3]->minor);

    $is_language_construct = $func_name === 'isset' || $func_name === 'empty';
    $combined_params = array();
    foreach ($this->yystack[$this->yyidx + -1]->minor as $param) {
        if ($is_language_construct && $param instanceof Wrappers\SafeLookupWrapper) {
            $combined_params[] = $param->getUnsafe();
            continue;
        }
        $combined_params[] = $param;
    }
    $par = implode(',', $combined_params);

    if ($func_name == 'isset') {
        if (count($combined_params) !== 1) {
            $this->compiler->trigger_template_error('Illegal number of paramer in "isset()"');
        }
        $isset_par = str_replace("')->value", "',null,true,false)->value", $par);
        $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". $isset_par .")";

    } elseif (in_array($func_name, array('empty', 'reset', 'current', 'end', 'prev', 'next'))) {

        if ($func_name !== 'empty') {
            $this->compiler->assert_is_not_strict($func_name . ' is not allowed in strict mode', $this);
        }

        if (count($combined_params) != 1) {
            $this->compiler->trigger_template_error('Illegal number of paramer in "' . $func_name . '()"');
        }
        if ($func_name == 'empty') {
            $this->_retvalue = $func_name.'('.str_replace("')->value", "',null,true,false)->value",$combined_params[0]).')';
        } else {
            $this->_retvalue = $func_name.'('.$combined_params[0].')';
        }
    } else {
        $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". $par .")";
    }
    }
#line 1907 "Parser.php"
#line 847 "Parser.y"
    function yy_r85(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -2]->minor,array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 1912 "Parser.php"
#line 857 "Parser.y"
    function yy_r87(){
    $this->_retvalue = array();
    }
#line 1917 "Parser.php"
#line 864 "Parser.y"
    function yy_r88(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -2]->minor,array(array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor)));
    }
#line 1922 "Parser.php"
#line 868 "Parser.y"
    function yy_r89(){
    $this->_retvalue = array(array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor));
    }
#line 1927 "Parser.php"
#line 872 "Parser.y"
    function yy_r90(){
    $this->compiler->assert_is_not_strict('@ is not allowed in templates', $this);
    $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);
    }
#line 1933 "Parser.php"
#line 877 "Parser.y"
    function yy_r91(){
    $this->_retvalue =  array($this->yystack[$this->yyidx + 0]->minor);
    }
#line 1938 "Parser.php"
#line 882 "Parser.y"
    function yy_r92(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 1943 "Parser.php"
#line 902 "Parser.y"
    function yy_r96(){
    $this->_retvalue = '==';
    }
#line 1948 "Parser.php"
#line 906 "Parser.y"
    function yy_r97(){
    $this->_retvalue = '!=';
    }
#line 1953 "Parser.php"
#line 910 "Parser.y"
    function yy_r98(){
    $this->_retvalue = '>';
    }
#line 1958 "Parser.php"
#line 914 "Parser.y"
    function yy_r99(){
    $this->_retvalue = '<';
    }
#line 1963 "Parser.php"
#line 918 "Parser.y"
    function yy_r100(){
    $this->_retvalue = '>=';
    }
#line 1968 "Parser.php"
#line 922 "Parser.y"
    function yy_r101(){
    $this->_retvalue = '<=';
    }
#line 1973 "Parser.php"
#line 926 "Parser.y"
    function yy_r102(){
    $this->_retvalue = '===';
    }
#line 1978 "Parser.php"
#line 930 "Parser.y"
    function yy_r103(){
    $this->_retvalue = '!==';
    }
#line 1983 "Parser.php"
#line 934 "Parser.y"
    function yy_r104(){
    $this->_retvalue = '%';
    }
#line 1988 "Parser.php"
#line 938 "Parser.y"
    function yy_r105(){
    $this->_retvalue = '&&';
    }
#line 1993 "Parser.php"
#line 942 "Parser.y"
    function yy_r106(){
    $this->_retvalue = '||';
    }
#line 1998 "Parser.php"
#line 946 "Parser.y"
    function yy_r107(){
    $this->compiler->assert_is_not_strict('XOR is not supported in strict mode', $this);
    $this->_retvalue = ' XOR ';
    }
#line 2004 "Parser.php"
#line 954 "Parser.y"
    function yy_r108(){
    $this->_retvalue = 'array('.$this->yystack[$this->yyidx + -1]->minor.')';
    }
#line 2009 "Parser.php"
#line 958 "Parser.y"
    function yy_r109(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.','.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2014 "Parser.php"
#line 964 "Parser.y"
    function yy_r111(){
    return;
    }
#line 2019 "Parser.php"
#line 968 "Parser.y"
    function yy_r112(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'=>'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2024 "Parser.php"
#line 980 "Parser.y"
    function yy_r114(){
    $this->_retvalue = "''";
    }
#line 2029 "Parser.php"
#line 984 "Parser.y"
    function yy_r115(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor->to_smarty_php();
    }
#line 2034 "Parser.php"
#line 989 "Parser.y"
    function yy_r116(){
    $this->yystack[$this->yyidx + -1]->minor->append_subtree($this->yystack[$this->yyidx + 0]->minor);
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 2040 "Parser.php"
#line 994 "Parser.y"
    function yy_r117(){
    $this->_retvalue = new Helpers\DoubleQuoted($this);
    $this->_retvalue->append_subtree($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2046 "Parser.php"
#line 999 "Parser.y"
    function yy_r118(){
    $this->_retvalue = new Helpers\Expression('(string)' . $this->compileVariable("'" . substr($this->yystack[$this->yyidx + 0]->minor, 1) . "'"));
    }
#line 2051 "Parser.php"
#line 1003 "Parser.y"
    function yy_r119(){
    $this->_retvalue = new Helpers\Expression('(string)(' . $this->yystack[$this->yyidx + -1]->minor . ')');
    }
#line 2056 "Parser.php"
#line 1007 "Parser.y"
    function yy_r120(){
    $this->_retvalue = new Helpers\DoubleQuotedContent($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2061 "Parser.php"

    private $_retvalue;

    public function yy_reduce($yyruleno)
    {
        $yymsp = $this->yystack[$this->yyidx];

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for ($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            if ($yysize) {
                $this->yyidx++;
                $x = new TP_yyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    public function yy_parse_failed()
    {
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
    }

    public function yy_syntax_error($yymajor, $TOKEN)
    {
#line 118 "Parser.y"

    $this->internalError = true;
    $this->yymajor = $yymajor;
    $this->compiler->trigger_template_error();
#line 2115 "Parser.php"
    }

    public function yy_accept()
    {
        while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
#line 111 "Parser.y"

    $this->successful = !$this->internalError;
    $this->internalError = false;
    $this->retvalue = $this->_retvalue;
#line 2129 "Parser.php"
    }

    public function doParse($yymajor, $yytokenvalue)
    {
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */

        if ($this->yyidx === null || $this->yyidx < 0) {
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new TP_yyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);

        do {
            $yyact = $this->yy_find_shift_action($yymajor);
            if ($yymajor < self::YYERRORSYMBOL &&
                  !$this->yy_is_expected_token($yymajor)) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if (self::YYERRORSYMBOL) {
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit) {
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0 &&
                                 $yymx != self::YYERRORSYMBOL &&
        ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                              ){
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}
