<?php
/**
 * Brainy Internal Plugin Templateparser
 *
 * This is the template parser.
 * It is generated from the smarty_internal_templateparser.y file
 * @package Brainy
 * @subpackage Compiler
 * @author Uwe Tews
 * @author Matt Basta
 */

class BrainySafeLookupWrapper
{
    private $unsafeVersion;
    private $safeVersion;

    /**
     * @param string $unsafe
     * @param string $safe
     */
    public function __construct($unsafe, $safe) {
        $this->unsafeVersion = $unsafe;
        $this->safeVersion = $safe;
    }

    /**
     * @return string
     */
    public function getUnsafe() {
        return $this->unsafeVersion;
    }

    /**
     * The __toString() method should always return the safe version.
     * @return string
     */
    public function __toString() {
        return $this->safeVersion;
    }
}

class BrainyStaticWrapper
{
    private $code;

    /**
     * @param string $code
     */
    public function __construct($code) {
        $this->code = $code;
    }

    /**
     * The __toString() method un-statics the contents
     * @return string
     */
    public function __toString() {
        return $this->code;
    }

    /**
     * Combine two values which may be static wrappers. The output is only a
     * static wrapper if both the left and the right are static wrappers.
     * @param string|BrainyStaticWrapper $left
     * @param string|BrainyStaticWrapper $right
     * @return string|BrainyStaticWrapper
     */
    public static function concat($left, $right) {
        if ($left instanceof BrainyStaticWrapper && $right instanceof BrainyStaticWrapper) {
            return new BrainyStaticWrapper($left . $right);
        }
        return $left . $right;
    }

    /**
     * Combine two values which may be static wrappers. The output is a static
     * wrapper if either the left or the right are static wrappers. This is
     * only to be used in cases where the left or the right is known not to
     * affect whether the result is a static wrapper.
     * @param string|BrainyStaticWrapper $left
     * @param string|BrainyStaticWrapper $right
     * @return string|BrainyStaticWrapper
     */
    public static function static_concat($left, $right) {
        if ($left instanceof BrainyStaticWrapper || $right instanceof BrainyStaticWrapper) {
            return new BrainyStaticWrapper($left . $right);
        }
        return $left . $right;
    }

    /**
     * If all of the values in $conditions are static wrappers, the result is a
     * static wrapper of $code. Otherwise, $code is returned.
     * @param string $code
     * @param array $conditions
     * @return string|BrainyStaticWrapper
     */
    public static function static_if_all($code, $conditions) {
        foreach ($conditions as $cond) {
            if (!($cond instanceof BrainyStaticWrapper)) {
                return $code;
            }
        }
        return new BrainyStaticWrapper($code);
    }
}

class TP_yyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};


#line 17 "smarty_internal_templateparser.y"
class Smarty_Internal_Templateparser#line 112 "smarty_internal_templateparser.php"
{
#line 19 "smarty_internal_templateparser.y"

    const Err1 = "Security error: Call to private object member not allowed";
    const Err2 = "Security error: Call to dynamic object member not allowed";
    // states whether the parse was successful or not
    public $successful = true;
    public $retvalue = 0;
    public static $prefix_number = 0;
    private $lex;
    private $internalError = false;
    private $strip = 0;

    private $safe_lookups = 0;
    private $strict_mode = false;

    function __construct($lex, $compiler) {
        $this->lex = $lex;
        $this->compiler = $compiler;
        $this->smarty = $this->compiler->smarty;
        $this->template = $this->compiler->template;
        $this->compiler->has_variable_string = false;
        $this->compiler->prefix_code = array();
        $this->security = isset($this->smarty->security_policy);
        $this->block_nesting_level = 0;
        $this->current_buffer = $this->root_buffer = new _smarty_template_buffer($this);

        $this->safe_lookups = $this->smarty->safe_lookups;
    }

    /**
     * Strips whitespace from a string
     * @param string $string
     * @return string
     */
    protected static function stripString($string) {
        // Replaces whitespace followed by a `<` with null.
        // `     \n     <foo>` -> `<foo>`
        // `     \n     </foo>` -> `</foo>`
        $string = preg_replace('/\s+(?=<\/)/ims', '', $string);
        // `     \n     <foo>` -> ` <foo>`
        // `     \n     &nbsp;` -> `&nbsp;`
        $string = preg_replace('/\s+(?=[<&])/ims', ' ', $string);
        // Replaces `>` followed by whitespace with `>`
        // `<div>\n  foo` -> `<div>foo`
        $string = preg_replace('/>\s+(?=\S)/ims', '>', $string);
        // Replaces whitespace followed by anything else with a space.
        // `            data-hello="` -> ` data-hello="`
        $string = preg_replace('/\s+(?=\w)/ims', ' ', $string);

        // Is there work to be done at the end of the string?
        if ($string !== rtrim($string)) {
            $string = rtrim($string);
            // If the last non-whitespace character is not a `>`, add a space.
            if (substr($string, -1) !== '>') {
                $string .= ' ';
            }
        }
        return $string;
    }

    /**
     * @return bool
     */
    public function isStrictMode() {
        return $this->strict_mode;
    }

    /**
     * @param string $variable The name of the variable to look up
     * @param string|void $value The member of the SmartyVariable to access
     * @return string|BrainySafeLookupWrapper
     */
    public function compileVariable($variable, $value = 'value')
    {
        $unsafe = '$_smarty_tpl->tpl_vars[' . $variable . ']->' . $value;
        if ($this->safe_lookups === 0) { // Unsafe lookups
            return $unsafe;
        }
        $safe = 'smarty_safe_var_lookup($_smarty_tpl->tpl_vars, '. $variable .', ' . $this->safe_lookups . ')->' . $value;
        return new BrainySafeLookupWrapper($unsafe, $safe);
    }

    /**
     * @param string $base
     * @param string $variable
     * @return string|BrainySafeLookupWrapper
     */
    public function compileSafeLookupWithBase($base, $variable)
    {
        $unsafe = $base . '[' . $variable . ']';
        if ($this->safe_lookups === 0) { // Unsafe lookups
            return $unsafe;
        }
        $safe = 'smarty_safe_array_lookup(' . $base . ', '. $variable .', ' . $this->safe_lookups . ')';
        return new BrainySafeLookupWrapper($unsafe, $safe);
    }
#line 211 "smarty_internal_templateparser.php"

    const TP_VERT                           =  1;
    const TP_COLON                          =  2;
    const TP_SETSTRICT                      =  3;
    const TP_RDEL                           =  4;
    const TP_COMMENT                        =  5;
    const TP_TEXT                           =  6;
    const TP_STRIPON                        =  7;
    const TP_STRIPOFF                       =  8;
    const TP_BLOCKSOURCE                    =  9;
    const TP_LITERALSTART                   = 10;
    const TP_LITERALEND                     = 11;
    const TP_LITERAL                        = 12;
    const TP_LDEL                           = 13;
    const TP_EQUAL                          = 14;
    const TP_DOLLAR                         = 15;
    const TP_ID                             = 16;
    const TP_LDELIF                         = 17;
    const TP_LDELFOR                        = 18;
    const TP_SEMICOLON                      = 19;
    const TP_INCDEC                         = 20;
    const TP_TO                             = 21;
    const TP_STEP                           = 22;
    const TP_LDELFOREACH                    = 23;
    const TP_SPACE                          = 24;
    const TP_AS                             = 25;
    const TP_APTR                           = 26;
    const TP_LDELSETFILTER                  = 27;
    const TP_SMARTYBLOCKCHILDPARENT         = 28;
    const TP_LDELSLASH                      = 29;
    const TP_ATTR                           = 30;
    const TP_INTEGER                        = 31;
    const TP_COMMA                          = 32;
    const TP_OPENP                          = 33;
    const TP_CLOSEP                         = 34;
    const TP_MATH                           = 35;
    const TP_UNIMATH                        = 36;
    const TP_ANDSYM                         = 37;
    const TP_ISIN                           = 38;
    const TP_ISDIVBY                        = 39;
    const TP_ISNOTDIVBY                     = 40;
    const TP_ISEVEN                         = 41;
    const TP_ISNOTEVEN                      = 42;
    const TP_ISEVENBY                       = 43;
    const TP_ISNOTEVENBY                    = 44;
    const TP_ISODD                          = 45;
    const TP_ISNOTODD                       = 46;
    const TP_ISODDBY                        = 47;
    const TP_ISNOTODDBY                     = 48;
    const TP_INSTANCEOF                     = 49;
    const TP_QMARK                          = 50;
    const TP_NOT                            = 51;
    const TP_TYPECAST                       = 52;
    const TP_DOT                            = 53;
    const TP_SINGLEQUOTESTRING              = 54;
    const TP_AT                             = 55;
    const TP_HATCH                          = 56;
    const TP_OPENB                          = 57;
    const TP_CLOSEB                         = 58;
    const TP_PTR                            = 59;
    const TP_EQUALS                         = 60;
    const TP_NOTEQUALS                      = 61;
    const TP_GREATERTHAN                    = 62;
    const TP_LESSTHAN                       = 63;
    const TP_GREATEREQUAL                   = 64;
    const TP_LESSEQUAL                      = 65;
    const TP_IDENTITY                       = 66;
    const TP_NONEIDENTITY                   = 67;
    const TP_MOD                            = 68;
    const TP_LAND                           = 69;
    const TP_LOR                            = 70;
    const TP_LXOR                           = 71;
    const TP_QUOTE                          = 72;
    const TP_DOLLARID                       = 73;
    const YY_NO_ACTION = 487;
    const YY_ACCEPT_ACTION = 486;
    const YY_ERROR_ACTION = 485;

    const YY_SZ_ACTTAB = 2097;
static public $yy_action = array(
 /*     0 */   180,  169,   22,  273,  121,  226,  238,  247,  257,  254,
 /*    10 */   249,  164,  126,  199,    7,   21,   24,  114,   33,  102,
 /*    20 */   234,   17,  176,   32,  122,  172,    6,  251,  204,   41,
 /*    30 */   211,  164,  228,  304,   49,   45,   48,   43,   25,   28,
 /*    40 */   295,  291,   27,   19,  306,  307,   18,   12,  100,  158,
 /*    50 */   297,  180,  224,  109,  359,  242,  191,  240,  281,  302,
 /*    60 */   298,  299,  300,  284,  267,  269,  270,  266,  265,  262,
 /*    70 */   264,  180,  172,   26,   32,  207,  288,  180,  279,  139,
 /*    80 */    41,   26,   14,  209,  288,    8,  486,   89,  227,   33,
 /*    90 */   102,  149,   38,  223,   32,  122,  241,  256,  111,  204,
 /*   100 */    41,  211,   13,  167,   35,   49,   45,   48,   43,   25,
 /*   110 */    28,  295,  291,   27,   19,  306,  307,   18,   12,  180,
 /*   120 */   176,  232,   15,  233,    6,   47,  143,  172,  292,    5,
 /*   130 */   302,  298,  299,  300,  284,  267,  269,  270,  266,  265,
 /*   140 */   262,  264,   32,  216,  277,  282,  180,  180,   41,  365,
 /*   150 */   334,  216,    5,   49,   45,   48,   43,   25,   28,  295,
 /*   160 */   291,   27,   19,  306,  307,   18,   12,  180,  180,  365,
 /*   170 */   212,  365,  201,   26,   37,  365,  288,  290,  302,  298,
 /*   180 */   299,  300,  284,  267,  269,  270,  266,  265,  262,  264,
 /*   190 */    34,  365,  115,  182,   47,   47,  180,  365,  171,  362,
 /*   200 */   180,   49,   45,   48,   43,   25,   28,  295,  291,   27,
 /*   210 */    19,  306,  307,   18,   12,  180,   47,  180,  235,  362,
 /*   220 */   328,   31,  172,  308,  286,  362,  302,  298,  299,  300,
 /*   230 */   284,  267,  269,  270,  266,  265,  262,  264,  253,  176,
 /*   240 */    32,   32,    4,    6,   47,  143,   41,   41,   47,   49,
 /*   250 */    45,   48,   43,   25,   28,  295,  291,   27,   19,  306,
 /*   260 */   307,   18,   12,  180,  180,   47,  296,  338,  263,   92,
 /*   270 */   244,  191,  240,  163,  302,  298,  299,  300,  284,  267,
 /*   280 */   269,  270,  266,  265,  262,  264,  198,   32,  187,  165,
 /*   290 */   180,   42,  190,   41,  101,  194,    5,   49,   45,   48,
 /*   300 */    43,   25,   28,  295,  291,   27,   19,  306,  307,   18,
 /*   310 */    12,   99,  159,  172,   31,   26,  305,  166,  288,  103,
 /*   320 */   272,  281,  302,  298,  299,  300,  284,  267,  269,  270,
 /*   330 */   266,  265,  262,  264,  180,  172,   31,  207,  301,   26,
 /*   340 */   157,  119,  288,   26,   68,  209,  288,   98,  231,  281,
 /*   350 */    32,  276,  168,  149,  239,  271,   41,  210,  241,  256,
 /*   360 */   111,   17,  219,  180,   20,  183,  173,  251,   49,   45,
 /*   370 */    48,   43,   25,   28,  295,  291,   27,   19,  306,  307,
 /*   380 */    18,   12,  180,   30,    2,  208,   32,  213,  125,   41,
 /*   390 */    97,  174,   41,  302,  298,  299,  300,  284,  267,  269,
 /*   400 */   270,  266,  265,  262,  264,  219,  127,  149,   26,  236,
 /*   410 */   250,  196,  116,    5,  107,  259,   49,   45,   48,   43,
 /*   420 */    25,   28,  295,  291,   27,   19,  306,  307,   18,   12,
 /*   430 */   180,  162,   26,  252,   26,  197,  194,  203,  141,  195,
 /*   440 */   281,  302,  298,  299,  300,  284,  267,  269,  270,  266,
 /*   450 */   265,  262,  264,  219,  174,  193,  180,   16,  194,  251,
 /*   460 */   255,  117,  123,  206,   49,   45,   48,   43,   25,   28,
 /*   470 */   295,  291,   27,   19,  306,  307,   18,   12,  180,  153,
 /*   480 */   225,  268,   40,    3,   36,  294,  108,  230,  281,  302,
 /*   490 */   298,  299,  300,  284,  267,  269,  270,  266,  265,  262,
 /*   500 */   264,  219,  174,  237,  137,  287,  120,  280,   39,  221,
 /*   510 */   246,  220,   49,   45,   48,   43,   25,   28,  295,  291,
 /*   520 */    27,   19,  306,  307,   18,   12,  180,  245,  283,  243,
 /*   530 */    29,  151,   42,   10,  258,  303,  170,  302,  298,  299,
 /*   540 */   300,  284,  267,  269,  270,  266,  265,  262,  264,  124,
 /*   550 */   202,  289,  200,  292,  110,  222,  292,  292,  292,  292,
 /*   560 */    49,   45,   48,   43,   25,   28,  295,  291,   27,   19,
 /*   570 */   306,  307,   18,   12,  180,  154,  292,  285,  292,  292,
 /*   580 */   292,  292,  144,  292,  281,  302,  298,  299,  300,  284,
 /*   590 */   267,  269,  270,  266,  265,  262,  264,  219,  174,  292,
 /*   600 */   292,  292,  292,  292,  292,  292,  292,  292,   49,   45,
 /*   610 */    48,   43,   25,   28,  295,  291,   27,   19,  306,  307,
 /*   620 */    18,   12,  180,    9,  292,  292,  292,  292,  292,  292,
 /*   630 */   292,  118,   95,  302,  298,  299,  300,  284,  267,  269,
 /*   640 */   270,  266,  265,  262,  264,  303,  198,  219,  292,  292,
 /*   650 */   292,  292,  292,  292,  292,  292,   49,   45,   48,   43,
 /*   660 */    25,   28,  295,  291,   27,   19,  306,  307,   18,   12,
 /*   670 */   180,  292,  292,  292,  292,  292,  292,  292,  140,   94,
 /*   680 */   278,  302,  298,  299,  300,  284,  267,  269,  270,  266,
 /*   690 */   265,  262,  264,  219,  219,  292,  292,  292,  292,  292,
 /*   700 */   292,  292,  292,  292,   49,   45,   48,   43,   25,   28,
 /*   710 */   295,  291,   27,   19,  306,  307,   18,   12,  150,  292,
 /*   720 */   292,  292,  292,  292,  292,  292,  292,  281,  292,  302,
 /*   730 */   298,  299,  300,  284,  267,  269,  270,  266,  265,  262,
 /*   740 */   264,   49,   45,   48,   43,   25,   28,  295,  291,   27,
 /*   750 */    19,  306,  307,   18,   12,  292,  292,  292,  292,  292,
 /*   760 */   292,  292,  292,  292,  292,  292,  302,  298,  299,  300,
 /*   770 */   284,  267,  269,  270,  266,  265,  262,  264,  292,  363,
 /*   780 */     7,  292,  128,   91,   33,  102,  292,  292,  292,  189,
 /*   790 */   122,  292,  292,  145,  204,  275,  211,  292,  217,  363,
 /*   800 */    11,  292,  281,   44,  292,  363,  292,  292,    5,  292,
 /*   810 */   292,  292,    7,  303,  126,  178,   33,  102,   46,   50,
 /*   820 */   214,  248,  122,  109,    1,  146,  204,  142,  211,  292,
 /*   830 */   217,  292,   11,  292,  281,   44,  292,  292,  292,   93,
 /*   840 */   292,  292,  219,  292,    7,  303,  126,  215,   33,  102,
 /*   850 */    46,   50,  214,  248,  122,  109,    1,  293,  204,  292,
 /*   860 */   211,  292,  217,  292,   11,  292,  292,   44,  292,  292,
 /*   870 */   292,   93,  292,  292,  292,  292,    7,  292,  126,  175,
 /*   880 */    33,  102,   46,   50,  214,  248,  122,  109,    1,  147,
 /*   890 */   204,  292,  211,  292,  186,  292,   11,  292,  281,   44,
 /*   900 */   292,  292,  292,   93,  292,  292,  292,  292,    7,  303,
 /*   910 */   126,  215,   33,  102,   46,   50,  214,  248,  122,  109,
 /*   920 */     1,  155,  204,  292,  211,  292,  217,  292,   23,  292,
 /*   930 */   281,   44,  292,  292,  292,   93,  292,  292,  292,  292,
 /*   940 */     7,  303,  126,  188,   33,  102,   46,   50,  214,  248,
 /*   950 */   122,  109,    1,  292,  204,  292,  211,  292,  217,  292,
 /*   960 */    11,  292,  292,   44,  292,  292,  292,   93,  292,  292,
 /*   970 */   292,  292,    7,  292,  129,  215,   33,  102,   46,   50,
 /*   980 */   214,  248,  122,  109,    1,  292,  204,  292,  211,  292,
 /*   990 */   217,  292,   11,  292,  292,   44,  292,  292,  292,   93,
 /*  1000 */   292,  292,  292,  292,    7,  292,  126,  218,   33,  102,
 /*  1010 */    46,   50,  214,  248,  122,  109,    1,  292,  204,  292,
 /*  1020 */   211,  292,  217,  292,   23,  292,  292,   44,  292,  292,
 /*  1030 */   292,   93,  292,  292,  292,  292,    7,  292,  126,  215,
 /*  1040 */    33,  102,   46,   50,  214,  248,  122,  109,  292,  292,
 /*  1050 */   204,  292,  211,  292,  217,  292,   23,  292,  292,   44,
 /*  1060 */   292,  292,  292,   93,  207,  292,  292,  292,  112,  292,
 /*  1070 */   292,   80,  209,  292,   46,   50,  214,  248,  292,  109,
 /*  1080 */   149,  239,  271,  292,  207,  241,  256,  111,  112,  292,
 /*  1090 */   292,   80,  209,  292,  292,   93,  260,  292,  292,  292,
 /*  1100 */   149,  239,  271,  292,  207,  241,  256,  111,  119,  292,
 /*  1110 */   292,   68,  209,  292,  292,  185,  261,  292,  292,  292,
 /*  1120 */   149,  239,  271,  292,  292,  241,  256,  111,  292,  292,
 /*  1130 */   207,  292,  179,  292,  119,  292,  292,   68,  209,  292,
 /*  1140 */   292,  292,  292,  292,  292,  292,  149,  239,  271,  292,
 /*  1150 */   292,  241,  256,  111,  292,  207,  292,  292,  181,  119,
 /*  1160 */   292,  292,   82,  209,  292,  292,  292,  292,  292,  292,
 /*  1170 */   292,  149,  239,  271,  292,  207,  241,  256,  111,  119,
 /*  1180 */   292,  292,   63,  209,  292,  292,  292,  292,  292,  292,
 /*  1190 */   292,  149,  239,  271,  292,  207,  241,  256,  111,  119,
 /*  1200 */   292,  292,   75,  209,  292,  292,  207,  292,  292,  292,
 /*  1210 */   130,  149,  239,  271,  209,  292,  241,  256,  111,  292,
 /*  1220 */   292,  292,  149,  292,  229,  292,  207,  241,  256,  111,
 /*  1230 */   105,  292,  292,   69,  209,  292,  292,  292,  292,  292,
 /*  1240 */   292,  292,  149,  239,  271,  292,  292,  241,  256,  111,
 /*  1250 */   292,  207,  292,  292,  292,  113,  292,  292,   55,  209,
 /*  1260 */   292,  292,  292,  292,  292,  292,  292,  149,  239,  271,
 /*  1270 */   292,  207,  241,  256,  111,  104,  292,  292,   59,  209,
 /*  1280 */   292,  292,  292,  292,  292,  292,  292,  149,  239,  271,
 /*  1290 */   292,  207,  241,  256,  111,  119,  292,  292,   74,  209,
 /*  1300 */   292,  292,  207,  292,  292,  292,  135,  149,  239,  271,
 /*  1310 */   209,  292,  241,  256,  111,  292,  292,  292,  149,  292,
 /*  1320 */   292,  292,  207,  241,  256,  111,  119,  292,  292,   86,
 /*  1330 */   209,  292,  292,  292,  292,  292,  292,  292,  149,  239,
 /*  1340 */   271,  292,  292,  241,  256,  111,  292,  207,  292,  292,
 /*  1350 */   292,   90,  292,  292,   53,  184,  292,  292,  292,  292,
 /*  1360 */   292,  292,  292,  149,  239,  271,  292,  207,  241,  256,
 /*  1370 */   111,  119,  292,  292,   67,  209,  292,  292,  292,  292,
 /*  1380 */   292,  292,  292,  149,  239,  271,  292,  207,  241,  256,
 /*  1390 */   111,   90,  292,  292,   52,  177,  292,  292,  207,  292,
 /*  1400 */   292,  292,  132,  149,  239,  271,  209,  292,  241,  256,
 /*  1410 */   111,  292,  292,  292,  149,  292,  292,  292,  207,  241,
 /*  1420 */   256,  111,  119,  292,  292,   76,  209,  292,  292,  292,
 /*  1430 */   292,  292,  292,  292,  149,  239,  271,  292,  292,  241,
 /*  1440 */   256,  111,  292,  207,  292,  292,  292,  119,  292,  292,
 /*  1450 */    61,  209,  292,  292,  292,  292,  292,  292,  292,  149,
 /*  1460 */   239,  271,  292,  207,  241,  256,  111,  119,  292,  292,
 /*  1470 */    62,  209,  292,  292,  292,  292,  292,  292,  292,  149,
 /*  1480 */   239,  271,  292,  207,  241,  256,  111,  119,  292,  292,
 /*  1490 */    77,  209,  292,  292,  207,  292,  292,  292,  136,  149,
 /*  1500 */   239,  271,  209,  292,  241,  256,  111,  292,  292,  292,
 /*  1510 */   149,  292,  292,  292,  207,  241,  256,  111,  119,  292,
 /*  1520 */   292,   60,  209,  292,  292,  292,  292,  292,  292,  292,
 /*  1530 */   149,  239,  271,  292,  292,  241,  256,  111,  292,  207,
 /*  1540 */   292,  292,  292,  119,  292,  292,   72,  209,  292,  292,
 /*  1550 */   292,  292,  292,  292,  292,  149,  239,  271,  292,  207,
 /*  1560 */   241,  256,  111,  119,  292,  292,   51,  209,  292,  292,
 /*  1570 */   292,  292,  292,  292,  292,  149,  239,  271,  292,  207,
 /*  1580 */   241,  256,  111,  119,  292,  292,   73,  209,  292,  292,
 /*  1590 */   207,  292,  292,  292,  133,  149,  239,  271,  209,  292,
 /*  1600 */   241,  256,  111,  292,  292,  292,  149,  292,  292,  292,
 /*  1610 */   207,  241,  256,  111,  106,  292,  292,   71,  209,  292,
 /*  1620 */   292,  292,  292,  292,  292,  292,  149,  239,  271,  292,
 /*  1630 */   292,  241,  256,  111,  292,  207,  292,  292,  292,  119,
 /*  1640 */   292,  292,   83,  209,  292,  292,  292,  292,  292,  292,
 /*  1650 */   292,  149,  239,  271,  292,  207,  241,  256,  111,  119,
 /*  1660 */   292,  292,   64,  209,  292,  292,  292,  292,  292,  292,
 /*  1670 */   292,  149,  239,  271,  292,  207,  241,  256,  111,  119,
 /*  1680 */   292,  292,   57,  209,  292,  292,  207,  292,  292,  292,
 /*  1690 */   131,  149,  239,  271,  209,  292,  241,  256,  111,  292,
 /*  1700 */   292,  292,  149,  292,  292,  292,  207,  241,  256,  111,
 /*  1710 */   119,  292,  292,   87,  209,  292,  292,  292,  292,  292,
 /*  1720 */   292,  292,  149,  239,  271,  292,  292,  241,  256,  111,
 /*  1730 */   292,  207,  292,  292,  292,  119,  292,  292,   58,  209,
 /*  1740 */   292,  292,  292,  292,  292,  292,  292,  149,  239,  271,
 /*  1750 */   292,  207,  241,  256,  111,  119,  292,  292,   70,  209,
 /*  1760 */   292,  292,  292,  292,  292,  292,  292,  149,  239,  271,
 /*  1770 */   292,  207,  241,  256,  111,  119,  292,  292,   79,  209,
 /*  1780 */   292,  292,  207,  292,  292,  292,  134,  149,  239,  271,
 /*  1790 */   209,  292,  241,  256,  111,  292,  292,  292,  149,  292,
 /*  1800 */   292,  292,  207,  241,  256,  111,  119,  292,  292,   66,
 /*  1810 */   209,  292,  292,  292,  292,  292,  292,  292,  149,  239,
 /*  1820 */   271,  292,  292,  241,  256,  111,  292,  207,  292,  292,
 /*  1830 */   292,  119,  292,  292,   81,  209,  292,  292,  292,  292,
 /*  1840 */   292,  292,  292,  149,  239,  271,  292,  207,  241,  256,
 /*  1850 */   111,  119,  292,  292,   56,  209,  292,  292,  292,  292,
 /*  1860 */   292,  292,  292,  149,  239,  271,  292,  207,  241,  256,
 /*  1870 */   111,  119,  292,  292,   84,  209,  292,  292,  207,  292,
 /*  1880 */   292,  292,  138,  149,  239,  271,  209,  292,  241,  256,
 /*  1890 */   111,  292,  292,  292,  149,  292,  292,  292,  207,  241,
 /*  1900 */   256,  111,  119,  292,  292,   78,  209,  292,  292,  292,
 /*  1910 */   292,  292,  292,  292,  149,  239,  271,  292,  292,  241,
 /*  1920 */   256,  111,  292,  207,  292,  292,  292,  119,  292,  292,
 /*  1930 */    88,  209,  292,  292,  292,  292,  292,  292,  292,  149,
 /*  1940 */   239,  271,  292,  207,  241,  256,  111,  119,  292,  292,
 /*  1950 */    85,  209,  292,  292,  292,  292,  292,  292,  292,  149,
 /*  1960 */   239,  271,  292,  207,  241,  256,  111,  119,  292,  292,
 /*  1970 */    54,  209,  292,  169,  148,  292,  292,  292,  292,  149,
 /*  1980 */   239,  271,  292,  281,  241,  256,  111,   21,   24,  292,
 /*  1990 */   169,  160,  292,  292,  207,  292,  292,  172,  119,  292,
 /*  2000 */   281,   65,  209,  292,   21,   24,  292,  292,  292,  292,
 /*  2010 */   149,  239,  271,  292,  172,  241,  256,  111,  279,  292,
 /*  2020 */   292,  292,  292,  292,  292,    8,  292,  292,  292,   33,
 /*  2030 */   102,  292,  169,  161,  292,  122,  292,  292,  292,  204,
 /*  2040 */   292,  211,  281,  292,   96,  156,   21,   24,  292,  292,
 /*  2050 */   169,  152,  292,  292,  281,  292,  172,  292,   21,   24,
 /*  2060 */   281,  292,  292,  292,   21,   24,  292,  292,  172,  292,
 /*  2070 */    26,  292,  292,  288,  172,  292,  292,  292,  292,   26,
 /*  2080 */   292,   32,  288,  205,  274,  282,  292,   41,  292,  292,
 /*  2090 */    32,  292,  192,  292,  292,  292,   41,
    );
    static public $yy_lookahead = array(
 /*     0 */     1,   84,   13,    4,   15,   16,    5,    6,    7,    8,
 /*    10 */     9,   10,   15,   16,   13,   98,   99,   15,   17,   18,
 /*    20 */    31,   14,   53,   24,   23,  108,   57,   20,   27,   30,
 /*    30 */    29,   10,   11,   12,   35,   36,   37,   38,   39,   40,
 /*    40 */    41,   42,   43,   44,   45,   46,   47,   48,   84,   85,
 /*    50 */    80,    1,   82,   56,    4,   78,   79,   80,   94,   60,
 /*    60 */    61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
 /*    70 */    71,    1,  108,   13,   24,   79,   16,    1,    6,   83,
 /*    80 */    30,   13,   14,   87,   16,   13,   75,   76,   20,   17,
 /*    90 */    18,   95,   22,   97,   24,   23,  100,  101,  102,   27,
 /*   100 */    30,   29,   26,   84,   14,   35,   36,   37,   38,   39,
 /*   110 */    40,   41,   42,   43,   44,   45,   46,   47,   48,    1,
 /*   120 */    53,   16,   26,   56,   57,   49,   59,  108,  109,   33,
 /*   130 */    60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
 /*   140 */    70,   71,   24,   53,   72,   73,    1,    1,   30,    4,
 /*   150 */     4,   53,   33,   35,   36,   37,   38,   39,   40,   41,
 /*   160 */    42,   43,   44,   45,   46,   47,   48,    1,    1,   24,
 /*   170 */    25,    4,   53,   13,   14,   30,   16,   58,   60,   61,
 /*   180 */    62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
 /*   190 */    13,   24,   15,   16,   49,   49,    1,   30,   84,    4,
 /*   200 */     1,   35,   36,   37,   38,   39,   40,   41,   42,   43,
 /*   210 */    44,   45,   46,   47,   48,    1,   49,    1,    4,   24,
 /*   220 */     4,   32,  108,   34,   58,   30,   60,   61,   62,   63,
 /*   230 */    64,   65,   66,   67,   68,   69,   70,   71,    4,   53,
 /*   240 */    24,   24,   32,   57,   49,   59,   30,   30,   49,   35,
 /*   250 */    36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
 /*   260 */    46,   47,   48,    1,    1,   49,    4,    4,   58,   77,
 /*   270 */    78,   79,   80,   93,   60,   61,   62,   63,   64,   65,
 /*   280 */    66,   67,   68,   69,   70,   71,   79,   24,   88,   84,
 /*   290 */     1,    2,   92,   30,   93,   95,   33,   35,   36,   37,
 /*   300 */    38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
 /*   310 */    48,   84,   85,  108,   32,   13,   34,   93,   16,  112,
 /*   320 */   113,   94,   60,   61,   62,   63,   64,   65,   66,   67,
 /*   330 */    68,   69,   70,   71,    1,  108,   32,   79,   34,   13,
 /*   340 */    85,   83,   16,   13,   86,   87,   16,   90,   16,   94,
 /*   350 */    24,    4,   19,   95,   96,   97,   30,   55,  100,  101,
 /*   360 */   102,   14,  105,    1,   13,  107,   16,   20,   35,   36,
 /*   370 */    37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
 /*   380 */    47,   48,    1,   24,   33,   55,   24,   55,   15,   30,
 /*   390 */    90,  108,   30,   60,   61,   62,   63,   64,   65,   66,
 /*   400 */    67,   68,   69,   70,   71,  105,   33,   95,   13,  103,
 /*   410 */   104,   16,   15,   33,  102,   34,   35,   36,   37,   38,
 /*   420 */    39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
 /*   430 */     1,   85,   13,   92,   13,   16,   95,   16,   90,   16,
 /*   440 */    94,   60,   61,   62,   63,   64,   65,   66,   67,   68,
 /*   450 */    69,   70,   71,  105,  108,   92,    1,   14,   95,   20,
 /*   460 */    34,   15,   15,   34,   35,   36,   37,   38,   39,   40,
 /*   470 */    41,   42,   43,   44,   45,   46,   47,   48,    1,   85,
 /*   480 */    16,    4,    2,   33,   14,   58,   90,   16,   94,   60,
 /*   490 */    61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
 /*   500 */    71,  105,  108,    4,   16,   56,   15,    4,   21,   16,
 /*   510 */    31,  103,   35,   36,   37,   38,   39,   40,   41,   42,
 /*   520 */    43,   44,   45,   46,   47,   48,    1,   31,   94,    3,
 /*   530 */    89,  103,    2,   50,   24,  105,   19,   60,   61,   62,
 /*   540 */    63,   64,   65,   66,   67,   68,   69,   70,   71,   32,
 /*   550 */    25,  106,   89,  109,   81,   11,  114,  114,  114,  114,
 /*   560 */    35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
 /*   570 */    45,   46,   47,   48,    1,   85,  114,    4,  114,  114,
 /*   580 */   114,  114,   90,  114,   94,   60,   61,   62,   63,   64,
 /*   590 */    65,   66,   67,   68,   69,   70,   71,  105,  108,  114,
 /*   600 */   114,  114,  114,  114,  114,  114,  114,  114,   35,   36,
 /*   610 */    37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
 /*   620 */    47,   48,    1,    2,  114,  114,  114,  114,  114,  114,
 /*   630 */   114,   91,   90,   60,   61,   62,   63,   64,   65,   66,
 /*   640 */    67,   68,   69,   70,   71,  105,   79,  105,  114,  114,
 /*   650 */   114,  114,  114,  114,  114,  114,   35,   36,   37,   38,
 /*   660 */    39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
 /*   670 */     1,  114,  114,  114,  114,  114,  114,  114,   90,   90,
 /*   680 */   113,   60,   61,   62,   63,   64,   65,   66,   67,   68,
 /*   690 */    69,   70,   71,  105,  105,  114,  114,  114,  114,  114,
 /*   700 */   114,  114,  114,  114,   35,   36,   37,   38,   39,   40,
 /*   710 */    41,   42,   43,   44,   45,   46,   47,   48,   85,  114,
 /*   720 */   114,  114,  114,  114,  114,  114,  114,   94,  114,   60,
 /*   730 */    61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
 /*   740 */    71,   35,   36,   37,   38,   39,   40,   41,   42,   43,
 /*   750 */    44,   45,   46,   47,   48,  114,  114,  114,  114,  114,
 /*   760 */   114,  114,  114,  114,  114,  114,   60,   61,   62,   63,
 /*   770 */    64,   65,   66,   67,   68,   69,   70,   71,  114,    4,
 /*   780 */    13,  114,   15,   16,   17,   18,  114,  114,  114,   14,
 /*   790 */    23,  114,  114,   85,   27,   28,   29,  114,   31,   24,
 /*   800 */    33,  114,   94,   36,  114,   30,  114,  114,   33,  114,
 /*   810 */   114,  114,   13,  105,   15,   16,   17,   18,   51,   52,
 /*   820 */    53,   54,   23,   56,   57,   85,   27,   90,   29,  114,
 /*   830 */    31,  114,   33,  114,   94,   36,  114,  114,  114,   72,
 /*   840 */   114,  114,  105,  114,   13,  105,   15,   16,   17,   18,
 /*   850 */    51,   52,   53,   54,   23,   56,   57,   58,   27,  114,
 /*   860 */    29,  114,   31,  114,   33,  114,  114,   36,  114,  114,
 /*   870 */   114,   72,  114,  114,  114,  114,   13,  114,   15,   16,
 /*   880 */    17,   18,   51,   52,   53,   54,   23,   56,   57,   85,
 /*   890 */    27,  114,   29,  114,   31,  114,   33,  114,   94,   36,
 /*   900 */   114,  114,  114,   72,  114,  114,  114,  114,   13,  105,
 /*   910 */    15,   16,   17,   18,   51,   52,   53,   54,   23,   56,
 /*   920 */    57,   85,   27,  114,   29,  114,   31,  114,   33,  114,
 /*   930 */    94,   36,  114,  114,  114,   72,  114,  114,  114,  114,
 /*   940 */    13,  105,   15,   16,   17,   18,   51,   52,   53,   54,
 /*   950 */    23,   56,   57,  114,   27,  114,   29,  114,   31,  114,
 /*   960 */    33,  114,  114,   36,  114,  114,  114,   72,  114,  114,
 /*   970 */   114,  114,   13,  114,   15,   16,   17,   18,   51,   52,
 /*   980 */    53,   54,   23,   56,   57,  114,   27,  114,   29,  114,
 /*   990 */    31,  114,   33,  114,  114,   36,  114,  114,  114,   72,
 /*  1000 */   114,  114,  114,  114,   13,  114,   15,   16,   17,   18,
 /*  1010 */    51,   52,   53,   54,   23,   56,   57,  114,   27,  114,
 /*  1020 */    29,  114,   31,  114,   33,  114,  114,   36,  114,  114,
 /*  1030 */   114,   72,  114,  114,  114,  114,   13,  114,   15,   16,
 /*  1040 */    17,   18,   51,   52,   53,   54,   23,   56,  114,  114,
 /*  1050 */    27,  114,   29,  114,   31,  114,   33,  114,  114,   36,
 /*  1060 */   114,  114,  114,   72,   79,  114,  114,  114,   83,  114,
 /*  1070 */   114,   86,   87,  114,   51,   52,   53,   54,  114,   56,
 /*  1080 */    95,   96,   97,  114,   79,  100,  101,  102,   83,  114,
 /*  1090 */   114,   86,   87,  114,  114,   72,  111,  114,  114,  114,
 /*  1100 */    95,   96,   97,  114,   79,  100,  101,  102,   83,  114,
 /*  1110 */   114,   86,   87,  114,  114,  110,  111,  114,  114,  114,
 /*  1120 */    95,   96,   97,  114,  114,  100,  101,  102,  114,  114,
 /*  1130 */    79,  114,  107,  114,   83,  114,  114,   86,   87,  114,
 /*  1140 */   114,  114,  114,  114,  114,  114,   95,   96,   97,  114,
 /*  1150 */   114,  100,  101,  102,  114,   79,  114,  114,  107,   83,
 /*  1160 */   114,  114,   86,   87,  114,  114,  114,  114,  114,  114,
 /*  1170 */   114,   95,   96,   97,  114,   79,  100,  101,  102,   83,
 /*  1180 */   114,  114,   86,   87,  114,  114,  114,  114,  114,  114,
 /*  1190 */   114,   95,   96,   97,  114,   79,  100,  101,  102,   83,
 /*  1200 */   114,  114,   86,   87,  114,  114,   79,  114,  114,  114,
 /*  1210 */    83,   95,   96,   97,   87,  114,  100,  101,  102,  114,
 /*  1220 */   114,  114,   95,  114,   97,  114,   79,  100,  101,  102,
 /*  1230 */    83,  114,  114,   86,   87,  114,  114,  114,  114,  114,
 /*  1240 */   114,  114,   95,   96,   97,  114,  114,  100,  101,  102,
 /*  1250 */   114,   79,  114,  114,  114,   83,  114,  114,   86,   87,
 /*  1260 */   114,  114,  114,  114,  114,  114,  114,   95,   96,   97,
 /*  1270 */   114,   79,  100,  101,  102,   83,  114,  114,   86,   87,
 /*  1280 */   114,  114,  114,  114,  114,  114,  114,   95,   96,   97,
 /*  1290 */   114,   79,  100,  101,  102,   83,  114,  114,   86,   87,
 /*  1300 */   114,  114,   79,  114,  114,  114,   83,   95,   96,   97,
 /*  1310 */    87,  114,  100,  101,  102,  114,  114,  114,   95,  114,
 /*  1320 */   114,  114,   79,  100,  101,  102,   83,  114,  114,   86,
 /*  1330 */    87,  114,  114,  114,  114,  114,  114,  114,   95,   96,
 /*  1340 */    97,  114,  114,  100,  101,  102,  114,   79,  114,  114,
 /*  1350 */   114,   83,  114,  114,   86,   87,  114,  114,  114,  114,
 /*  1360 */   114,  114,  114,   95,   96,   97,  114,   79,  100,  101,
 /*  1370 */   102,   83,  114,  114,   86,   87,  114,  114,  114,  114,
 /*  1380 */   114,  114,  114,   95,   96,   97,  114,   79,  100,  101,
 /*  1390 */   102,   83,  114,  114,   86,   87,  114,  114,   79,  114,
 /*  1400 */   114,  114,   83,   95,   96,   97,   87,  114,  100,  101,
 /*  1410 */   102,  114,  114,  114,   95,  114,  114,  114,   79,  100,
 /*  1420 */   101,  102,   83,  114,  114,   86,   87,  114,  114,  114,
 /*  1430 */   114,  114,  114,  114,   95,   96,   97,  114,  114,  100,
 /*  1440 */   101,  102,  114,   79,  114,  114,  114,   83,  114,  114,
 /*  1450 */    86,   87,  114,  114,  114,  114,  114,  114,  114,   95,
 /*  1460 */    96,   97,  114,   79,  100,  101,  102,   83,  114,  114,
 /*  1470 */    86,   87,  114,  114,  114,  114,  114,  114,  114,   95,
 /*  1480 */    96,   97,  114,   79,  100,  101,  102,   83,  114,  114,
 /*  1490 */    86,   87,  114,  114,   79,  114,  114,  114,   83,   95,
 /*  1500 */    96,   97,   87,  114,  100,  101,  102,  114,  114,  114,
 /*  1510 */    95,  114,  114,  114,   79,  100,  101,  102,   83,  114,
 /*  1520 */   114,   86,   87,  114,  114,  114,  114,  114,  114,  114,
 /*  1530 */    95,   96,   97,  114,  114,  100,  101,  102,  114,   79,
 /*  1540 */   114,  114,  114,   83,  114,  114,   86,   87,  114,  114,
 /*  1550 */   114,  114,  114,  114,  114,   95,   96,   97,  114,   79,
 /*  1560 */   100,  101,  102,   83,  114,  114,   86,   87,  114,  114,
 /*  1570 */   114,  114,  114,  114,  114,   95,   96,   97,  114,   79,
 /*  1580 */   100,  101,  102,   83,  114,  114,   86,   87,  114,  114,
 /*  1590 */    79,  114,  114,  114,   83,   95,   96,   97,   87,  114,
 /*  1600 */   100,  101,  102,  114,  114,  114,   95,  114,  114,  114,
 /*  1610 */    79,  100,  101,  102,   83,  114,  114,   86,   87,  114,
 /*  1620 */   114,  114,  114,  114,  114,  114,   95,   96,   97,  114,
 /*  1630 */   114,  100,  101,  102,  114,   79,  114,  114,  114,   83,
 /*  1640 */   114,  114,   86,   87,  114,  114,  114,  114,  114,  114,
 /*  1650 */   114,   95,   96,   97,  114,   79,  100,  101,  102,   83,
 /*  1660 */   114,  114,   86,   87,  114,  114,  114,  114,  114,  114,
 /*  1670 */   114,   95,   96,   97,  114,   79,  100,  101,  102,   83,
 /*  1680 */   114,  114,   86,   87,  114,  114,   79,  114,  114,  114,
 /*  1690 */    83,   95,   96,   97,   87,  114,  100,  101,  102,  114,
 /*  1700 */   114,  114,   95,  114,  114,  114,   79,  100,  101,  102,
 /*  1710 */    83,  114,  114,   86,   87,  114,  114,  114,  114,  114,
 /*  1720 */   114,  114,   95,   96,   97,  114,  114,  100,  101,  102,
 /*  1730 */   114,   79,  114,  114,  114,   83,  114,  114,   86,   87,
 /*  1740 */   114,  114,  114,  114,  114,  114,  114,   95,   96,   97,
 /*  1750 */   114,   79,  100,  101,  102,   83,  114,  114,   86,   87,
 /*  1760 */   114,  114,  114,  114,  114,  114,  114,   95,   96,   97,
 /*  1770 */   114,   79,  100,  101,  102,   83,  114,  114,   86,   87,
 /*  1780 */   114,  114,   79,  114,  114,  114,   83,   95,   96,   97,
 /*  1790 */    87,  114,  100,  101,  102,  114,  114,  114,   95,  114,
 /*  1800 */   114,  114,   79,  100,  101,  102,   83,  114,  114,   86,
 /*  1810 */    87,  114,  114,  114,  114,  114,  114,  114,   95,   96,
 /*  1820 */    97,  114,  114,  100,  101,  102,  114,   79,  114,  114,
 /*  1830 */   114,   83,  114,  114,   86,   87,  114,  114,  114,  114,
 /*  1840 */   114,  114,  114,   95,   96,   97,  114,   79,  100,  101,
 /*  1850 */   102,   83,  114,  114,   86,   87,  114,  114,  114,  114,
 /*  1860 */   114,  114,  114,   95,   96,   97,  114,   79,  100,  101,
 /*  1870 */   102,   83,  114,  114,   86,   87,  114,  114,   79,  114,
 /*  1880 */   114,  114,   83,   95,   96,   97,   87,  114,  100,  101,
 /*  1890 */   102,  114,  114,  114,   95,  114,  114,  114,   79,  100,
 /*  1900 */   101,  102,   83,  114,  114,   86,   87,  114,  114,  114,
 /*  1910 */   114,  114,  114,  114,   95,   96,   97,  114,  114,  100,
 /*  1920 */   101,  102,  114,   79,  114,  114,  114,   83,  114,  114,
 /*  1930 */    86,   87,  114,  114,  114,  114,  114,  114,  114,   95,
 /*  1940 */    96,   97,  114,   79,  100,  101,  102,   83,  114,  114,
 /*  1950 */    86,   87,  114,  114,  114,  114,  114,  114,  114,   95,
 /*  1960 */    96,   97,  114,   79,  100,  101,  102,   83,  114,  114,
 /*  1970 */    86,   87,  114,   84,   85,  114,  114,  114,  114,   95,
 /*  1980 */    96,   97,  114,   94,  100,  101,  102,   98,   99,  114,
 /*  1990 */    84,   85,  114,  114,   79,  114,  114,  108,   83,  114,
 /*  2000 */    94,   86,   87,  114,   98,   99,  114,  114,  114,  114,
 /*  2010 */    95,   96,   97,  114,  108,  100,  101,  102,    6,  114,
 /*  2020 */   114,  114,  114,  114,  114,   13,  114,  114,  114,   17,
 /*  2030 */    18,  114,   84,   85,  114,   23,  114,  114,  114,   27,
 /*  2040 */   114,   29,   94,  114,   84,   85,   98,   99,  114,  114,
 /*  2050 */    84,   85,  114,  114,   94,  114,  108,  114,   98,   99,
 /*  2060 */    94,  114,  114,  114,   98,   99,  114,  114,  108,  114,
 /*  2070 */    13,  114,  114,   16,  108,  114,  114,  114,  114,   13,
 /*  2080 */   114,   24,   16,   26,   72,   73,  114,   30,  114,  114,
 /*  2090 */    24,  114,   26,  114,  114,  114,   30,
);
    const YY_SHIFT_USE_DFLT = -32;
    const YY_SHIFT_MAX = 218;
    static public $yy_shift_ofst = array(
 /*     0 */   526,  927,  831,  831,  927,  831,  799,  767,  767,  831,
 /*    10 */   959,  831,  831,  831,  831,  831,  831,  831,  831,  831,
 /*    20 */   831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
 /*    30 */   863,  831,  863,  831,  831,  831,  831,  831,  831,  831,
 /*    40 */   831,  831,  895,  895, 1023, 1023, 1023,  991, 1023, 1023,
 /*    50 */  1023,   70,   -1,  118,  118,  118,  118,  381,  477,  525,
 /*    60 */   573,  333,  166,  214,  621,  262,  429,  669,  669,  669,
 /*    70 */   669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
 /*    80 */   669,  669,  669,  669,  669,  669,  669,  706,  706,    1,
 /*    90 */   216,  263,    1, 2012, 2057, 2066,   50,  326,  326,   50,
 /*   100 */   362,  289,  373,   72,  145,  167,  195,   67,   68,   -3,
 /*   110 */    21,  186,   76,  146,   60,  395,   60,   60,  217,  199,
 /*   120 */    60,   60,  359,   60,  373,   60,   60,  373,  421,  419,
 /*   130 */   455,  455,  455,  455,  455,  455,  455,  455,  455,  -32,
 /*   140 */   302,  330,  160,  177,   60,  217,  217,  217,  217,  -31,
 /*   150 */   217,  -31,  217,  217,  217,  217,  217,  217,  217,  217,
 /*   160 */   217,  217,  217,  530,  544,  455,  530,  455,  510,  455,
 /*   170 */   510,  455,  -32,  -32,  -32,  775,  -11,  347,  119,  189,
 /*   180 */   332,  282,  351,  304,    7,  210,   90,  517,   96,  493,
 /*   190 */   487,  499,  446,  426,  470,  427,  450,  480,  503,  449,
 /*   200 */   491,  423,    2,  443,  350,  397,  483,  234,  105,  439,
 /*   210 */   464,  488,  447,  471,  479,  380,  496,   98,  380,
);
    const YY_REDUCE_USE_DFLT = -84;
    const YY_REDUCE_MAX = 174;
    static public $yy_reduce_ofst = array(
 /*     0 */    11, 1005,  258, 1051,  985, 1025, 1384, 1268, 1308, 1627,
 /*    10 */  1576, 1723, 1288, 1460, 1243, 1076, 1172, 1500, 1748, 1864,
 /*    20 */  1652, 1556, 1435, 1596, 1819, 1788, 1096, 1339, 1404, 1364,
 /*    30 */  1192, 1212, 1147, 1768, 1915, 1692, 1672, 1116, 1884, 1480,
 /*    40 */  1844, 1531,   -4, 1127, 1415, 1319, 1511, 1607, 1703, 1223,
 /*    50 */  1799, 1966, 1960, 1960, 1906, 1948, 1889,  -83,  -83,  -83,
 /*    60 */   -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,
 /*    70 */   -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,
 /*    80 */   -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  192,
 /*    90 */   227,  -36,  -23,  207,  804,  836,  346,  708,  740,  490,
 /*   100 */   394,   19,  200,  567,  114,  114,  114,  306,  540,  312,
 /*   110 */   -30,  306,  114,  114,  542,  492,  257,  300,  255,  114,
 /*   120 */   396,  348,  633,  589,  341,  737,  588,  363,  588,  588,
 /*   130 */   114,  114,  114,  114,  114,  114,  114,  205,  114,  114,
 /*   140 */   430,  430,  430,  445,  430,  434,  434,  434,  434,  428,
 /*   150 */   434,  408,  434,  434,  434,  434,  434,  434,  434,  434,
 /*   160 */   434,  434,  434,  444,  473,  283,  444,  283,  463,  283,
 /*   170 */   441,  283,  224,  201,  180,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(3, ),
        /* 1 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 2 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 3 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 4 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 5 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 6 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 58, 72, ),
        /* 7 */ array(13, 15, 16, 17, 18, 23, 27, 28, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 8 */ array(13, 15, 16, 17, 18, 23, 27, 28, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 9 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 10 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 11 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 12 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 13 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 14 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 15 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 16 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 17 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 18 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 19 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 20 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 21 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 22 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 23 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 24 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 25 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 26 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 27 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 28 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 29 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 30 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 31 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 32 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 33 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 34 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 35 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 36 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 37 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 38 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 39 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 40 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 41 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 42 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 43 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 57, 72, ),
        /* 44 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 72, ),
        /* 45 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 72, ),
        /* 46 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 72, ),
        /* 47 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 72, ),
        /* 48 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 72, ),
        /* 49 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 72, ),
        /* 50 */ array(13, 15, 16, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 56, 72, ),
        /* 51 */ array(1, 22, 24, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 52 */ array(1, 4, 24, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 53 */ array(1, 24, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 54 */ array(1, 24, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 55 */ array(1, 24, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 56 */ array(1, 24, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 57 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 58 */ array(1, 4, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 59 */ array(1, 25, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 60 */ array(1, 4, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 61 */ array(1, 19, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 62 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 63 */ array(1, 4, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 64 */ array(1, 2, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 65 */ array(1, 4, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 66 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 67 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 68 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 69 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 70 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 71 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 72 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 73 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 74 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 75 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 76 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 77 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 78 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 79 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 80 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 81 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 82 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 83 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 84 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 85 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 86 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 87 */ array(35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 88 */ array(35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, ),
        /* 89 */ array(5, 6, 7, 8, 9, 10, 13, 17, 18, 23, 27, 29, ),
        /* 90 */ array(1, 4, 24, 30, 49, ),
        /* 91 */ array(1, 4, 24, 30, 33, ),
        /* 92 */ array(5, 6, 7, 8, 9, 10, 13, 17, 18, 23, 27, 29, ),
        /* 93 */ array(6, 13, 17, 18, 23, 27, 29, 72, 73, ),
        /* 94 */ array(13, 16, 24, 26, 30, ),
        /* 95 */ array(13, 16, 24, 26, 30, ),
        /* 96 */ array(1, 4, 24, 30, ),
        /* 97 */ array(13, 16, 24, 30, ),
        /* 98 */ array(13, 16, 24, 30, ),
        /* 99 */ array(1, 4, 24, 30, ),
        /* 100 */ array(1, 24, 30, ),
        /* 101 */ array(1, 2, ),
        /* 102 */ array(15, 33, ),
        /* 103 */ array(6, 13, 17, 18, 23, 27, 29, 72, 73, ),
        /* 104 */ array(1, 4, 24, 25, 30, 49, ),
        /* 105 */ array(1, 4, 24, 30, 49, ),
        /* 106 */ array(1, 4, 24, 30, 49, ),
        /* 107 */ array(53, 56, 57, 59, ),
        /* 108 */ array(13, 14, 16, 20, ),
        /* 109 */ array(15, 16, 56, ),
        /* 110 */ array(10, 11, 12, ),
        /* 111 */ array(53, 57, 59, ),
        /* 112 */ array(1, 26, 49, ),
        /* 113 */ array(1, 4, 49, ),
        /* 114 */ array(13, 16, ),
        /* 115 */ array(13, 16, ),
        /* 116 */ array(13, 16, ),
        /* 117 */ array(13, 16, ),
        /* 118 */ array(24, 30, ),
        /* 119 */ array(1, 49, ),
        /* 120 */ array(13, 16, ),
        /* 121 */ array(13, 16, ),
        /* 122 */ array(24, 30, ),
        /* 123 */ array(13, 16, ),
        /* 124 */ array(15, 33, ),
        /* 125 */ array(13, 16, ),
        /* 126 */ array(13, 16, ),
        /* 127 */ array(15, 33, ),
        /* 128 */ array(13, 16, ),
        /* 129 */ array(13, 16, ),
        /* 130 */ array(1, ),
        /* 131 */ array(1, ),
        /* 132 */ array(1, ),
        /* 133 */ array(1, ),
        /* 134 */ array(1, ),
        /* 135 */ array(1, ),
        /* 136 */ array(1, ),
        /* 137 */ array(1, ),
        /* 138 */ array(1, ),
        /* 139 */ array(),
        /* 140 */ array(13, 16, 55, ),
        /* 141 */ array(13, 16, 55, ),
        /* 142 */ array(13, 14, 16, ),
        /* 143 */ array(13, 15, 16, ),
        /* 144 */ array(13, 16, ),
        /* 145 */ array(24, 30, ),
        /* 146 */ array(24, 30, ),
        /* 147 */ array(24, 30, ),
        /* 148 */ array(24, 30, ),
        /* 149 */ array(53, 57, ),
        /* 150 */ array(24, 30, ),
        /* 151 */ array(53, 57, ),
        /* 152 */ array(24, 30, ),
        /* 153 */ array(24, 30, ),
        /* 154 */ array(24, 30, ),
        /* 155 */ array(24, 30, ),
        /* 156 */ array(24, 30, ),
        /* 157 */ array(24, 30, ),
        /* 158 */ array(24, 30, ),
        /* 159 */ array(24, 30, ),
        /* 160 */ array(24, 30, ),
        /* 161 */ array(24, 30, ),
        /* 162 */ array(24, 30, ),
        /* 163 */ array(2, ),
        /* 164 */ array(11, ),
        /* 165 */ array(1, ),
        /* 166 */ array(2, ),
        /* 167 */ array(1, ),
        /* 168 */ array(24, ),
        /* 169 */ array(1, ),
        /* 170 */ array(24, ),
        /* 171 */ array(1, ),
        /* 172 */ array(),
        /* 173 */ array(),
        /* 174 */ array(),
        /* 175 */ array(4, 14, 24, 30, 33, ),
        /* 176 */ array(13, 15, 16, 31, ),
        /* 177 */ array(4, 14, 20, ),
        /* 178 */ array(33, 53, 58, ),
        /* 179 */ array(32, 34, ),
        /* 180 */ array(16, 55, ),
        /* 181 */ array(32, 34, ),
        /* 182 */ array(13, 33, ),
        /* 183 */ array(32, 34, ),
        /* 184 */ array(14, 20, ),
        /* 185 */ array(32, 58, ),
        /* 186 */ array(14, 53, ),
        /* 187 */ array(19, 32, ),
        /* 188 */ array(26, 33, ),
        /* 189 */ array(16, ),
        /* 190 */ array(21, ),
        /* 191 */ array(4, ),
        /* 192 */ array(15, ),
        /* 193 */ array(34, ),
        /* 194 */ array(14, ),
        /* 195 */ array(58, ),
        /* 196 */ array(33, ),
        /* 197 */ array(2, ),
        /* 198 */ array(4, ),
        /* 199 */ array(56, ),
        /* 200 */ array(15, ),
        /* 201 */ array(16, ),
        /* 202 */ array(15, ),
        /* 203 */ array(14, ),
        /* 204 */ array(16, ),
        /* 205 */ array(15, ),
        /* 206 */ array(50, ),
        /* 207 */ array(4, ),
        /* 208 */ array(16, ),
        /* 209 */ array(20, ),
        /* 210 */ array(16, ),
        /* 211 */ array(16, ),
        /* 212 */ array(15, ),
        /* 213 */ array(16, ),
        /* 214 */ array(31, ),
        /* 215 */ array(33, ),
        /* 216 */ array(31, ),
        /* 217 */ array(53, ),
        /* 218 */ array(33, ),
        /* 219 */ array(),
        /* 220 */ array(),
        /* 221 */ array(),
        /* 222 */ array(),
        /* 223 */ array(),
        /* 224 */ array(),
        /* 225 */ array(),
        /* 226 */ array(),
        /* 227 */ array(),
        /* 228 */ array(),
        /* 229 */ array(),
        /* 230 */ array(),
        /* 231 */ array(),
        /* 232 */ array(),
        /* 233 */ array(),
        /* 234 */ array(),
        /* 235 */ array(),
        /* 236 */ array(),
        /* 237 */ array(),
        /* 238 */ array(),
        /* 239 */ array(),
        /* 240 */ array(),
        /* 241 */ array(),
        /* 242 */ array(),
        /* 243 */ array(),
        /* 244 */ array(),
        /* 245 */ array(),
        /* 246 */ array(),
        /* 247 */ array(),
        /* 248 */ array(),
        /* 249 */ array(),
        /* 250 */ array(),
        /* 251 */ array(),
        /* 252 */ array(),
        /* 253 */ array(),
        /* 254 */ array(),
        /* 255 */ array(),
        /* 256 */ array(),
        /* 257 */ array(),
        /* 258 */ array(),
        /* 259 */ array(),
        /* 260 */ array(),
        /* 261 */ array(),
        /* 262 */ array(),
        /* 263 */ array(),
        /* 264 */ array(),
        /* 265 */ array(),
        /* 266 */ array(),
        /* 267 */ array(),
        /* 268 */ array(),
        /* 269 */ array(),
        /* 270 */ array(),
        /* 271 */ array(),
        /* 272 */ array(),
        /* 273 */ array(),
        /* 274 */ array(),
        /* 275 */ array(),
        /* 276 */ array(),
        /* 277 */ array(),
        /* 278 */ array(),
        /* 279 */ array(),
        /* 280 */ array(),
        /* 281 */ array(),
        /* 282 */ array(),
        /* 283 */ array(),
        /* 284 */ array(),
        /* 285 */ array(),
        /* 286 */ array(),
        /* 287 */ array(),
        /* 288 */ array(),
        /* 289 */ array(),
        /* 290 */ array(),
        /* 291 */ array(),
        /* 292 */ array(),
        /* 293 */ array(),
        /* 294 */ array(),
        /* 295 */ array(),
        /* 296 */ array(),
        /* 297 */ array(),
        /* 298 */ array(),
        /* 299 */ array(),
        /* 300 */ array(),
        /* 301 */ array(),
        /* 302 */ array(),
        /* 303 */ array(),
        /* 304 */ array(),
        /* 305 */ array(),
        /* 306 */ array(),
        /* 307 */ array(),
        /* 308 */ array(),
);
    static public $yy_default = array(
 /*     0 */   311,  470,  446,  446,  485,  446,  485,  485,  485,  485,
 /*    10 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*    20 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*    30 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*    40 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*    50 */   485,  359,  485,  359,  359,  335,  340,  485,  485,  364,
 /*    60 */   485,  485,  485,  485,  485,  485,  485,  392,  445,  364,
 /*    70 */   370,  361,  471,  333,  444,  369,  387,  384,  382,  366,
 /*    80 */   473,  391,  472,  379,  383,  388,  343,  396,  395,  314,
 /*    90 */   372,  406,  309,  485,  359,  359,  378,  359,  359,  412,
 /*   100 */   359,  352,  485,  485,  372,  372,  372,  485,  485,  485,
 /*   110 */   485,  413,  372,  372,  485,  485,  485,  485,  359,  372,
 /*   120 */   485,  485,  359,  485,  485,  485,  485,  485,  485,  485,
 /*   130 */   381,  394,  375,  399,  376,  374,  398,  355,  400,  453,
 /*   140 */   414,  424,  485,  485,  437,  351,  349,  348,  341,  418,
 /*   150 */   347,  417,  345,  339,  329,  350,  332,  342,  337,  330,
 /*   160 */   346,  336,  331,  447,  325,  356,  448,  353,  484,  378,
 /*   170 */   484,  412,  452,  452,  452,  406,  485,  397,  406,  485,
 /*   180 */   485,  485,  436,  485,  397,  485,  402,  485,  406,  485,
 /*   190 */   367,  485,  485,  485,  485,  485,  434,  434,  485,  485,
 /*   200 */   485,  485,  485,  434,  485,  485,  408,  485,  485,  397,
 /*   210 */   485,  485,  485,  485,  485,  406,  404,  402,  393,  432,
 /*   220 */   416,  360,  322,  454,  324,  420,  426,  344,  323,  380,
 /*   230 */   449,  450,  425,  422,  427,  435,  415,  315,  316,  373,
 /*   240 */   317,  407,  313,  310,  312,  403,  405,  318,  409,  321,
 /*   250 */   419,  401,  368,  411,  320,  371,  410,  319,  483,  408,
 /*   260 */   469,  468,  465,  467,  466,  464,  463,  460,  439,  461,
 /*   270 */   462,  377,  477,  480,  474,  354,  479,  475,  476,  482,
 /*   280 */   481,  358,  478,  357,  459,  428,  431,  421,  434,  440,
 /*   290 */   429,  386,  451,  423,  430,  385,  438,  326,  456,  457,
 /*   300 */   458,  442,  455,  433,  327,  443,  389,  390,  441,
);
    const YYNOCODE = 115;
    const YYSTACKDEPTH = 500;
    const YYNSTATE = 309;
    const YYNRULE = 176;
    const YYERRORSYMBOL = 74;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    public static $yyFallback = array(
    );

    public $yyTraceFILE;
    public $yyTracePrompt;
    public $yyidx;                    /* Index of top element in stack */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    public $yystack = array();  /* The parser's stack */

    public $yyTokenName = array(
  '$',             'VERT',          'COLON',         'SETSTRICT',   
  'RDEL',          'COMMENT',       'TEXT',          'STRIPON',     
  'STRIPOFF',      'BLOCKSOURCE',   'LITERALSTART',  'LITERALEND',  
  'LITERAL',       'LDEL',          'EQUAL',         'DOLLAR',      
  'ID',            'LDELIF',        'LDELFOR',       'SEMICOLON',   
  'INCDEC',        'TO',            'STEP',          'LDELFOREACH', 
  'SPACE',         'AS',            'APTR',          'LDELSETFILTER',
  'SMARTYBLOCKCHILDPARENT',  'LDELSLASH',     'ATTR',          'INTEGER',     
  'COMMA',         'OPENP',         'CLOSEP',        'MATH',        
  'UNIMATH',       'ANDSYM',        'ISIN',          'ISDIVBY',     
  'ISNOTDIVBY',    'ISEVEN',        'ISNOTEVEN',     'ISEVENBY',    
  'ISNOTEVENBY',   'ISODD',         'ISNOTODD',      'ISODDBY',     
  'ISNOTODDBY',    'INSTANCEOF',    'QMARK',         'NOT',         
  'TYPECAST',      'DOT',           'SINGLEQUOTESTRING',  'AT',          
  'HATCH',         'OPENB',         'CLOSEB',        'PTR',         
  'EQUALS',        'NOTEQUALS',     'GREATERTHAN',   'LESSTHAN',    
  'GREATEREQUAL',  'LESSEQUAL',     'IDENTITY',      'NONEIDENTITY',
  'MOD',           'LAND',          'LOR',           'LXOR',        
  'QUOTE',         'DOLLARID',      'error',         'start',       
  'strictmode',    'template',      'template_element',  'smartytag',   
  'literal',       'literal_elements',  'literal_element',  'value',       
  'modifierlist',  'attributes',    'expr',          'variable',    
  'statements',    'optspace',      'varvar',        'foraction',   
  'statement',     'modparameters',  'attribute',     'variablebase',
  'ternary',       'array',         'ifcond',        'lop',         
  'function',      'doublequoted_with_quotes',  'variableinternal',  'indexdef',    
  'objectelement',  'varvarele',     'method',        'params',      
  'modifier',      'modparameter',  'arrayelements',  'arrayelement',
  'doublequoted',  'doublequotedcontent',
    );

    public static $yyRuleName = array(
 /*   0 */ "start ::= strictmode template",
 /*   1 */ "strictmode ::= SETSTRICT",
 /*   2 */ "strictmode ::=",
 /*   3 */ "template ::= template_element",
 /*   4 */ "template ::= template template_element",
 /*   5 */ "template ::=",
 /*   6 */ "template_element ::= smartytag RDEL",
 /*   7 */ "template_element ::= COMMENT",
 /*   8 */ "template_element ::= literal",
 /*   9 */ "template_element ::= TEXT",
 /*  10 */ "template_element ::= STRIPON",
 /*  11 */ "template_element ::= STRIPOFF",
 /*  12 */ "template_element ::= BLOCKSOURCE",
 /*  13 */ "literal ::= LITERALSTART LITERALEND",
 /*  14 */ "literal ::= LITERALSTART literal_elements LITERALEND",
 /*  15 */ "literal_elements ::= literal_elements literal_element",
 /*  16 */ "literal_elements ::=",
 /*  17 */ "literal_element ::= literal",
 /*  18 */ "literal_element ::= LITERAL",
 /*  19 */ "smartytag ::= LDEL value",
 /*  20 */ "smartytag ::= LDEL value modifierlist attributes",
 /*  21 */ "smartytag ::= LDEL value attributes",
 /*  22 */ "smartytag ::= LDEL expr modifierlist attributes",
 /*  23 */ "smartytag ::= LDEL expr attributes",
 /*  24 */ "smartytag ::= LDEL variable EQUAL expr",
 /*  25 */ "smartytag ::= LDEL DOLLAR ID EQUAL value",
 /*  26 */ "smartytag ::= LDEL DOLLAR ID EQUAL expr",
 /*  27 */ "smartytag ::= LDEL DOLLAR ID EQUAL expr attributes",
 /*  28 */ "smartytag ::= LDEL ID attributes",
 /*  29 */ "smartytag ::= LDEL ID",
 /*  30 */ "smartytag ::= LDEL ID modifierlist attributes",
 /*  31 */ "smartytag ::= LDELIF expr",
 /*  32 */ "smartytag ::= LDELIF expr attributes",
 /*  33 */ "smartytag ::= LDELFOR statements SEMICOLON optspace expr SEMICOLON optspace DOLLAR varvar foraction attributes",
 /*  34 */ "foraction ::= EQUAL expr",
 /*  35 */ "foraction ::= INCDEC",
 /*  36 */ "smartytag ::= LDELFOR statement TO expr attributes",
 /*  37 */ "smartytag ::= LDELFOR statement TO expr STEP expr attributes",
 /*  38 */ "smartytag ::= LDELFOREACH attributes",
 /*  39 */ "smartytag ::= LDELFOREACH SPACE value AS DOLLAR varvar attributes",
 /*  40 */ "smartytag ::= LDELFOREACH SPACE value AS DOLLAR varvar APTR DOLLAR varvar attributes",
 /*  41 */ "smartytag ::= LDELFOREACH SPACE expr AS DOLLAR varvar attributes",
 /*  42 */ "smartytag ::= LDELFOREACH SPACE expr AS DOLLAR varvar APTR DOLLAR varvar attributes",
 /*  43 */ "smartytag ::= LDELSETFILTER ID modparameters",
 /*  44 */ "smartytag ::= LDELSETFILTER ID modparameters modifierlist",
 /*  45 */ "smartytag ::= LDEL SMARTYBLOCKCHILDPARENT",
 /*  46 */ "smartytag ::= LDELSLASH ID",
 /*  47 */ "smartytag ::= LDELSLASH ID modifierlist",
 /*  48 */ "attributes ::= attributes attribute",
 /*  49 */ "attributes ::= attribute",
 /*  50 */ "attributes ::=",
 /*  51 */ "attribute ::= SPACE ID EQUAL ID",
 /*  52 */ "attribute ::= ATTR expr",
 /*  53 */ "attribute ::= ATTR value",
 /*  54 */ "attribute ::= SPACE ID",
 /*  55 */ "attribute ::= SPACE expr",
 /*  56 */ "attribute ::= SPACE value",
 /*  57 */ "attribute ::= SPACE INTEGER EQUAL expr",
 /*  58 */ "statements ::= statement",
 /*  59 */ "statements ::= statements COMMA statement",
 /*  60 */ "statement ::= DOLLAR varvar EQUAL expr",
 /*  61 */ "statement ::= variablebase EQUAL expr",
 /*  62 */ "statement ::= OPENP statement CLOSEP",
 /*  63 */ "expr ::= value",
 /*  64 */ "expr ::= ternary",
 /*  65 */ "expr ::= expr MATH value",
 /*  66 */ "expr ::= expr UNIMATH value",
 /*  67 */ "expr ::= expr ANDSYM value",
 /*  68 */ "expr ::= array",
 /*  69 */ "expr ::= expr modifierlist",
 /*  70 */ "expr ::= expr ifcond expr",
 /*  71 */ "expr ::= expr ISIN array",
 /*  72 */ "expr ::= expr ISIN value",
 /*  73 */ "expr ::= expr lop expr",
 /*  74 */ "expr ::= expr ISDIVBY expr",
 /*  75 */ "expr ::= expr ISNOTDIVBY expr",
 /*  76 */ "expr ::= expr ISEVEN",
 /*  77 */ "expr ::= expr ISNOTEVEN",
 /*  78 */ "expr ::= expr ISEVENBY expr",
 /*  79 */ "expr ::= expr ISNOTEVENBY expr",
 /*  80 */ "expr ::= expr ISODD",
 /*  81 */ "expr ::= expr ISNOTODD",
 /*  82 */ "expr ::= expr ISODDBY expr",
 /*  83 */ "expr ::= expr ISNOTODDBY expr",
 /*  84 */ "expr ::= value INSTANCEOF ID",
 /*  85 */ "expr ::= value INSTANCEOF value",
 /*  86 */ "ternary ::= OPENP expr CLOSEP QMARK DOLLAR ID COLON expr",
 /*  87 */ "ternary ::= OPENP expr CLOSEP QMARK expr COLON expr",
 /*  88 */ "value ::= variable",
 /*  89 */ "value ::= UNIMATH value",
 /*  90 */ "value ::= NOT value",
 /*  91 */ "value ::= TYPECAST value",
 /*  92 */ "value ::= variable INCDEC",
 /*  93 */ "value ::= INTEGER",
 /*  94 */ "value ::= INTEGER DOT INTEGER",
 /*  95 */ "value ::= INTEGER DOT",
 /*  96 */ "value ::= DOT INTEGER",
 /*  97 */ "value ::= ID",
 /*  98 */ "value ::= function",
 /*  99 */ "value ::= OPENP expr CLOSEP",
 /* 100 */ "value ::= SINGLEQUOTESTRING",
 /* 101 */ "value ::= doublequoted_with_quotes",
 /* 102 */ "value ::= smartytag RDEL",
 /* 103 */ "value ::= value modifierlist",
 /* 104 */ "variable ::= variableinternal",
 /* 105 */ "variablebase ::= DOLLAR varvar",
 /* 106 */ "variableinternal ::= variableinternal indexdef",
 /* 107 */ "variableinternal ::= variablebase indexdef indexdef",
 /* 108 */ "variableinternal ::= variablebase indexdef",
 /* 109 */ "variableinternal ::= variablebase",
 /* 110 */ "variableinternal ::= variableinternal objectelement",
 /* 111 */ "variableinternal ::= DOLLAR varvar AT ID",
 /* 112 */ "variableinternal ::= HATCH ID HATCH",
 /* 113 */ "variableinternal ::= HATCH variableinternal HATCH",
 /* 114 */ "indexdef ::= OPENB CLOSEB",
 /* 115 */ "indexdef ::= DOT DOLLAR varvar",
 /* 116 */ "indexdef ::= DOT DOLLAR varvar AT ID",
 /* 117 */ "indexdef ::= DOT ID",
 /* 118 */ "indexdef ::= DOT INTEGER",
 /* 119 */ "indexdef ::= DOT LDEL expr RDEL",
 /* 120 */ "indexdef ::= OPENB ID CLOSEB",
 /* 121 */ "indexdef ::= OPENB ID DOT ID CLOSEB",
 /* 122 */ "indexdef ::= OPENB expr CLOSEB",
 /* 123 */ "varvar ::= varvarele",
 /* 124 */ "varvar ::= varvar varvarele",
 /* 125 */ "varvarele ::= ID",
 /* 126 */ "varvarele ::= LDEL expr RDEL",
 /* 127 */ "objectelement ::= PTR ID",
 /* 128 */ "objectelement ::= PTR DOLLAR varvar",
 /* 129 */ "objectelement ::= PTR LDEL expr RDEL",
 /* 130 */ "objectelement ::= PTR ID LDEL expr RDEL",
 /* 131 */ "objectelement ::= PTR method",
 /* 132 */ "function ::= ID OPENP params CLOSEP",
 /* 133 */ "method ::= ID OPENP params CLOSEP",
 /* 134 */ "method ::= DOLLAR ID OPENP params CLOSEP",
 /* 135 */ "params ::= params COMMA expr",
 /* 136 */ "params ::= expr",
 /* 137 */ "params ::=",
 /* 138 */ "modifierlist ::= modifierlist modifier modparameters",
 /* 139 */ "modifierlist ::= modifier modparameters",
 /* 140 */ "modifier ::= VERT AT ID",
 /* 141 */ "modifier ::= VERT ID",
 /* 142 */ "modparameters ::= modparameters modparameter",
 /* 143 */ "modparameters ::=",
 /* 144 */ "modparameter ::= COLON value",
 /* 145 */ "modparameter ::= COLON array",
 /* 146 */ "ifcond ::= EQUALS",
 /* 147 */ "ifcond ::= NOTEQUALS",
 /* 148 */ "ifcond ::= GREATERTHAN",
 /* 149 */ "ifcond ::= LESSTHAN",
 /* 150 */ "ifcond ::= GREATEREQUAL",
 /* 151 */ "ifcond ::= LESSEQUAL",
 /* 152 */ "ifcond ::= IDENTITY",
 /* 153 */ "ifcond ::= NONEIDENTITY",
 /* 154 */ "ifcond ::= MOD",
 /* 155 */ "lop ::= LAND",
 /* 156 */ "lop ::= LOR",
 /* 157 */ "lop ::= LXOR",
 /* 158 */ "array ::= OPENB arrayelements CLOSEB",
 /* 159 */ "arrayelements ::= arrayelement",
 /* 160 */ "arrayelements ::= arrayelements COMMA arrayelement",
 /* 161 */ "arrayelements ::=",
 /* 162 */ "arrayelement ::= value APTR expr",
 /* 163 */ "arrayelement ::= ID APTR expr",
 /* 164 */ "arrayelement ::= expr",
 /* 165 */ "doublequoted_with_quotes ::= QUOTE QUOTE",
 /* 166 */ "doublequoted_with_quotes ::= QUOTE doublequoted QUOTE",
 /* 167 */ "doublequoted ::= doublequoted doublequotedcontent",
 /* 168 */ "doublequoted ::= doublequotedcontent",
 /* 169 */ "doublequotedcontent ::= DOLLARID",
 /* 170 */ "doublequotedcontent ::= LDEL variable RDEL",
 /* 171 */ "doublequotedcontent ::= LDEL expr RDEL",
 /* 172 */ "doublequotedcontent ::= smartytag RDEL",
 /* 173 */ "doublequotedcontent ::= TEXT",
 /* 174 */ "optspace ::= SPACE",
 /* 175 */ "optspace ::=",
    );

    public function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count($this->yyTokenName)) {
            return $this->yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    public static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    public function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        if ($this->yyTraceFILE && $this->yyidx >= 0) {
            fwrite($this->yyTraceFILE,
                $this->yyTracePrompt . 'Popping ' . $this->yyTokenName[$yytos->major] .
                    "\n");
        }
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;

        return $yymajor;
    }

    public function __destruct()
    {
        while ($this->yystack !== Array()) {
            $this->yy_pop_parser_stack();
        }
        if (is_resource($this->yyTraceFILE)) {
            fclose($this->yyTraceFILE);
        }
    }

    public function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                $expected = array_merge($expected, self::$yyExpectedTokens[$nextstate]);
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;

                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new TP_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
    $this->yyidx = $yyidx;
    $this->yystack = $stack;

        return array_unique($expected);
    }

    public function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;

                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new TP_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token && $token !== '0') {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;

        return true;
    }

   public function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;

        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
                if ($this->yyTraceFILE) {
                    fwrite($this->yyTraceFILE, $this->yyTracePrompt . "FALLBACK " .
                        $this->yyTokenName[$iLookAhead] . " => " .
                        $this->yyTokenName[$iFallback] . "\n");
                }

                return $this->yy_find_shift_action($iFallback);
            }

            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    public function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    public function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            if ($this->yyTraceFILE) {
                fprintf($this->yyTraceFILE, "%sStack Overflow!\n", $this->yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
#line 130 "smarty_internal_templateparser.y"

    $this->internalError = true;
    $this->compiler->trigger_template_error("Stack overflow in template parser");
#line 1601 "smarty_internal_templateparser.php"

            return;
        }
        $yytos = new TP_yyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
        if ($this->yyTraceFILE && $this->yyidx > 0) {
            fprintf($this->yyTraceFILE, "%sShift %d\n", $this->yyTracePrompt,
                $yyNewState);
            fprintf($this->yyTraceFILE, "%sStack:", $this->yyTracePrompt);
            for ($i = 1; $i <= $this->yyidx; $i++) {
                fprintf($this->yyTraceFILE, " %s",
                    $this->yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite($this->yyTraceFILE,"\n");
        }
    }

    public static $yyRuleInfo = array(
  array( 'lhs' => 75, 'rhs' => 2 ),
  array( 'lhs' => 76, 'rhs' => 1 ),
  array( 'lhs' => 76, 'rhs' => 0 ),
  array( 'lhs' => 77, 'rhs' => 1 ),
  array( 'lhs' => 77, 'rhs' => 2 ),
  array( 'lhs' => 77, 'rhs' => 0 ),
  array( 'lhs' => 78, 'rhs' => 2 ),
  array( 'lhs' => 78, 'rhs' => 1 ),
  array( 'lhs' => 78, 'rhs' => 1 ),
  array( 'lhs' => 78, 'rhs' => 1 ),
  array( 'lhs' => 78, 'rhs' => 1 ),
  array( 'lhs' => 78, 'rhs' => 1 ),
  array( 'lhs' => 78, 'rhs' => 1 ),
  array( 'lhs' => 80, 'rhs' => 2 ),
  array( 'lhs' => 80, 'rhs' => 3 ),
  array( 'lhs' => 81, 'rhs' => 2 ),
  array( 'lhs' => 81, 'rhs' => 0 ),
  array( 'lhs' => 82, 'rhs' => 1 ),
  array( 'lhs' => 82, 'rhs' => 1 ),
  array( 'lhs' => 79, 'rhs' => 2 ),
  array( 'lhs' => 79, 'rhs' => 4 ),
  array( 'lhs' => 79, 'rhs' => 3 ),
  array( 'lhs' => 79, 'rhs' => 4 ),
  array( 'lhs' => 79, 'rhs' => 3 ),
  array( 'lhs' => 79, 'rhs' => 4 ),
  array( 'lhs' => 79, 'rhs' => 5 ),
  array( 'lhs' => 79, 'rhs' => 5 ),
  array( 'lhs' => 79, 'rhs' => 6 ),
  array( 'lhs' => 79, 'rhs' => 3 ),
  array( 'lhs' => 79, 'rhs' => 2 ),
  array( 'lhs' => 79, 'rhs' => 4 ),
  array( 'lhs' => 79, 'rhs' => 2 ),
  array( 'lhs' => 79, 'rhs' => 3 ),
  array( 'lhs' => 79, 'rhs' => 11 ),
  array( 'lhs' => 91, 'rhs' => 2 ),
  array( 'lhs' => 91, 'rhs' => 1 ),
  array( 'lhs' => 79, 'rhs' => 5 ),
  array( 'lhs' => 79, 'rhs' => 7 ),
  array( 'lhs' => 79, 'rhs' => 2 ),
  array( 'lhs' => 79, 'rhs' => 7 ),
  array( 'lhs' => 79, 'rhs' => 10 ),
  array( 'lhs' => 79, 'rhs' => 7 ),
  array( 'lhs' => 79, 'rhs' => 10 ),
  array( 'lhs' => 79, 'rhs' => 3 ),
  array( 'lhs' => 79, 'rhs' => 4 ),
  array( 'lhs' => 79, 'rhs' => 2 ),
  array( 'lhs' => 79, 'rhs' => 2 ),
  array( 'lhs' => 79, 'rhs' => 3 ),
  array( 'lhs' => 85, 'rhs' => 2 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 0 ),
  array( 'lhs' => 94, 'rhs' => 4 ),
  array( 'lhs' => 94, 'rhs' => 2 ),
  array( 'lhs' => 94, 'rhs' => 2 ),
  array( 'lhs' => 94, 'rhs' => 2 ),
  array( 'lhs' => 94, 'rhs' => 2 ),
  array( 'lhs' => 94, 'rhs' => 2 ),
  array( 'lhs' => 94, 'rhs' => 4 ),
  array( 'lhs' => 88, 'rhs' => 1 ),
  array( 'lhs' => 88, 'rhs' => 3 ),
  array( 'lhs' => 92, 'rhs' => 4 ),
  array( 'lhs' => 92, 'rhs' => 3 ),
  array( 'lhs' => 92, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 1 ),
  array( 'lhs' => 86, 'rhs' => 1 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 1 ),
  array( 'lhs' => 86, 'rhs' => 2 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 2 ),
  array( 'lhs' => 86, 'rhs' => 2 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 2 ),
  array( 'lhs' => 86, 'rhs' => 2 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 96, 'rhs' => 8 ),
  array( 'lhs' => 96, 'rhs' => 7 ),
  array( 'lhs' => 83, 'rhs' => 1 ),
  array( 'lhs' => 83, 'rhs' => 2 ),
  array( 'lhs' => 83, 'rhs' => 2 ),
  array( 'lhs' => 83, 'rhs' => 2 ),
  array( 'lhs' => 83, 'rhs' => 2 ),
  array( 'lhs' => 83, 'rhs' => 1 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 2 ),
  array( 'lhs' => 83, 'rhs' => 2 ),
  array( 'lhs' => 83, 'rhs' => 1 ),
  array( 'lhs' => 83, 'rhs' => 1 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 1 ),
  array( 'lhs' => 83, 'rhs' => 1 ),
  array( 'lhs' => 83, 'rhs' => 2 ),
  array( 'lhs' => 83, 'rhs' => 2 ),
  array( 'lhs' => 87, 'rhs' => 1 ),
  array( 'lhs' => 95, 'rhs' => 2 ),
  array( 'lhs' => 102, 'rhs' => 2 ),
  array( 'lhs' => 102, 'rhs' => 3 ),
  array( 'lhs' => 102, 'rhs' => 2 ),
  array( 'lhs' => 102, 'rhs' => 1 ),
  array( 'lhs' => 102, 'rhs' => 2 ),
  array( 'lhs' => 102, 'rhs' => 4 ),
  array( 'lhs' => 102, 'rhs' => 3 ),
  array( 'lhs' => 102, 'rhs' => 3 ),
  array( 'lhs' => 103, 'rhs' => 2 ),
  array( 'lhs' => 103, 'rhs' => 3 ),
  array( 'lhs' => 103, 'rhs' => 5 ),
  array( 'lhs' => 103, 'rhs' => 2 ),
  array( 'lhs' => 103, 'rhs' => 2 ),
  array( 'lhs' => 103, 'rhs' => 4 ),
  array( 'lhs' => 103, 'rhs' => 3 ),
  array( 'lhs' => 103, 'rhs' => 5 ),
  array( 'lhs' => 103, 'rhs' => 3 ),
  array( 'lhs' => 90, 'rhs' => 1 ),
  array( 'lhs' => 90, 'rhs' => 2 ),
  array( 'lhs' => 105, 'rhs' => 1 ),
  array( 'lhs' => 105, 'rhs' => 3 ),
  array( 'lhs' => 104, 'rhs' => 2 ),
  array( 'lhs' => 104, 'rhs' => 3 ),
  array( 'lhs' => 104, 'rhs' => 4 ),
  array( 'lhs' => 104, 'rhs' => 5 ),
  array( 'lhs' => 104, 'rhs' => 2 ),
  array( 'lhs' => 100, 'rhs' => 4 ),
  array( 'lhs' => 106, 'rhs' => 4 ),
  array( 'lhs' => 106, 'rhs' => 5 ),
  array( 'lhs' => 107, 'rhs' => 3 ),
  array( 'lhs' => 107, 'rhs' => 1 ),
  array( 'lhs' => 107, 'rhs' => 0 ),
  array( 'lhs' => 84, 'rhs' => 3 ),
  array( 'lhs' => 84, 'rhs' => 2 ),
  array( 'lhs' => 108, 'rhs' => 3 ),
  array( 'lhs' => 108, 'rhs' => 2 ),
  array( 'lhs' => 93, 'rhs' => 2 ),
  array( 'lhs' => 93, 'rhs' => 0 ),
  array( 'lhs' => 109, 'rhs' => 2 ),
  array( 'lhs' => 109, 'rhs' => 2 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 99, 'rhs' => 1 ),
  array( 'lhs' => 99, 'rhs' => 1 ),
  array( 'lhs' => 99, 'rhs' => 1 ),
  array( 'lhs' => 97, 'rhs' => 3 ),
  array( 'lhs' => 110, 'rhs' => 1 ),
  array( 'lhs' => 110, 'rhs' => 3 ),
  array( 'lhs' => 110, 'rhs' => 0 ),
  array( 'lhs' => 111, 'rhs' => 3 ),
  array( 'lhs' => 111, 'rhs' => 3 ),
  array( 'lhs' => 111, 'rhs' => 1 ),
  array( 'lhs' => 101, 'rhs' => 2 ),
  array( 'lhs' => 101, 'rhs' => 3 ),
  array( 'lhs' => 112, 'rhs' => 2 ),
  array( 'lhs' => 112, 'rhs' => 1 ),
  array( 'lhs' => 113, 'rhs' => 1 ),
  array( 'lhs' => 113, 'rhs' => 3 ),
  array( 'lhs' => 113, 'rhs' => 3 ),
  array( 'lhs' => 113, 'rhs' => 2 ),
  array( 'lhs' => 113, 'rhs' => 1 ),
  array( 'lhs' => 89, 'rhs' => 1 ),
  array( 'lhs' => 89, 'rhs' => 0 ),
    );

    public static $yyReduceMap = array(
        0 => 0,
        1 => 1,
        2 => 2,
        13 => 2,
        16 => 2,
        175 => 2,
        3 => 3,
        4 => 3,
        6 => 6,
        7 => 7,
        8 => 8,
        9 => 9,
        10 => 10,
        11 => 11,
        12 => 12,
        14 => 14,
        62 => 14,
        122 => 14,
        15 => 15,
        91 => 15,
        92 => 15,
        110 => 15,
        17 => 17,
        18 => 17,
        35 => 17,
        55 => 17,
        56 => 17,
        63 => 17,
        64 => 17,
        68 => 17,
        88 => 17,
        98 => 17,
        104 => 17,
        105 => 17,
        118 => 17,
        123 => 17,
        159 => 17,
        164 => 17,
        174 => 17,
        19 => 19,
        20 => 20,
        22 => 20,
        21 => 21,
        23 => 21,
        24 => 24,
        25 => 25,
        26 => 25,
        27 => 27,
        28 => 28,
        29 => 29,
        30 => 30,
        31 => 31,
        32 => 32,
        33 => 33,
        34 => 34,
        36 => 36,
        37 => 37,
        38 => 38,
        39 => 39,
        41 => 39,
        40 => 40,
        42 => 40,
        43 => 43,
        44 => 44,
        45 => 45,
        46 => 46,
        47 => 47,
        48 => 48,
        49 => 49,
        58 => 49,
        136 => 49,
        144 => 49,
        145 => 49,
        50 => 50,
        137 => 50,
        143 => 50,
        51 => 51,
        52 => 52,
        53 => 52,
        54 => 54,
        57 => 57,
        59 => 59,
        60 => 60,
        61 => 61,
        65 => 65,
        66 => 65,
        67 => 65,
        69 => 69,
        103 => 69,
        70 => 70,
        73 => 70,
        71 => 71,
        72 => 72,
        74 => 74,
        75 => 75,
        76 => 76,
        77 => 77,
        78 => 78,
        79 => 79,
        80 => 80,
        81 => 81,
        82 => 82,
        83 => 83,
        84 => 84,
        85 => 85,
        86 => 86,
        87 => 87,
        89 => 89,
        90 => 90,
        93 => 93,
        100 => 93,
        101 => 93,
        94 => 94,
        95 => 95,
        96 => 96,
        97 => 97,
        99 => 99,
        102 => 102,
        106 => 106,
        107 => 107,
        108 => 108,
        109 => 109,
        111 => 111,
        112 => 112,
        113 => 113,
        114 => 114,
        115 => 115,
        116 => 116,
        117 => 117,
        119 => 119,
        120 => 120,
        121 => 121,
        124 => 124,
        125 => 125,
        126 => 126,
        127 => 127,
        128 => 128,
        129 => 129,
        130 => 130,
        131 => 131,
        132 => 132,
        133 => 133,
        134 => 134,
        135 => 135,
        138 => 138,
        139 => 139,
        140 => 140,
        141 => 141,
        142 => 142,
        146 => 146,
        147 => 147,
        148 => 148,
        149 => 149,
        150 => 150,
        151 => 151,
        152 => 152,
        153 => 153,
        154 => 154,
        155 => 155,
        156 => 156,
        157 => 157,
        158 => 158,
        160 => 160,
        161 => 161,
        162 => 162,
        163 => 163,
        165 => 165,
        166 => 166,
        167 => 167,
        168 => 168,
        169 => 169,
        170 => 170,
        171 => 171,
        172 => 172,
        173 => 173,
    );
#line 139 "smarty_internal_templateparser.y"
    function yy_r0(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor . $this->root_buffer->to_smarty_php();
    }
#line 1982 "smarty_internal_templateparser.php"
#line 143 "smarty_internal_templateparser.y"
    function yy_r1(){
    $this->strict_mode = true;
    $this->_retvalue = "/* strict mode */\n\$_smarty_tpl->strict_mode = true;\n";
    }
#line 1988 "smarty_internal_templateparser.php"
#line 147 "smarty_internal_templateparser.y"
    function yy_r2(){
    $this->_retvalue = '';
    }
#line 1993 "smarty_internal_templateparser.php"
#line 153 "smarty_internal_templateparser.y"
    function yy_r3(){
    if ($this->yystack[$this->yyidx + 0]->minor !== null) {
        $this->current_buffer->append_subtree($this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 2000 "smarty_internal_templateparser.php"
#line 170 "smarty_internal_templateparser.y"
    function yy_r6(){
    if ($this->compiler->has_code) {
        $tmp =''; foreach ($this->compiler->prefix_code as $code) {$tmp.=$code;} $this->compiler->prefix_code=array();
        $this->_retvalue = new _smarty_tag($this, $tmp.$this->yystack[$this->yyidx + -1]->minor);
    } else {
        $this->_retvalue = null;
    }
    $this->compiler->has_variable_string = false;
    $this->block_nesting_level = count($this->compiler->_tag_stack);
    }
#line 2012 "smarty_internal_templateparser.php"
#line 182 "smarty_internal_templateparser.y"
    function yy_r7(){
    $this->_retvalue = null;
    }
#line 2017 "smarty_internal_templateparser.php"
#line 187 "smarty_internal_templateparser.y"
    function yy_r8(){
    $this->_retvalue = new _smarty_text($this, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2022 "smarty_internal_templateparser.php"
#line 192 "smarty_internal_templateparser.y"
    function yy_r9(){
    if ($this->strip) {
        $this->_retvalue = new _smarty_text($this, self::stripString($this->yystack[$this->yyidx + 0]->minor));
    } else {
        $this->_retvalue = new _smarty_text($this, $this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 2031 "smarty_internal_templateparser.php"
#line 201 "smarty_internal_templateparser.y"
    function yy_r10(){
    $this->strip++;
    }
#line 2036 "smarty_internal_templateparser.php"
#line 205 "smarty_internal_templateparser.y"
    function yy_r11(){
    if (!$this->strip) {
        $this->compiler->trigger_template_error('Unbalanced {strip} tags');
    }
    $this->strip--;
    }
#line 2044 "smarty_internal_templateparser.php"
#line 212 "smarty_internal_templateparser.y"
    function yy_r12(){
    if ($this->strip) {
        SMARTY_INTERNAL_COMPILE_BLOCK::blockSource($this->compiler, self::stripString($this->yystack[$this->yyidx + 0]->minor));
    } else {
        SMARTY_INTERNAL_COMPILE_BLOCK::blockSource($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 2053 "smarty_internal_templateparser.php"
#line 224 "smarty_internal_templateparser.y"
    function yy_r14(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 2058 "smarty_internal_templateparser.php"
#line 228 "smarty_internal_templateparser.y"
    function yy_r15(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor . $this->yystack[$this->yyidx + 0]->minor;
    }
#line 2063 "smarty_internal_templateparser.php"
#line 236 "smarty_internal_templateparser.y"
    function yy_r17(){
    $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 2068 "smarty_internal_templateparser.php"
#line 250 "smarty_internal_templateparser.y"
    function yy_r19(){
    $this->compiler->assert_no_enforced_modifiers($this->yystack[$this->yyidx + 0]->minor instanceof BrainyStaticWrapper);
    if ($this->yystack[$this->yyidx + 0]->minor instanceof BrainyStaticWrapper) {
        $this->yystack[$this->yyidx + 0]->minor = (string) $this->yystack[$this->yyidx + 0]->minor;
    }
    $this->_retvalue = $this->compiler->compileTag('private_print_expression',array(),array('value'=>$this->yystack[$this->yyidx + 0]->minor));
    }
#line 2077 "smarty_internal_templateparser.php"
#line 258 "smarty_internal_templateparser.y"
    function yy_r20(){
    $this->compiler->assert_expected_modifier($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + -2]->minor instanceof BrainyStaticWrapper);
    if ($this->yystack[$this->yyidx + -2]->minor instanceof BrainyStaticWrapper) {
        $this->yystack[$this->yyidx + -2]->minor = (string) $this->yystack[$this->yyidx + -2]->minor;
    }
    $this->_retvalue = $this->compiler->compileTag('private_print_expression',$this->yystack[$this->yyidx + 0]->minor,array('value'=>$this->yystack[$this->yyidx + -2]->minor, 'modifierlist'=>$this->yystack[$this->yyidx + -1]->minor));
    }
#line 2086 "smarty_internal_templateparser.php"
#line 266 "smarty_internal_templateparser.y"
    function yy_r21(){
    $this->compiler->assert_no_enforced_modifiers($this->yystack[$this->yyidx + -1]->minor instanceof BrainyStaticWrapper);
    if ($this->yystack[$this->yyidx + -1]->minor instanceof BrainyStaticWrapper) {
        $this->yystack[$this->yyidx + -1]->minor = (string) $this->yystack[$this->yyidx + -1]->minor;
    }
    $this->_retvalue = $this->compiler->compileTag('private_print_expression',$this->yystack[$this->yyidx + 0]->minor,array('value'=>$this->yystack[$this->yyidx + -1]->minor));
    }
#line 2095 "smarty_internal_templateparser.php"
#line 293 "smarty_internal_templateparser.y"
    function yy_r24(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor . ' = (' . $this->yystack[$this->yyidx + 0]->minor . ');';
    }
#line 2100 "smarty_internal_templateparser.php"
#line 297 "smarty_internal_templateparser.y"
    function yy_r25(){
    $this->_retvalue = $this->compiler->compileTag('assign',array(array('value'=>$this->yystack[$this->yyidx + 0]->minor),array('var'=>"'".$this->yystack[$this->yyidx + -2]->minor."'")));
    }
#line 2105 "smarty_internal_templateparser.php"
#line 305 "smarty_internal_templateparser.y"
    function yy_r27(){
    $this->compiler->assert_is_not_strict('Passing attributes in an assignment without using {assign} is not supported in strict mode', $this);
    $this->_retvalue = $this->compiler->compileTag('assign',array_merge(array(array('value'=>$this->yystack[$this->yyidx + -1]->minor),array('var'=>"'".$this->yystack[$this->yyidx + -3]->minor."'")),$this->yystack[$this->yyidx + 0]->minor));
    }
#line 2111 "smarty_internal_templateparser.php"
#line 311 "smarty_internal_templateparser.y"
    function yy_r28(){
    $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2116 "smarty_internal_templateparser.php"
#line 315 "smarty_internal_templateparser.y"
    function yy_r29(){
    $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + 0]->minor,array());
    }
#line 2121 "smarty_internal_templateparser.php"
#line 320 "smarty_internal_templateparser.y"
    function yy_r30(){
    $this->_retvalue = "ob_start();\n".$this->compiler->compileTag($this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor).'echo ';
    $this->_retvalue .= $this->compiler->compileTag('private_modifier',array(),array('modifierlist'=>$this->yystack[$this->yyidx + -1]->minor,'value'=>'ob_get_clean()')) . ";\n";
    }
#line 2127 "smarty_internal_templateparser.php"
#line 327 "smarty_internal_templateparser.y"
    function yy_r31(){
    $tag = trim(substr($this->yystack[$this->yyidx + -1]->minor,$this->lex->ldel_length));
    $this->_retvalue = $this->compiler->compileTag(($tag == 'else if')? 'elseif' : $tag,array(),array('if condition'=>$this->yystack[$this->yyidx + 0]->minor));
    }
#line 2133 "smarty_internal_templateparser.php"
#line 332 "smarty_internal_templateparser.y"
    function yy_r32(){
    $tag = trim(substr($this->yystack[$this->yyidx + -2]->minor,$this->lex->ldel_length));
    $this->_retvalue = $this->compiler->compileTag(($tag == 'else if')? 'elseif' : $tag,$this->yystack[$this->yyidx + 0]->minor,array('if condition'=>$this->yystack[$this->yyidx + -1]->minor));
    }
#line 2139 "smarty_internal_templateparser.php"
#line 338 "smarty_internal_templateparser.y"
    function yy_r33(){
    $this->_retvalue = $this->compiler->compileTag('for',array_merge($this->yystack[$this->yyidx + 0]->minor,array(array('start'=>$this->yystack[$this->yyidx + -9]->minor),array('ifexp'=>$this->yystack[$this->yyidx + -6]->minor),array('var'=>$this->yystack[$this->yyidx + -2]->minor),array('step'=>$this->yystack[$this->yyidx + -1]->minor))),1);
    }
#line 2144 "smarty_internal_templateparser.php"
#line 342 "smarty_internal_templateparser.y"
    function yy_r34(){
    $this->_retvalue = '='.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2149 "smarty_internal_templateparser.php"
#line 350 "smarty_internal_templateparser.y"
    function yy_r36(){
    $this->_retvalue = $this->compiler->compileTag('for',array_merge($this->yystack[$this->yyidx + 0]->minor,array(array('start'=>$this->yystack[$this->yyidx + -3]->minor),array('to'=>$this->yystack[$this->yyidx + -1]->minor))),0);
    }
#line 2154 "smarty_internal_templateparser.php"
#line 354 "smarty_internal_templateparser.y"
    function yy_r37(){
    $this->_retvalue = $this->compiler->compileTag('for',array_merge($this->yystack[$this->yyidx + 0]->minor,array(array('start'=>$this->yystack[$this->yyidx + -5]->minor),array('to'=>$this->yystack[$this->yyidx + -3]->minor),array('step'=>$this->yystack[$this->yyidx + -1]->minor))),0);
    }
#line 2159 "smarty_internal_templateparser.php"
#line 359 "smarty_internal_templateparser.y"
    function yy_r38(){
    $this->_retvalue = $this->compiler->compileTag('foreach',$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2164 "smarty_internal_templateparser.php"
#line 364 "smarty_internal_templateparser.y"
    function yy_r39(){
    $this->_retvalue = $this->compiler->compileTag('foreach',array_merge($this->yystack[$this->yyidx + 0]->minor,array(array('from'=>$this->yystack[$this->yyidx + -4]->minor),array('item'=>$this->yystack[$this->yyidx + -1]->minor))));
    }
#line 2169 "smarty_internal_templateparser.php"
#line 368 "smarty_internal_templateparser.y"
    function yy_r40(){
    $this->_retvalue = $this->compiler->compileTag('foreach',array_merge($this->yystack[$this->yyidx + 0]->minor,array(array('from'=>$this->yystack[$this->yyidx + -7]->minor),array('item'=>$this->yystack[$this->yyidx + -1]->minor),array('key'=>$this->yystack[$this->yyidx + -4]->minor))));
    }
#line 2174 "smarty_internal_templateparser.php"
#line 381 "smarty_internal_templateparser.y"
    function yy_r43(){
    $this->_retvalue = $this->compiler->compileTag('setfilter',array(),array('modifier_list'=>array(array_merge(array($this->yystack[$this->yyidx + -1]->minor),$this->yystack[$this->yyidx + 0]->minor))));
    }
#line 2179 "smarty_internal_templateparser.php"
#line 385 "smarty_internal_templateparser.y"
    function yy_r44(){
    $this->_retvalue = $this->compiler->compileTag('setfilter',array(),array('modifier_list'=>array_merge(array(array_merge(array($this->yystack[$this->yyidx + -2]->minor),$this->yystack[$this->yyidx + -1]->minor)),$this->yystack[$this->yyidx + 0]->minor)));
    }
#line 2184 "smarty_internal_templateparser.php"
#line 390 "smarty_internal_templateparser.y"
    function yy_r45(){
    $j = strrpos($this->yystack[$this->yyidx + 0]->minor,'.');
    if ($this->yystack[$this->yyidx + 0]->minor[$j+1] == 'c') {
        // {$smarty.block.child}
        $this->_retvalue = SMARTY_INTERNAL_COMPILE_BLOCK::compileChildBlock($this->compiler);
    } else {
        // {$smarty.block.parent}
        $this->_retvalue = SMARTY_INTERNAL_COMPILE_BLOCK::compileParentBlock($this->compiler);
    }
    }
#line 2196 "smarty_internal_templateparser.php"
#line 403 "smarty_internal_templateparser.y"
    function yy_r46(){
    $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + 0]->minor.'close',array());
    }
#line 2201 "smarty_internal_templateparser.php"
#line 407 "smarty_internal_templateparser.y"
    function yy_r47(){
    $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -1]->minor.'close',array(),array('modifier_list'=>$this->yystack[$this->yyidx + 0]->minor));
    }
#line 2206 "smarty_internal_templateparser.php"
#line 415 "smarty_internal_templateparser.y"
    function yy_r48(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    $this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 2212 "smarty_internal_templateparser.php"
#line 421 "smarty_internal_templateparser.y"
    function yy_r49(){
    $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2217 "smarty_internal_templateparser.php"
#line 426 "smarty_internal_templateparser.y"
    function yy_r50(){
    $this->_retvalue = array();
    }
#line 2222 "smarty_internal_templateparser.php"
#line 431 "smarty_internal_templateparser.y"
    function yy_r51(){
    if (preg_match('~^true$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>'true');
    } elseif (preg_match('~^false$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>'false');
    } elseif (preg_match('~^null$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>'null');
    } else {
        $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>"'".$this->yystack[$this->yyidx + 0]->minor."'");
    }
    }
#line 2235 "smarty_internal_templateparser.php"
#line 443 "smarty_internal_templateparser.y"
    function yy_r52(){
    $this->_retvalue = array(trim($this->yystack[$this->yyidx + -1]->minor," =\n\r\t")=>$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2240 "smarty_internal_templateparser.php"
#line 451 "smarty_internal_templateparser.y"
    function yy_r54(){
    $this->_retvalue = "'".$this->yystack[$this->yyidx + 0]->minor."'";
    }
#line 2245 "smarty_internal_templateparser.php"
#line 463 "smarty_internal_templateparser.y"
    function yy_r57(){
    $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2250 "smarty_internal_templateparser.php"
#line 476 "smarty_internal_templateparser.y"
    function yy_r59(){
    $this->yystack[$this->yyidx + -2]->minor[]=$this->yystack[$this->yyidx + 0]->minor;
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor;
    }
#line 2256 "smarty_internal_templateparser.php"
#line 481 "smarty_internal_templateparser.y"
    function yy_r60(){
    $this->compiler->assert_is_not_strict('Variable variable assignment is not supported in strict mode', $this);
    $this->_retvalue = array('var' => $this->yystack[$this->yyidx + -2]->minor, 'value'=>$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2262 "smarty_internal_templateparser.php"
#line 486 "smarty_internal_templateparser.y"
    function yy_r61(){
    $this->_retvalue = array('var' => $this->yystack[$this->yyidx + -2]->minor, 'value'=>$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2267 "smarty_internal_templateparser.php"
#line 510 "smarty_internal_templateparser.y"
    function yy_r65(){
    $this->_retvalue = BrainyStaticWrapper::static_if_all($this->yystack[$this->yyidx + -2]->minor . trim($this->yystack[$this->yyidx + -1]->minor) . $this->yystack[$this->yyidx + 0]->minor, array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }
#line 2272 "smarty_internal_templateparser.php"
#line 529 "smarty_internal_templateparser.y"
    function yy_r69(){
    $this->_retvalue = $this->compiler->compileTag('private_modifier',array(),array('value'=>$this->yystack[$this->yyidx + -1]->minor,'modifierlist'=>$this->yystack[$this->yyidx + 0]->minor));
    }
#line 2277 "smarty_internal_templateparser.php"
#line 535 "smarty_internal_templateparser.y"
    function yy_r70(){
    $this->_retvalue = new BrainyStaticWrapper($this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2282 "smarty_internal_templateparser.php"
#line 539 "smarty_internal_templateparser.y"
    function yy_r71(){
    $this->_retvalue = new BrainyStaticWrapper('in_array('.$this->yystack[$this->yyidx + -2]->minor.','.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2287 "smarty_internal_templateparser.php"
#line 543 "smarty_internal_templateparser.y"
    function yy_r72(){
    $this->_retvalue = new BrainyStaticWrapper('in_array('.$this->yystack[$this->yyidx + -2]->minor.',(array)'.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2292 "smarty_internal_templateparser.php"
#line 551 "smarty_internal_templateparser.y"
    function yy_r74(){
    $this->_retvalue = new BrainyStaticWrapper('!('.$this->yystack[$this->yyidx + -2]->minor.' % '.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2297 "smarty_internal_templateparser.php"
#line 555 "smarty_internal_templateparser.y"
    function yy_r75(){
    $this->compiler->assert_is_not_strict('`is not div by` is not supported in strict mode', $this);
    $this->_retvalue = new BrainyStaticWrapper('('.$this->yystack[$this->yyidx + -2]->minor.' % '.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2303 "smarty_internal_templateparser.php"
#line 560 "smarty_internal_templateparser.y"
    function yy_r76(){
    $this->_retvalue = new BrainyStaticWrapper('!(1 & '.$this->yystack[$this->yyidx + -1]->minor.')');
    }
#line 2308 "smarty_internal_templateparser.php"
#line 564 "smarty_internal_templateparser.y"
    function yy_r77(){
    $this->compiler->assert_is_not_strict('`is not even` is not supported in strict mode', $this);
    $this->_retvalue = new BrainyStaticWrapper('(1 & '.$this->yystack[$this->yyidx + -1]->minor.')');
    }
#line 2314 "smarty_internal_templateparser.php"
#line 569 "smarty_internal_templateparser.y"
    function yy_r78(){
    $this->compiler->assert_is_not_strict('`is even by` is not supported in strict mode', $this);
    $this->_retvalue = new BrainyStaticWrapper('!(1 & '.$this->yystack[$this->yyidx + -2]->minor.' / '.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2320 "smarty_internal_templateparser.php"
#line 574 "smarty_internal_templateparser.y"
    function yy_r79(){
    $this->compiler->assert_is_not_strict('`is not even by` is not supported in strict mode', $this);
    $this->_retvalue = new BrainyStaticWrapper('(1 & '.$this->yystack[$this->yyidx + -2]->minor.' / '.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2326 "smarty_internal_templateparser.php"
#line 579 "smarty_internal_templateparser.y"
    function yy_r80(){
    $this->_retvalue = new BrainyStaticWrapper('(1 & '.$this->yystack[$this->yyidx + -1]->minor.')');
    }
#line 2331 "smarty_internal_templateparser.php"
#line 583 "smarty_internal_templateparser.y"
    function yy_r81(){
    $this->compiler->assert_is_not_strict('`is not odd` is not supported in strict mode', $this);
    $this->_retvalue = new BrainyStaticWrapper('!(1 & '.$this->yystack[$this->yyidx + -1]->minor.')');
    }
#line 2337 "smarty_internal_templateparser.php"
#line 588 "smarty_internal_templateparser.y"
    function yy_r82(){
    $this->compiler->assert_is_not_strict('`is odd by` is not supported in strict mode', $this);
    $this->_retvalue = new BrainyStaticWrapper('(1 & '.$this->yystack[$this->yyidx + -2]->minor.' / '.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2343 "smarty_internal_templateparser.php"
#line 593 "smarty_internal_templateparser.y"
    function yy_r83(){
    $this->compiler->assert_is_not_strict('`is not odd by` is not supported in strict mode', $this);
    $this->_retvalue = new BrainyStaticWrapper('!(1 & '.$this->yystack[$this->yyidx + -2]->minor.' / '.$this->yystack[$this->yyidx + 0]->minor.')');
    }
#line 2349 "smarty_internal_templateparser.php"
#line 598 "smarty_internal_templateparser.y"
    function yy_r84(){
    $this->compiler->assert_is_not_strict('`instanceof` is not supported in strict mode', $this);
    $this->_retvalue = new BrainyStaticWrapper($this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2355 "smarty_internal_templateparser.php"
#line 603 "smarty_internal_templateparser.y"
    function yy_r85(){
    $this->compiler->assert_is_not_strict('`instanceof` is not supported in strict mode', $this);
    self::$prefix_number++;
    $this->compiler->prefix_code[] = '$_tmp'.self::$prefix_number.'='.$this->yystack[$this->yyidx + 0]->minor.";\n";
    $this->_retvalue = new BrainyStaticWrapper($this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.'$_tmp'.self::$prefix_number);
    }
#line 2363 "smarty_internal_templateparser.php"
#line 613 "smarty_internal_templateparser.y"
    function yy_r86(){
    $this->_retvalue = $this->yystack[$this->yyidx + -6]->minor.' ? '. $this->compileVariable("'".$this->yystack[$this->yyidx + -2]->minor."'") . ' : '.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2368 "smarty_internal_templateparser.php"
#line 617 "smarty_internal_templateparser.y"
    function yy_r87(){
    $this->_retvalue = $this->yystack[$this->yyidx + -5]->minor.' ? '.$this->yystack[$this->yyidx + -2]->minor.' : '.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2373 "smarty_internal_templateparser.php"
#line 627 "smarty_internal_templateparser.y"
    function yy_r89(){
    $this->_retvalue = BrainyStaticWrapper::static_concat($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2378 "smarty_internal_templateparser.php"
#line 632 "smarty_internal_templateparser.y"
    function yy_r90(){
    $this->_retvalue = BrainyStaticWrapper::static_concat('!', $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2383 "smarty_internal_templateparser.php"
#line 645 "smarty_internal_templateparser.y"
    function yy_r93(){
    $this->_retvalue = new BrainyStaticWrapper($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2388 "smarty_internal_templateparser.php"
#line 649 "smarty_internal_templateparser.y"
    function yy_r94(){
    $this->_retvalue = new BrainyStaticWrapper($this->yystack[$this->yyidx + -2]->minor.'.'.$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2393 "smarty_internal_templateparser.php"
#line 653 "smarty_internal_templateparser.y"
    function yy_r95(){
    $this->_retvalue = new BrainyStaticWrapper($this->yystack[$this->yyidx + -1]->minor.'.');
    }
#line 2398 "smarty_internal_templateparser.php"
#line 657 "smarty_internal_templateparser.y"
    function yy_r96(){
    $this->_retvalue = new BrainyStaticWrapper('.'.$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2403 "smarty_internal_templateparser.php"
#line 662 "smarty_internal_templateparser.y"
    function yy_r97(){
    if (preg_match('~^true$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = new BrainyStaticWrapper('true');
    } elseif (preg_match('~^false$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = new BrainyStaticWrapper('false');
    } elseif (preg_match('~^null$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = new BrainyStaticWrapper('null');
    } else {
        $this->_retvalue = new BrainyStaticWrapper(var_export($this->yystack[$this->yyidx + 0]->minor, true));
    }
    }
#line 2416 "smarty_internal_templateparser.php"
#line 680 "smarty_internal_templateparser.y"
    function yy_r99(){
    $this->_retvalue = BrainyStaticWrapper::static_if_all("(". $this->yystack[$this->yyidx + -1]->minor .")", array($this->yystack[$this->yyidx + -1]->minor));
    }
#line 2421 "smarty_internal_templateparser.php"
#line 696 "smarty_internal_templateparser.y"
    function yy_r102(){
    self::$prefix_number++;
    $this->compiler->prefix_code[] = 'ob_start();'.$this->yystack[$this->yyidx + -1]->minor.'$_tmp'.self::$prefix_number.'=ob_get_clean();';
    $this->_retvalue = '$_tmp'.self::$prefix_number;
    }
#line 2428 "smarty_internal_templateparser.php"
#line 719 "smarty_internal_templateparser.y"
    function yy_r106(){
    if ($this->yystack[$this->yyidx + 0]->minor === '[]') {
        $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor . $this->yystack[$this->yyidx + 0]->minor;
    } else {
        $this->_retvalue = $this->compileSafeLookupWithBase($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 2437 "smarty_internal_templateparser.php"
#line 728 "smarty_internal_templateparser.y"
    function yy_r107(){
    if ($this->yystack[$this->yyidx + -2]->minor == '\'smarty\'') {
        $this->_retvalue = $this->compiler->compileTag('private_special_variable', array(), $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    } else {
        $this->_retvalue = $this->compileSafeLookupWithBase($this->compileVariable($this->yystack[$this->yyidx + -2]->minor), $this->yystack[$this->yyidx + -1]->minor);
        $this->_retvalue = $this->compileSafeLookupWithBase($this->_retvalue, $this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 2447 "smarty_internal_templateparser.php"
#line 737 "smarty_internal_templateparser.y"
    function yy_r108(){
    if ($this->yystack[$this->yyidx + -1]->minor == '\'smarty\'') {
        $this->_retvalue = $this->compiler->compileTag('private_special_variable', array(), $this->yystack[$this->yyidx + 0]->minor);
    } elseif ($this->yystack[$this->yyidx + 0]->minor === '[]') {
        $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + -1]->minor) . $this->yystack[$this->yyidx + 0]->minor;
    } else {
        $this->_retvalue = $this->compileSafeLookupWithBase($this->compileVariable($this->yystack[$this->yyidx + -1]->minor), $this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 2458 "smarty_internal_templateparser.php"
#line 747 "smarty_internal_templateparser.y"
    function yy_r109(){
    $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2463 "smarty_internal_templateparser.php"
#line 755 "smarty_internal_templateparser.y"
    function yy_r111(){
    $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2468 "smarty_internal_templateparser.php"
#line 760 "smarty_internal_templateparser.y"
    function yy_r112(){
    $this->_retvalue = '$_smarty_tpl->getConfigVariable(\''. $this->yystack[$this->yyidx + -1]->minor .'\')';
    }
#line 2473 "smarty_internal_templateparser.php"
#line 764 "smarty_internal_templateparser.y"
    function yy_r113(){
    $this->_retvalue = '$_smarty_tpl->getConfigVariable('. $this->yystack[$this->yyidx + -1]->minor .')';
    }
#line 2478 "smarty_internal_templateparser.php"
#line 768 "smarty_internal_templateparser.y"
    function yy_r114(){
    $this->_retvalue = '[]';
    }
#line 2483 "smarty_internal_templateparser.php"
#line 774 "smarty_internal_templateparser.y"
    function yy_r115(){
    $this->compiler->assert_is_not_strict('Variable indicies with dot syntax is not supported in strict mode', $this);
    $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2489 "smarty_internal_templateparser.php"
#line 779 "smarty_internal_templateparser.y"
    function yy_r116(){
    $this->compiler->assert_is_not_strict('Variable indicies with dot syntax is not supported in strict mode', $this);
    $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + -2]->minor).'->'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2495 "smarty_internal_templateparser.php"
#line 784 "smarty_internal_templateparser.y"
    function yy_r117(){
    $this->_retvalue = "'". $this->yystack[$this->yyidx + 0]->minor ."'";
    }
#line 2500 "smarty_internal_templateparser.php"
#line 792 "smarty_internal_templateparser.y"
    function yy_r119(){
    $this->compiler->assert_is_not_strict('Dot syntax with expressions is not supported in strict mode', $this);
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 2506 "smarty_internal_templateparser.php"
#line 798 "smarty_internal_templateparser.y"
    function yy_r120(){
    $this->compiler->assert_is_not_strict('Section tags are not supported in strict mode', $this);
    $this->_retvalue = $this->compiler->compileTag('private_special_variable', array(), '\'section\'', '\'' . $this->yystack[$this->yyidx + -1]->minor . '\'') . '[\'index\']';
    }
#line 2512 "smarty_internal_templateparser.php"
#line 803 "smarty_internal_templateparser.y"
    function yy_r121(){
    $this->compiler->assert_is_not_strict('Section tags are not supported in strict mode', $this);
    $this->_retvalue = $this->compiler->compileTag('private_special_variable', array(), '\'section\'', '\'' . $this->yystack[$this->yyidx + -3]->minor . '\']') . '[\''.$this->yystack[$this->yyidx + -1]->minor.'\']';
    }
#line 2518 "smarty_internal_templateparser.php"
#line 821 "smarty_internal_templateparser.y"
    function yy_r124(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.'.'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2523 "smarty_internal_templateparser.php"
#line 826 "smarty_internal_templateparser.y"
    function yy_r125(){
    $this->_retvalue = '\''.$this->yystack[$this->yyidx + 0]->minor.'\'';
    }
#line 2528 "smarty_internal_templateparser.php"
#line 831 "smarty_internal_templateparser.y"
    function yy_r126(){
    $this->compiler->assert_is_not_strict('Variable variables are not supported in strict mode', $this);
    $this->_retvalue = '('.$this->yystack[$this->yyidx + -1]->minor.')';
    }
#line 2534 "smarty_internal_templateparser.php"
#line 841 "smarty_internal_templateparser.y"
    function yy_r127(){
    if ($this->security && substr($this->yystack[$this->yyidx + 0]->minor, 0, 1) == '_') {
        $this->compiler->trigger_template_error(self::Err1);
    }
    $this->_retvalue = '->'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2542 "smarty_internal_templateparser.php"
#line 848 "smarty_internal_templateparser.y"
    function yy_r128(){
    $this->compiler->assert_is_not_strict('Variable method calls are not supported in strict mode', $this);
    if ($this->security) {
        $this->compiler->trigger_template_error (self::Err2);
    }
    $this->_retvalue = '->{'.$this->compileVariable($this->yystack[$this->yyidx + 0]->minor).'}';
    }
#line 2551 "smarty_internal_templateparser.php"
#line 856 "smarty_internal_templateparser.y"
    function yy_r129(){
    $this->compiler->assert_is_not_strict('Variable method calls are not supported in strict mode', $this);
    if ($this->security) {
        $this->compiler->trigger_template_error (self::Err2);
    }
    $this->_retvalue = '->{'.$this->yystack[$this->yyidx + -1]->minor.'}';
    }
#line 2560 "smarty_internal_templateparser.php"
#line 864 "smarty_internal_templateparser.y"
    function yy_r130(){
    $this->compiler->assert_is_not_strict('Variable method calls are not supported in strict mode', $this);
    if ($this->security) {
        $this->compiler->trigger_template_error (self::Err2);
    }
    $this->_retvalue = '->{\''.$this->yystack[$this->yyidx + -3]->minor.'\'.'.$this->yystack[$this->yyidx + -1]->minor.'}';
    }
#line 2569 "smarty_internal_templateparser.php"
#line 873 "smarty_internal_templateparser.y"
    function yy_r131(){
    $this->_retvalue = '->'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2574 "smarty_internal_templateparser.php"
#line 881 "smarty_internal_templateparser.y"
    function yy_r132(){
    if (!$this->security || $this->smarty->security_policy->isTrustedPhpFunction($this->yystack[$this->yyidx + -3]->minor, $this->compiler)) {
        if (strcasecmp($this->yystack[$this->yyidx + -3]->minor, 'isset') === 0 || strcasecmp($this->yystack[$this->yyidx + -3]->minor, 'empty') === 0 || strcasecmp($this->yystack[$this->yyidx + -3]->minor, 'array') === 0 || is_callable($this->yystack[$this->yyidx + -3]->minor)) {
            $func_name = strtolower($this->yystack[$this->yyidx + -3]->minor);

            $is_language_construct = $func_name === 'isset' || $func_name === 'empty';
            $combined_params = array();
            foreach ($this->yystack[$this->yyidx + -1]->minor as $param) {
                if ($is_language_construct && $param instanceof BrainySafeLookupWrapper) {
                    $combined_params[] = $param->getUnsafe();
                    continue;
                }
                $combined_params[] = $param;
            }
            $par = implode(',', $combined_params);

            if ($func_name == 'isset') {
                if (count($combined_params) == 0) {
                    $this->compiler->trigger_template_error('Illegal number of paramer in "isset()"');
                }
                if (strncasecmp($par, '$_smarty_tpl->getConfigVariable', strlen('$_smarty_tpl->getConfigVariable')) === 0) {
                    $this->compiler->assert_is_not_strict('isset() is not allowed on config variables', $this);
                    self::$prefix_number++;
                    $this->compiler->prefix_code[] = '$_tmp'.self::$prefix_number.'='.str_replace(')',', false)',$par).";\n";
                    $isset_par = '$_tmp'.self::$prefix_number;
                } else {
                    $isset_par=str_replace("')->value","',null,true,false)->value",$par);
                }
                $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". $isset_par .")";

            } elseif (in_array($func_name, array('empty', 'reset', 'current', 'end', 'prev', 'next'))) {

                if ($func_name !== 'empty') {
                    $this->compiler->assert_is_not_strict($func_name . ' is not allowed in strict mode', $this);
                }

                if (count($combined_params) != 1) {
                    $this->compiler->trigger_template_error('Illegal number of paramer in "empty()"');
                }
                if ($func_name == 'empty') {
                    $this->_retvalue = $func_name.'('.str_replace("')->value","',null,true,false)->value",$combined_params[0]).')';
                } else {
                    $this->_retvalue = $func_name.'('.$combined_params[0].')';
                }
            } else {
                $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". $par .")";
            }
        } else {
            $this->compiler->trigger_template_error("unknown function \"" . $this->yystack[$this->yyidx + -3]->minor . "\"");
        }
    }
    }
#line 2628 "smarty_internal_templateparser.php"
#line 937 "smarty_internal_templateparser.y"
    function yy_r133(){
    if ($this->security && substr($this->yystack[$this->yyidx + -3]->minor,0,1) == '_') {
        $this->compiler->trigger_template_error(self::Err1);
    }
    $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". implode(',',$this->yystack[$this->yyidx + -1]->minor) .")";
    }
#line 2636 "smarty_internal_templateparser.php"
#line 944 "smarty_internal_templateparser.y"
    function yy_r134(){
    if ($this->security) {
        $this->compiler->trigger_template_error(self::Err2);
    }
    self::$prefix_number++;
    $this->compiler->prefix_code[] = '$_tmp'.self::$prefix_number.'='.$this->compileVariable("'".$this->yystack[$this->yyidx + -3]->minor."'").';';
    $this->_retvalue = '$_tmp'.self::$prefix_number.'('. implode(',',$this->yystack[$this->yyidx + -1]->minor) .')';
    }
#line 2646 "smarty_internal_templateparser.php"
#line 955 "smarty_internal_templateparser.y"
    function yy_r135(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -2]->minor,array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 2651 "smarty_internal_templateparser.php"
#line 972 "smarty_internal_templateparser.y"
    function yy_r138(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -2]->minor,array(array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor)));
    }
#line 2656 "smarty_internal_templateparser.php"
#line 976 "smarty_internal_templateparser.y"
    function yy_r139(){
    $this->_retvalue = array(array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor));
    }
#line 2661 "smarty_internal_templateparser.php"
#line 980 "smarty_internal_templateparser.y"
    function yy_r140(){
    $this->compiler->assert_is_not_strict('@ is not allowed in templates', $this);
    $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2667 "smarty_internal_templateparser.php"
#line 985 "smarty_internal_templateparser.y"
    function yy_r141(){
    $this->_retvalue =  array($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2672 "smarty_internal_templateparser.php"
#line 993 "smarty_internal_templateparser.y"
    function yy_r142(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2677 "smarty_internal_templateparser.php"
#line 1013 "smarty_internal_templateparser.y"
    function yy_r146(){
    $this->_retvalue = '==';
    }
#line 2682 "smarty_internal_templateparser.php"
#line 1017 "smarty_internal_templateparser.y"
    function yy_r147(){
    $this->_retvalue = '!=';
    }
#line 2687 "smarty_internal_templateparser.php"
#line 1021 "smarty_internal_templateparser.y"
    function yy_r148(){
    $this->_retvalue = '>';
    }
#line 2692 "smarty_internal_templateparser.php"
#line 1025 "smarty_internal_templateparser.y"
    function yy_r149(){
    $this->_retvalue = '<';
    }
#line 2697 "smarty_internal_templateparser.php"
#line 1029 "smarty_internal_templateparser.y"
    function yy_r150(){
    $this->_retvalue = '>=';
    }
#line 2702 "smarty_internal_templateparser.php"
#line 1033 "smarty_internal_templateparser.y"
    function yy_r151(){
    $this->_retvalue = '<=';
    }
#line 2707 "smarty_internal_templateparser.php"
#line 1037 "smarty_internal_templateparser.y"
    function yy_r152(){
    $this->_retvalue = '===';
    }
#line 2712 "smarty_internal_templateparser.php"
#line 1041 "smarty_internal_templateparser.y"
    function yy_r153(){
    $this->_retvalue = '!==';
    }
#line 2717 "smarty_internal_templateparser.php"
#line 1045 "smarty_internal_templateparser.y"
    function yy_r154(){
    $this->_retvalue = '%';
    }
#line 2722 "smarty_internal_templateparser.php"
#line 1049 "smarty_internal_templateparser.y"
    function yy_r155(){
    $this->_retvalue = '&&';
    }
#line 2727 "smarty_internal_templateparser.php"
#line 1053 "smarty_internal_templateparser.y"
    function yy_r156(){
    $this->_retvalue = '||';
    }
#line 2732 "smarty_internal_templateparser.php"
#line 1057 "smarty_internal_templateparser.y"
    function yy_r157(){
    $this->compiler->assert_is_not_strict('XOR is not supported in strict mode', $this);
    $this->_retvalue = ' XOR ';
    }
#line 2738 "smarty_internal_templateparser.php"
#line 1065 "smarty_internal_templateparser.y"
    function yy_r158(){
    $this->_retvalue = 'array('.$this->yystack[$this->yyidx + -1]->minor.')';
    }
#line 2743 "smarty_internal_templateparser.php"
#line 1073 "smarty_internal_templateparser.y"
    function yy_r160(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.','.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2748 "smarty_internal_templateparser.php"
#line 1077 "smarty_internal_templateparser.y"
    function yy_r161(){
    return;
    }
#line 2753 "smarty_internal_templateparser.php"
#line 1081 "smarty_internal_templateparser.y"
    function yy_r162(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'=>'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2758 "smarty_internal_templateparser.php"
#line 1085 "smarty_internal_templateparser.y"
    function yy_r163(){
    $this->_retvalue = '\''.$this->yystack[$this->yyidx + -2]->minor.'\'=>'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2763 "smarty_internal_templateparser.php"
#line 1097 "smarty_internal_templateparser.y"
    function yy_r165(){
    $this->_retvalue = "''";
    }
#line 2768 "smarty_internal_templateparser.php"
#line 1101 "smarty_internal_templateparser.y"
    function yy_r166(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor->to_smarty_php();
    }
#line 2773 "smarty_internal_templateparser.php"
#line 1106 "smarty_internal_templateparser.y"
    function yy_r167(){
    $this->yystack[$this->yyidx + -1]->minor->append_subtree($this->yystack[$this->yyidx + 0]->minor);
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 2779 "smarty_internal_templateparser.php"
#line 1111 "smarty_internal_templateparser.y"
    function yy_r168(){
    $this->_retvalue = new _smarty_doublequoted($this, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2784 "smarty_internal_templateparser.php"
#line 1115 "smarty_internal_templateparser.y"
    function yy_r169(){
    $this->_retvalue = new _smarty_code($this, '(string)' . $this->compileVariable("'" . substr($this->yystack[$this->yyidx + 0]->minor,1) . "'"));
    }
#line 2789 "smarty_internal_templateparser.php"
#line 1119 "smarty_internal_templateparser.y"
    function yy_r170(){
    $this->_retvalue = new _smarty_code($this, '(string)'.$this->yystack[$this->yyidx + -1]->minor);
    }
#line 2794 "smarty_internal_templateparser.php"
#line 1123 "smarty_internal_templateparser.y"
    function yy_r171(){
    $this->_retvalue = new _smarty_code($this, '(string)('.$this->yystack[$this->yyidx + -1]->minor.')');
    }
#line 2799 "smarty_internal_templateparser.php"
#line 1127 "smarty_internal_templateparser.y"
    function yy_r172(){
    $this->_retvalue = new _smarty_tag($this, $this->yystack[$this->yyidx + -1]->minor);
    }
#line 2804 "smarty_internal_templateparser.php"
#line 1131 "smarty_internal_templateparser.y"
    function yy_r173(){
    $this->_retvalue = new _smarty_dq_content($this, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2809 "smarty_internal_templateparser.php"

    private $_retvalue;

    public function yy_reduce($yyruleno)
    {
        $yymsp = $this->yystack[$this->yyidx];
        if ($this->yyTraceFILE && $yyruleno >= 0
              && $yyruleno < count(self::$yyRuleName)) {
            fprintf($this->yyTraceFILE, "%sReduce (%d) [%s].\n",
                $this->yyTracePrompt, $yyruleno,
                self::$yyRuleName[$yyruleno]);
        }

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for ($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            if (!$this->yyTraceFILE && $yysize) {
                $this->yyidx++;
                $x = new TP_yyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    public function yy_parse_failed()
    {
        if ($this->yyTraceFILE) {
            fprintf($this->yyTraceFILE, "%sFail!\n", $this->yyTracePrompt);
        } while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
    }

    public function yy_syntax_error($yymajor, $TOKEN)
    {
#line 123 "smarty_internal_templateparser.y"

    $this->internalError = true;
    $this->yymajor = $yymajor;
    $this->compiler->trigger_template_error();
#line 2871 "smarty_internal_templateparser.php"
    }

    public function yy_accept()
    {
        if ($this->yyTraceFILE) {
            fprintf($this->yyTraceFILE, "%sAccept!\n", $this->yyTracePrompt);
        } while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
#line 116 "smarty_internal_templateparser.y"

    $this->successful = !$this->internalError;
    $this->internalError = false;
    $this->retvalue = $this->_retvalue;
#line 2887 "smarty_internal_templateparser.php"
    }

    public function doParse($yymajor, $yytokenvalue)
    {
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */

        if ($this->yyidx === null || $this->yyidx < 0) {
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new TP_yyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);

        if ($this->yyTraceFILE) {
            fprintf($this->yyTraceFILE, "%sInput %s\n",
                $this->yyTracePrompt, $this->yyTokenName[$yymajor]);
        }

        do {
            $yyact = $this->yy_find_shift_action($yymajor);
            if ($yymajor < self::YYERRORSYMBOL &&
                  !$this->yy_is_expected_token($yymajor)) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if ($this->yyTraceFILE) {
                    fprintf($this->yyTraceFILE, "%sSyntax Error!\n",
                        $this->yyTracePrompt);
                }
                if (self::YYERRORSYMBOL) {
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit) {
                        if ($this->yyTraceFILE) {
                            fprintf($this->yyTraceFILE, "%sDiscard input token %s\n",
                                $this->yyTracePrompt, $this->yyTokenName[$yymajor]);
                        }
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0 &&
                                 $yymx != self::YYERRORSYMBOL &&
        ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                              ){
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}
