<?php
/**
 * Brainy Internal Plugin Templateparser
 *
 * This is the template parser.
 * It is generated from the smarty_internal_templateparser.y file
 * @package Brainy
 * @subpackage Compiler
 * @author Uwe Tews
 * @author Matt Basta
 */
class TP_yyToken implements ArrayAccess
{

    public $string = '';
    public $metadata = array();

    public function __construct($s, $m = array())
    {
        if ($s instanceof TP_yyToken) {
            $this->string = $s->string;
            $this->metadata = $s->metadata;
        } else {
            $this->string = (string) $s;
            if ($m instanceof TP_yyToken) {
                $this->metadata = $m->metadata;
            } elseif (is_array($m)) {
                $this->metadata = $m;
            }
        }
    }

    public function __toString()
    {
        return $this->_string;
    }

    public function offsetExists($offset)
    {
        return isset($this->metadata[$offset]);
    }

    public function offsetGet($offset)
    {
        return $this->metadata[$offset];
    }

    public function offsetSet($offset, $value)
    {
        if ($offset === null) {
            if (isset($value[0])) {
                $x = ($value instanceof TP_yyToken) ?
                    $value->metadata : $value;
                $this->metadata = array_merge($this->metadata, $x);

                return;
            }
            $offset = count($this->metadata);
        }
        if ($value === null) {
            return;
        }
        if ($value instanceof TP_yyToken) {
            if ($value->metadata) {
                $this->metadata[$offset] = $value->metadata;
            }
        } elseif ($value) {
            $this->metadata[$offset] = $value;
        }
    }

    public function offsetUnset($offset)
    {
        unset($this->metadata[$offset]);
    }
}

class TP_yyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};


#line 14 "smarty_internal_templateparser.y"
class Smarty_Internal_Templateparser#line 81 "smarty_internal_templateparser.php"
{
#line 16 "smarty_internal_templateparser.y"

    const Err1 = "Security error: Call to private object member not allowed";
    const Err2 = "Security error: Call to dynamic object member not allowed";
    const Err3 = "PHP in template not allowed. Use SmartyBC to enable it";
    // states whether the parse was successful or not
    public $successful = true;
    public $retvalue = 0;
    public static $prefix_number = 0;
    private $lex;
    private $internalError = false;
    private $strip = false;

    private $safe_lookups = 0;

    function __construct($lex, $compiler) {
        $this->lex = $lex;
        $this->compiler = $compiler;
        $this->smarty = $this->compiler->smarty;
        $this->template = $this->compiler->template;
        $this->compiler->has_variable_string = false;
        $this->compiler->prefix_code = array();
        $this->security = isset($this->smarty->security_policy);
        $this->block_nesting_level = 0;
        $this->current_buffer = $this->root_buffer = new _smarty_template_buffer($this);

        $this->safe_lookups = $this->smarty->safe_lookups;
    }

    public function compileVariable($variable) {
        if ($this->safe_lookups === 0) { // Unsafe lookups
            return '$_smarty_tpl->tpl_vars[' . $variable . ']->value';
        }
        return 'smarty_safe_array_lookup($_smarty_tpl->tpl_vars, '. $variable .', ' . $this->safe_lookups . ')->value';
    }

    public function compileSafeLookupWithBase($base, $variable) {
        if ($this->safe_lookups === 0) { // Unsafe lookups
            return $base . '[' . $variable . ']';
        }
        return 'smarty_safe_array_lookup(' . $base . ', '. $variable .', ' . $this->safe_lookups . ')';
    }
#line 126 "smarty_internal_templateparser.php"

    const TP_VERT                           =  1;
    const TP_COLON                          =  2;
    const TP_RDEL                           =  3;
    const TP_COMMENT                        =  4;
    const TP_TEXT                           =  5;
    const TP_STRIPON                        =  6;
    const TP_STRIPOFF                       =  7;
    const TP_BLOCKSOURCE                    =  8;
    const TP_LITERALSTART                   =  9;
    const TP_LITERALEND                     = 10;
    const TP_LITERAL                        = 11;
    const TP_LDEL                           = 12;
    const TP_DOLLAR                         = 13;
    const TP_ID                             = 14;
    const TP_EQUAL                          = 15;
    const TP_PTR                            = 16;
    const TP_LDELIF                         = 17;
    const TP_LDELFOR                        = 18;
    const TP_SEMICOLON                      = 19;
    const TP_INCDEC                         = 20;
    const TP_TO                             = 21;
    const TP_STEP                           = 22;
    const TP_LDELFOREACH                    = 23;
    const TP_SPACE                          = 24;
    const TP_AS                             = 25;
    const TP_APTR                           = 26;
    const TP_LDELSETFILTER                  = 27;
    const TP_SMARTYBLOCKCHILDPARENT         = 28;
    const TP_LDELSLASH                      = 29;
    const TP_ATTR                           = 30;
    const TP_INTEGER                        = 31;
    const TP_COMMA                          = 32;
    const TP_OPENP                          = 33;
    const TP_CLOSEP                         = 34;
    const TP_MATH                           = 35;
    const TP_UNIMATH                        = 36;
    const TP_ANDSYM                         = 37;
    const TP_ISIN                           = 38;
    const TP_ISDIVBY                        = 39;
    const TP_ISNOTDIVBY                     = 40;
    const TP_ISEVEN                         = 41;
    const TP_ISNOTEVEN                      = 42;
    const TP_ISEVENBY                       = 43;
    const TP_ISNOTEVENBY                    = 44;
    const TP_ISODD                          = 45;
    const TP_ISNOTODD                       = 46;
    const TP_ISODDBY                        = 47;
    const TP_ISNOTODDBY                     = 48;
    const TP_INSTANCEOF                     = 49;
    const TP_QMARK                          = 50;
    const TP_NOT                            = 51;
    const TP_TYPECAST                       = 52;
    const TP_HEX                            = 53;
    const TP_DOT                            = 54;
    const TP_SINGLEQUOTESTRING              = 55;
    const TP_DOUBLECOLON                    = 56;
    const TP_AT                             = 57;
    const TP_HATCH                          = 58;
    const TP_OPENB                          = 59;
    const TP_CLOSEB                         = 60;
    const TP_EQUALS                         = 61;
    const TP_NOTEQUALS                      = 62;
    const TP_GREATERTHAN                    = 63;
    const TP_LESSTHAN                       = 64;
    const TP_GREATEREQUAL                   = 65;
    const TP_LESSEQUAL                      = 66;
    const TP_IDENTITY                       = 67;
    const TP_NONEIDENTITY                   = 68;
    const TP_MOD                            = 69;
    const TP_LAND                           = 70;
    const TP_LOR                            = 71;
    const TP_LXOR                           = 72;
    const TP_QUOTE                          = 73;
    const TP_DOLLARID                       = 74;
    const YY_NO_ACTION = 543;
    const YY_ACCEPT_ACTION = 542;
    const YY_ERROR_ACTION = 541;

    const YY_SZ_ACTTAB = 2558;
static public $yy_action = array(
 /*     0 */   216,  330,  295,  195,  192,  284,  282,  289,  288,  280,
 /*    10 */   189,  286,  270,   10,  199,  299,   36,   28,    2,  106,
 /*    20 */    42,  132,  186,   41,  126,  216,  176,  408,  245,   30,
 /*    30 */   242,  204,  204,  304,   49,   48,   50,   44,   16,   15,
 /*    40 */   293,  294,   11,   12,  296,  305,   23,   21,  408,  246,
 /*    50 */    24,  164,  297,   29,  408,  542,   94,  260,  244,  283,
 /*    60 */   315,  314,  316,  317,  318,  313,  312,  308,  307,  324,
 /*    70 */   311,  310,  216,   45,   24,  216,  297,  365,  336,   24,
 /*    80 */   105,  297,   29,  231,  247,    8,   41,   96,  234,  210,
 /*    90 */     2,  106,   30,   34,    9,   41,  126,  216,   41,  408,
 /*   100 */   245,   30,  242,  262,   30,  285,   49,   48,   50,   44,
 /*   110 */    16,   15,  293,  294,   11,   12,  296,  305,   23,   21,
 /*   120 */   408,  216,  182,   45,  253,  216,  408,  405,  216,  137,
 /*   130 */   370,  292,  315,  314,  316,  317,  318,  313,  312,  308,
 /*   140 */   307,  324,  311,  310,   41,   45,  339,  337,  405,  206,
 /*   150 */    30,   35,  140,  263,  405,   49,   48,   50,   44,   16,
 /*   160 */    15,  293,  294,   11,   12,  296,  305,   23,   21,  216,
 /*   170 */   279,  203,   24,   45,  297,   18,   45,  261,  244,  283,
 /*   180 */   277,  315,  314,  316,  317,  318,  313,  312,  308,  307,
 /*   190 */   324,  311,  310,  290,  210,   17,  189,  276,  269,    9,
 /*   200 */     5,  155,    5,   49,   48,   50,   44,   16,   15,  293,
 /*   210 */   294,   11,   12,  296,  305,   23,   21,  216,   99,  174,
 /*   220 */   216,  227,  402,  146,   24,  146,  297,  327,  292,  315,
 /*   230 */   314,  316,  317,  318,  313,  312,  308,  307,  324,  311,
 /*   240 */   310,  228,   24,   41,  297,  216,  204,  124,  237,   30,
 /*   250 */   241,   49,   48,   50,   44,   16,   15,  293,  294,   11,
 /*   260 */    12,  296,  305,   23,   21,  216,  103,  180,  145,  253,
 /*   270 */    22,  286,  270,   32,  164,  130,  292,  315,  314,  316,
 /*   280 */   317,  318,  313,  312,  308,  307,  324,  311,  310,  225,
 /*   290 */   470,  191,  102,   45,  204,  470,   27,  164,  216,   49,
 /*   300 */    48,   50,   44,   16,   15,  293,  294,   11,   12,  296,
 /*   310 */   305,   23,   21,  216,  141,  329,  216,  196,   24,  204,
 /*   320 */   297,   38,  250,  240,  214,  315,  314,  316,  317,  318,
 /*   330 */   313,  312,  308,  307,  324,  311,  310,  141,   41,   41,
 /*   340 */     6,  188,    3,    5,   30,   30,   45,   49,   48,   50,
 /*   350 */    44,   16,   15,  293,  294,   11,   12,  296,  305,   23,
 /*   360 */    21,  216,   13,  236,  200,  299,  146,  164,  346,  204,
 /*   370 */   197,  299,  238,  315,  314,  316,  317,  318,  313,  312,
 /*   380 */   308,  307,  324,  311,  310,  167,   40,   24,  258,  217,
 /*   390 */    40,   40,  334,  347,  292,   49,   48,   50,   44,   16,
 /*   400 */    15,  293,  294,   11,   12,  296,  305,   23,   21,  216,
 /*   410 */   338,  267,  206,   24,  264,  249,  272,  193,  117,  343,
 /*   420 */    98,  315,  314,  316,  317,  318,  313,  312,  308,  307,
 /*   430 */   324,  311,  310,  181,  262,   26,  262,  190,  216,   43,
 /*   440 */   303,   30,  292,   49,   48,   50,   44,   16,   15,  293,
 /*   450 */   294,   11,   12,  296,  305,   23,   21,  216,  104,  178,
 /*   460 */   206,  271,  229,  135,  301,  204,  147,   31,  292,  315,
 /*   470 */   314,  316,  317,  318,  313,  312,  308,  307,  324,  311,
 /*   480 */   310,  330,  138,  142,  121,  306,  204,  306,    3,  205,
 /*   490 */   328,   49,   48,   50,   44,   16,   15,  293,  294,   11,
 /*   500 */    12,  296,  305,   23,   21,  216,  252,  202,   24,  268,
 /*   510 */   256,  250,  239,  259,  111,  123,  216,  315,  314,  316,
 /*   520 */   317,  318,  313,  312,  308,  307,  324,  311,  310,  183,
 /*   530 */   262,  235,  250,  275,   24,   19,  232,  252,  292,   49,
 /*   540 */    48,   50,   44,   16,   15,  293,  294,   11,   12,  296,
 /*   550 */   305,   23,   21,  168,  185,  175,  206,  254,  257,  278,
 /*   560 */    20,   32,  292,  292,  292,  315,  314,  316,  317,  318,
 /*   570 */   313,  312,  308,  307,  324,  311,  310,  216,  406,  254,
 /*   580 */   230,   93,  127,  128,  144,  171,    4,   65,  118,  239,
 /*   590 */   233,   24,   25,  297,  292,  201,  281,  309,  306,  406,
 /*   600 */   223,  322,  291,   41,  302,  406,  320,  306,    5,   30,
 /*   610 */   163,   49,   48,   50,   44,   16,   15,  293,  294,   11,
 /*   620 */    12,  296,  305,   23,   21,  216,  262,  165,  287,  194,
 /*   630 */   342,  146,  226,  129,  101,   97,  292,  315,  314,  316,
 /*   640 */   317,  318,  313,  312,  308,  307,  324,  311,  310,  306,
 /*   650 */   262,  262,  273,  139,   33,  335,  177,  164,  157,   49,
 /*   660 */    48,   50,   44,   16,   15,  293,  294,   11,   12,  296,
 /*   670 */   305,   23,   21,  216,  325,  265,  333,  332,  150,  216,
 /*   680 */   321,  206,  155,  114,  326,  315,  314,  316,  317,  318,
 /*   690 */   313,  312,  308,  307,  324,  311,  310,  141,  306,  262,
 /*   700 */   149,  125,   43,   92,  274,  112,  304,   49,   48,   50,
 /*   710 */    44,   16,   15,  293,  294,   11,   12,  296,  305,   23,
 /*   720 */    21,  262,  238,  119,   14,  313,  313,  313,  313,  313,
 /*   730 */   313,  313,  313,  315,  314,  316,  317,  318,  313,  312,
 /*   740 */   308,  307,  324,  311,  310,   49,   48,   50,   44,   16,
 /*   750 */    15,  293,  294,   11,   12,  296,  305,   23,   21,  107,
 /*   760 */   340,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*   770 */   198,  315,  314,  316,  317,  318,  313,  312,  308,  307,
 /*   780 */   324,  311,  310,  134,   10,  136,  209,  313,  120,    2,
 /*   790 */   106,  313,  230,  313,  313,  126,  159,  313,  230,  245,
 /*   800 */   133,  242,  162,  255,  262,   39,  133,  313,   51,  341,
 /*   810 */   313,  313,  223,  322,  291,  266,  302,  313,  223,  322,
 /*   820 */   291,  313,  302,   47,   46,  298,  248,  323,  154,  313,
 /*   830 */   102,    1,  331,  313,  187,  313,   10,  148,   90,  170,
 /*   840 */   224,    2,  106,  292,  302,   95,  313,  126,  292,  313,
 /*   850 */   313,  245,  300,  242,  313,  255,  306,   39,  195,  172,
 /*   860 */    51,  306,  313,  313,  313,  313,  313,  313,  292,  313,
 /*   870 */   313,   36,   28,  313,  313,   47,   46,  298,  248,  323,
 /*   880 */   313,  313,  102,    1,  313,  313,  204,  313,   10,  136,
 /*   890 */   218,  313,  313,    2,  106,  313,  230,   95,  313,  126,
 /*   900 */   152,  313,  230,  245,  133,  242,  151,  255,  313,   39,
 /*   910 */   133,  313,   51,  313,  313,  313,  223,  322,  291,  313,
 /*   920 */   302,  313,  223,  322,  291,  313,  302,   47,   46,  298,
 /*   930 */   248,  323,  313,  313,  102,    1,   24,  313,  297,  313,
 /*   940 */    10,  124,  218,  313,  313,    2,  106,  313,   41,   95,
 /*   950 */   243,  126,  313,  313,   30,  245,  313,  242,  313,  255,
 /*   960 */   313,   37,  195,  184,   51,  313,  313,  313,  313,  313,
 /*   970 */   313,  313,  292,  313,  313,   36,   28,  313,  313,   47,
 /*   980 */    46,  298,  248,  323,  313,  313,  102,    1,  313,  313,
 /*   990 */   204,  313,   10,  136,  211,  313,  313,    2,  106,  313,
 /*  1000 */   230,   95,  313,  126,  161,  313,  230,  245,  133,  242,
 /*  1010 */   160,  255,  313,   39,  133,  313,   51,  313,  313,  313,
 /*  1020 */   223,  322,  291,  313,  302,  313,  223,  322,  291,  313,
 /*  1030 */   302,   47,   46,  298,  248,  323,  313,  313,  102,    1,
 /*  1040 */   313,  313,  313,  313,   10,  136,  208,  313,  313,    2,
 /*  1050 */   106,  313,  313,   95,  313,  126,  313,  313,  313,  245,
 /*  1060 */   313,  242,  313,  213,  313,   39,  100,  166,   51,  313,
 /*  1070 */   313,  313,  313,  313,  313,  313,  292,  313,  313,   36,
 /*  1080 */    28,  313,  313,   47,   46,  298,  248,  323,  313,  313,
 /*  1090 */   102,    1,  313,  313,  204,  313,   10,  122,  218,  313,
 /*  1100 */   313,    2,  106,  313,  230,   95,  313,  126,  156,  313,
 /*  1110 */   230,  245,  133,  242,  158,  255,  313,   39,  133,  313,
 /*  1120 */    51,  313,  313,  313,  223,  322,  291,  313,  302,  313,
 /*  1130 */   223,  322,  291,  313,  302,   47,   46,  298,  248,  323,
 /*  1140 */   313,  313,  102,    1,  313,  313,  313,  313,   10,  136,
 /*  1150 */   207,  313,  313,    2,  106,  313,  313,   95,  313,  126,
 /*  1160 */   313,  313,  313,  245,  313,  242,  313,  255,  313,   39,
 /*  1170 */   195,  179,   51,  313,  313,  313,  313,  313,  313,  313,
 /*  1180 */   292,  313,  313,   36,   28,  313,  313,   47,   46,  298,
 /*  1190 */   248,  323,  313,  313,  102,    1,  313,  313,  204,  313,
 /*  1200 */    10,  131,  218,  313,  313,    2,  106,  313,  230,   95,
 /*  1210 */   313,  126,  153,  313,  313,  245,  133,  242,  313,  255,
 /*  1220 */   313,    7,  313,  313,   51,  313,  313,  313,  223,  322,
 /*  1230 */   291,  313,  302,  313,  313,  313,  313,  313,  313,   47,
 /*  1240 */    46,  298,  248,  323,  313,  313,  102,    1,  313,  313,
 /*  1250 */   313,  313,   10,  124,  219,  313,  313,    2,  106,  313,
 /*  1260 */   313,   95,  313,  126,  313,  313,  313,  245,  313,  242,
 /*  1270 */   313,  255,  313,   37,  195,  169,   51,  313,  313,  313,
 /*  1280 */   313,  313,  313,  313,  292,  313,  313,   36,   28,  313,
 /*  1290 */   313,   47,   46,  298,  248,  323,  313,  216,  102,  375,
 /*  1300 */   313,  313,  204,  313,   10,  124,  218,  313,  313,    2,
 /*  1310 */   106,  313,  251,   95,  313,  126,  313,  313,  313,  245,
 /*  1320 */    41,  242,  313,  255,  313,   37,   30,  313,   51,    5,
 /*  1330 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  1340 */   313,  313,  313,   47,   46,  298,  248,  323,  451,  313,
 /*  1350 */   102,  313,  146,  313,  313,  313,  313,  313,  195,  173,
 /*  1360 */   313,  313,  313,  313,  451,   95,  451,  451,  292,  451,
 /*  1370 */   451,   36,   28,  313,  313,  451,  313,  451,    5,  451,
 /*  1380 */   313,  313,  313,  313,  313,  313,  204,  313,  313,  313,
 /*  1390 */   313,  313,  313,  313,  451,  230,  313,  313,  313,  115,
 /*  1400 */   313,  146,   78,  133,  313,  451,  313,  313,  313,  313,
 /*  1410 */   313,  281,  309,  313,  313,  223,  322,  291,  313,  302,
 /*  1420 */   313,  313,  313,  313,  313,  230,  313,  313,  313,  115,
 /*  1430 */   212,  344,   78,  133,  313,  313,  313,  313,  313,  313,
 /*  1440 */   313,  281,  309,  313,  313,  223,  322,  291,  313,  302,
 /*  1450 */   230,  313,  313,  313,  144,  313,  313,   83,  133,  313,
 /*  1460 */   313,  345,  313,  313,  313,  313,  281,  309,  313,  313,
 /*  1470 */   223,  322,  291,  313,  302,  313,  313,  313,  313,  230,
 /*  1480 */   313,  313,  221,  144,  313,  313,   83,  133,  313,  313,
 /*  1490 */   313,  313,  313,  313,  313,  281,  309,  313,  313,  223,
 /*  1500 */   322,  291,  313,  302,  313,  230,  313,  313,  313,  144,
 /*  1510 */   313,  220,   83,  133,  313,  313,  313,  313,  313,  313,
 /*  1520 */   313,  281,  309,  313,  313,  223,  322,  291,  313,  302,
 /*  1530 */   313,  313,  313,  313,  230,  313,  313,  222,  144,  313,
 /*  1540 */   313,   57,  118,  143,  313,  313,  313,  313,  313,  313,
 /*  1550 */   281,  309,  313,  313,  223,  322,  291,  313,  302,  230,
 /*  1560 */   313,  313,  313,  113,  313,  313,   58,  133,  313,  313,
 /*  1570 */   313,  313,  313,  313,  313,  281,  309,  313,  313,  223,
 /*  1580 */   322,  291,  313,  302,  313,  230,  313,  313,  313,  144,
 /*  1590 */   313,  313,   67,  133,  313,  313,  313,  313,  313,  313,
 /*  1600 */   313,  281,  309,  313,  313,  223,  322,  291,  313,  302,
 /*  1610 */   313,  313,  313,  313,  230,  313,  313,  313,  144,  313,
 /*  1620 */   313,   74,  133,  313,  313,  313,  313,  313,  313,  313,
 /*  1630 */   281,  309,  313,  313,  223,  322,  291,  313,  302,  230,
 /*  1640 */   313,  313,  313,  144,  313,  313,   88,  133,  313,  313,
 /*  1650 */   313,  313,  313,  313,  313,  281,  309,  313,  313,  223,
 /*  1660 */   322,  291,  313,  302,  313,  230,  313,  313,  313,  144,
 /*  1670 */   313,  313,   77,  133,  313,  313,  313,  313,  313,  313,
 /*  1680 */   313,  281,  309,  313,  313,  223,  322,  291,  313,  302,
 /*  1690 */   313,  313,  313,  313,  230,  313,  313,  313,  144,  313,
 /*  1700 */   313,   54,  133,  313,  313,  313,  313,  313,  313,  313,
 /*  1710 */   281,  309,  313,  313,  223,  322,  291,  313,  302,  230,
 /*  1720 */   313,  313,  313,  144,  313,  313,   76,  133,  313,  313,
 /*  1730 */   313,  313,  313,  313,  313,  281,  309,  313,  313,  223,
 /*  1740 */   322,  291,  313,  302,  313,  230,  313,  313,  313,  144,
 /*  1750 */   313,  313,   63,  133,  313,  313,  313,  313,  313,  313,
 /*  1760 */   313,  281,  309,  313,  313,  223,  322,  291,  313,  302,
 /*  1770 */   313,  313,  313,  313,  230,  313,  313,  313,  144,  313,
 /*  1780 */   313,   62,  133,  313,  313,  313,  313,  313,  313,  313,
 /*  1790 */   281,  309,  313,  313,  223,  322,  291,  313,  302,  230,
 /*  1800 */   313,  313,  313,  144,  313,  313,   68,  133,  313,  313,
 /*  1810 */   313,  313,  313,  313,  313,  281,  309,  313,  313,  223,
 /*  1820 */   322,  291,  313,  302,  313,  230,  313,  313,  313,  144,
 /*  1830 */   313,  313,   69,  133,  313,  313,  313,  313,  313,  313,
 /*  1840 */   313,  281,  309,  313,  313,  223,  322,  291,  313,  302,
 /*  1850 */   313,  313,  313,  313,  230,  313,  313,  313,  144,  313,
 /*  1860 */   313,   56,  133,  313,  313,  313,  313,  313,  313,  313,
 /*  1870 */   281,  309,  313,  313,  223,  322,  291,  313,  302,  230,
 /*  1880 */   313,  313,  313,  110,  313,  313,   72,  133,  313,  313,
 /*  1890 */   313,  313,  313,  313,  313,  281,  309,  313,  313,  223,
 /*  1900 */   322,  291,  313,  302,  313,  230,  313,  313,  313,  144,
 /*  1910 */   313,  313,   75,  133,  313,  313,  313,  313,  313,  313,
 /*  1920 */   313,  281,  309,  313,  313,  223,  322,  291,  313,  302,
 /*  1930 */   313,  313,  313,  313,  230,  313,  313,  313,  144,  313,
 /*  1940 */   313,   70,  133,  313,  313,  313,  313,  313,  313,  313,
 /*  1950 */   281,  309,  313,  313,  223,  322,  291,  313,  302,  230,
 /*  1960 */   313,  313,  313,  108,  313,  313,   66,  133,  313,  313,
 /*  1970 */   313,  313,  313,  313,  313,  281,  309,  313,  313,  223,
 /*  1980 */   322,  291,  313,  302,  313,  230,  313,  313,  313,  144,
 /*  1990 */   313,  313,   53,  133,  313,  313,  313,  313,  313,  313,
 /*  2000 */   313,  281,  309,  313,  313,  223,  322,  291,  313,  302,
 /*  2010 */   313,  313,  313,  313,  230,  313,  313,  313,   91,  313,
 /*  2020 */   313,   55,  116,  313,  313,  313,  313,  313,  313,  313,
 /*  2030 */   281,  309,  313,  313,  223,  322,  291,  313,  302,  230,
 /*  2040 */   313,  313,  313,  144,  313,  313,   81,  133,  313,  313,
 /*  2050 */   313,  313,  313,  313,  313,  281,  309,  313,  313,  223,
 /*  2060 */   322,  291,  313,  302,  313,  230,  313,  313,  313,   91,
 /*  2070 */   313,  313,   52,  116,  313,  313,  313,  313,  313,  313,
 /*  2080 */   313,  281,  309,  313,  313,  215,  322,  291,  313,  302,
 /*  2090 */   313,  313,  313,  313,  230,  313,  313,  313,  144,  313,
 /*  2100 */   313,   79,  133,  313,  313,  313,  313,  313,  313,  313,
 /*  2110 */   281,  309,  313,  313,  223,  322,  291,  313,  302,  230,
 /*  2120 */   313,  313,  313,  144,  313,  313,   80,  133,  313,  313,
 /*  2130 */   313,  313,  313,  313,  313,  281,  309,  313,  313,  223,
 /*  2140 */   322,  291,  313,  302,  313,  230,  313,  313,  313,  144,
 /*  2150 */   313,  313,   60,  133,  313,  313,  313,  313,  313,  313,
 /*  2160 */   313,  281,  309,  313,  313,  223,  322,  291,  313,  302,
 /*  2170 */   313,  313,  313,  313,  230,  313,  313,  313,  144,  313,
 /*  2180 */   313,   82,  133,  313,  313,  313,  313,  313,  313,  313,
 /*  2190 */   281,  309,  313,  313,  223,  322,  291,  313,  302,  230,
 /*  2200 */   313,  313,  313,  144,  313,  313,   59,  133,  313,  313,
 /*  2210 */   313,  313,  313,  313,  313,  281,  309,  313,  313,  223,
 /*  2220 */   322,  291,  313,  302,  313,  230,  313,  313,  313,  144,
 /*  2230 */   313,  313,   84,  133,  313,  313,  313,  313,  313,  313,
 /*  2240 */   313,  281,  309,  313,  313,  223,  322,  291,  313,  302,
 /*  2250 */   313,  313,  313,  313,  230,  313,  313,  313,  144,  313,
 /*  2260 */   313,   85,  133,  313,  313,  313,  313,  313,  313,  313,
 /*  2270 */   281,  309,  313,  313,  223,  322,  291,  313,  302,  230,
 /*  2280 */   313,  313,  313,  144,  313,  313,   73,  133,  313,  313,
 /*  2290 */   313,  313,  313,  313,  313,  281,  309,  313,  313,  223,
 /*  2300 */   322,  291,  313,  302,  313,  230,  313,  313,  313,  144,
 /*  2310 */   313,  313,   64,  133,  313,  313,  313,  313,  313,  313,
 /*  2320 */   313,  281,  309,  313,  313,  223,  322,  291,  313,  302,
 /*  2330 */   313,  313,  313,  313,  230,  313,  313,  313,  109,  313,
 /*  2340 */   313,   71,  133,  313,  313,  313,  313,  313,  313,  313,
 /*  2350 */   281,  309,  313,  313,  223,  322,  291,  313,  302,  230,
 /*  2360 */   313,  313,  313,  144,  313,  313,   65,  133,  313,  313,
 /*  2370 */   313,  313,  313,  313,  313,  281,  309,  313,  313,  223,
 /*  2380 */   322,  291,  313,  302,  313,  230,  313,  313,  313,  144,
 /*  2390 */   313,  313,   61,  133,  313,  313,  313,  313,  313,  313,
 /*  2400 */   313,  281,  309,  313,  313,  223,  322,  291,  313,  302,
 /*  2410 */   313,  313,  313,  313,  230,  313,  313,  313,  144,  313,
 /*  2420 */   313,   86,  133,  313,  313,  313,  313,  313,  313,  313,
 /*  2430 */   281,  309,  313,  313,  223,  322,  291,  313,  302,  230,
 /*  2440 */   313,  313,  313,  144,  313,  313,   87,  133,  313,  313,
 /*  2450 */   313,  313,  313,  313,  313,  281,  309,  313,  313,  223,
 /*  2460 */   322,  291,  313,  302,  313,  230,  313,  313,  313,  144,
 /*  2470 */   313,  313,   89,  133,  313,  313,  313,  313,  313,  313,
 /*  2480 */   313,  281,  309,  313,  313,  223,  322,  291,  336,  302,
 /*  2490 */   313,  313,  313,  313,  313,    8,  313,  313,  313,  313,
 /*  2500 */     2,  106,  313,  313,  313,  313,  126,  313,  313,  313,
 /*  2510 */   245,  313,  242,  313,  313,  313,  313,  313,  313,  313,
 /*  2520 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  2530 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  2540 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  2550 */   313,  313,  313,  313,  313,  313,  319,  337,
    );
    static public $yy_lookahead = array(
 /*     0 */     1,   20,    3,   84,   84,    4,    5,    6,    7,    8,
 /*    10 */     9,  105,  106,   12,  108,  109,   97,   98,   17,   18,
 /*    20 */    12,   13,   14,   24,   23,    1,   58,    3,   27,   30,
 /*    30 */    29,  112,  112,  113,   35,   36,   37,   38,   39,   40,
 /*    40 */    41,   42,   43,   44,   45,   46,   47,   48,   24,   25,
 /*    50 */    12,   16,   14,   15,   30,   76,   77,   78,   79,   80,
 /*    60 */    61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
 /*    70 */    71,   72,    1,   49,   12,    1,   14,    3,    5,   12,
 /*    80 */    93,   14,   15,   13,   14,   12,   24,   91,   26,   54,
 /*    90 */    17,   18,   30,   22,   59,   24,   23,    1,   24,    3,
 /*   100 */    27,   30,   29,  107,   30,   24,   35,   36,   37,   38,
 /*   110 */    39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
 /*   120 */    24,    1,   85,   49,   57,    1,   30,    3,    1,   13,
 /*   130 */     3,   94,   61,   62,   63,   64,   65,   66,   67,   68,
 /*   140 */    69,   70,   71,   72,   24,   49,   73,   74,   24,  112,
 /*   150 */    30,   12,   13,   14,   30,   35,   36,   37,   38,   39,
 /*   160 */    40,   41,   42,   43,   44,   45,   46,   47,   48,    1,
 /*   170 */    31,    3,   12,   49,   14,   15,   49,   78,   79,   80,
 /*   180 */    20,   61,   62,   63,   64,   65,   66,   67,   68,   69,
 /*   190 */    70,   71,   72,  102,   54,   26,    9,   10,   11,   59,
 /*   200 */    33,  110,   33,   35,   36,   37,   38,   39,   40,   41,
 /*   210 */    42,   43,   44,   45,   46,   47,   48,    1,   84,   85,
 /*   220 */     1,   54,    3,   56,   12,   56,   14,   60,   94,   61,
 /*   230 */    62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
 /*   240 */    72,   90,   12,   24,   14,    1,  112,   13,   14,   30,
 /*   250 */    34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
 /*   260 */    44,   45,   46,   47,   48,    1,   84,   85,  104,   57,
 /*   270 */    26,  105,  106,   15,   16,  104,   94,   61,   62,   63,
 /*   280 */    64,   65,   66,   67,   68,   69,   70,   71,   72,   25,
 /*   290 */    54,   84,   58,   49,  112,   59,   15,   16,    1,   35,
 /*   300 */    36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
 /*   310 */    46,   47,   48,    1,   56,    3,    1,   93,   12,  112,
 /*   320 */    14,   12,   87,   88,   89,   61,   62,   63,   64,   65,
 /*   330 */    66,   67,   68,   69,   70,   71,   72,   56,   24,   24,
 /*   340 */    32,   84,   33,   33,   30,   30,   49,   35,   36,   37,
 /*   350 */    38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
 /*   360 */    48,    1,    2,   57,  108,  109,   56,   16,   60,  112,
 /*   370 */   108,  109,   79,   61,   62,   63,   64,   65,   66,   67,
 /*   380 */    68,   69,   70,   71,   72,   85,   32,   12,   34,   14,
 /*   390 */    32,   32,   34,   34,   94,   35,   36,   37,   38,   39,
 /*   400 */    40,   41,   42,   43,   44,   45,   46,   47,   48,    1,
 /*   410 */   117,    3,  112,   12,   80,   14,   82,   93,   91,   14,
 /*   420 */    91,   61,   62,   63,   64,   65,   66,   67,   68,   69,
 /*   430 */    70,   71,   72,   85,  107,   24,  107,   84,    1,    2,
 /*   440 */   109,   30,   94,   35,   36,   37,   38,   39,   40,   41,
 /*   450 */    42,   43,   44,   45,   46,   47,   48,    1,   84,   85,
 /*   460 */   112,   14,   57,   13,    3,  112,   13,   15,   94,   61,
 /*   470 */    62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
 /*   480 */    72,   20,  104,   33,  104,  107,  112,  107,   33,   14,
 /*   490 */    34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
 /*   500 */    44,   45,   46,   47,   48,    1,   54,    3,   12,    3,
 /*   510 */    14,   87,   88,   31,   91,   13,    1,   61,   62,   63,
 /*   520 */    64,   65,   66,   67,   68,   69,   70,   71,   72,   85,
 /*   530 */   107,   16,   87,   88,   12,    2,   14,   54,   94,   35,
 /*   540 */    36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
 /*   550 */    46,   47,   48,   85,   85,   85,  112,    2,   31,   14,
 /*   560 */    50,   15,   94,   94,   94,   61,   62,   63,   64,   65,
 /*   570 */    66,   67,   68,   69,   70,   71,   72,    1,    3,    2,
 /*   580 */    79,   14,   14,   92,   83,   85,   33,   86,   87,   88,
 /*   590 */    15,   12,   15,   14,   94,   19,   95,   96,  107,   24,
 /*   600 */    99,  100,  101,   24,  103,   30,    3,  107,   33,   30,
 /*   610 */    91,   35,   36,   37,   38,   39,   40,   41,   42,   43,
 /*   620 */    44,   45,   46,   47,   48,    1,  107,   85,   34,   14,
 /*   630 */    14,   56,   14,   13,   91,   91,   94,   61,   62,   63,
 /*   640 */    64,   65,   66,   67,   68,   69,   70,   71,   72,  107,
 /*   650 */   107,  107,   14,   13,   21,    3,   58,   16,   14,   35,
 /*   660 */    36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
 /*   670 */    46,   47,   48,    1,  102,   14,   94,   60,  104,    1,
 /*   680 */   110,  112,  110,   91,   60,   61,   62,   63,   64,   65,
 /*   690 */    66,   67,   68,   69,   70,   71,   72,   56,  107,  107,
 /*   700 */   104,  104,    2,  104,   10,   91,  113,   35,   36,   37,
 /*   710 */    38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
 /*   720 */    48,  107,   79,   81,   90,  118,  118,  118,  118,  118,
 /*   730 */   118,  118,  118,   61,   62,   63,   64,   65,   66,   67,
 /*   740 */    68,   69,   70,   71,   72,   35,   36,   37,   38,   39,
 /*   750 */    40,   41,   42,   43,   44,   45,   46,   47,   48,  116,
 /*   760 */   117,  118,  118,  118,  118,  118,  118,  118,  118,  118,
 /*   770 */    19,   61,   62,   63,   64,   65,   66,   67,   68,   69,
 /*   780 */    70,   71,   72,   32,   12,   13,   14,  118,   91,   17,
 /*   790 */    18,  118,   79,  118,  118,   23,   83,  118,   79,   27,
 /*   800 */    87,   29,   83,   31,  107,   33,   87,  118,   36,   96,
 /*   810 */   118,  118,   99,  100,  101,   96,  103,  118,   99,  100,
 /*   820 */   101,  118,  103,   51,   52,   53,   54,   55,   87,  118,
 /*   830 */    58,   59,   60,  118,   85,  118,   12,   13,   14,   85,
 /*   840 */    99,   17,   18,   94,  103,   73,  118,   23,   94,  118,
 /*   850 */   118,   27,   28,   29,  118,   31,  107,   33,   84,   85,
 /*   860 */    36,  107,  118,  118,  118,  118,  118,  118,   94,  118,
 /*   870 */   118,   97,   98,  118,  118,   51,   52,   53,   54,   55,
 /*   880 */   118,  118,   58,   59,  118,  118,  112,  118,   12,   13,
 /*   890 */    14,  118,  118,   17,   18,  118,   79,   73,  118,   23,
 /*   900 */    83,  118,   79,   27,   87,   29,   83,   31,  118,   33,
 /*   910 */    87,  118,   36,  118,  118,  118,   99,  100,  101,  118,
 /*   920 */   103,  118,   99,  100,  101,  118,  103,   51,   52,   53,
 /*   930 */    54,   55,  118,  118,   58,   59,   12,  118,   14,  118,
 /*   940 */    12,   13,   14,  118,  118,   17,   18,  118,   24,   73,
 /*   950 */    26,   23,  118,  118,   30,   27,  118,   29,  118,   31,
 /*   960 */   118,   33,   84,   85,   36,  118,  118,  118,  118,  118,
 /*   970 */   118,  118,   94,  118,  118,   97,   98,  118,  118,   51,
 /*   980 */    52,   53,   54,   55,  118,  118,   58,   59,  118,  118,
 /*   990 */   112,  118,   12,   13,   14,  118,  118,   17,   18,  118,
 /*  1000 */    79,   73,  118,   23,   83,  118,   79,   27,   87,   29,
 /*  1010 */    83,   31,  118,   33,   87,  118,   36,  118,  118,  118,
 /*  1020 */    99,  100,  101,  118,  103,  118,   99,  100,  101,  118,
 /*  1030 */   103,   51,   52,   53,   54,   55,  118,  118,   58,   59,
 /*  1040 */   118,  118,  118,  118,   12,   13,   14,  118,  118,   17,
 /*  1050 */    18,  118,  118,   73,  118,   23,  118,  118,  118,   27,
 /*  1060 */   118,   29,  118,   31,  118,   33,   84,   85,   36,  118,
 /*  1070 */   118,  118,  118,  118,  118,  118,   94,  118,  118,   97,
 /*  1080 */    98,  118,  118,   51,   52,   53,   54,   55,  118,  118,
 /*  1090 */    58,   59,  118,  118,  112,  118,   12,   13,   14,  118,
 /*  1100 */   118,   17,   18,  118,   79,   73,  118,   23,   83,  118,
 /*  1110 */    79,   27,   87,   29,   83,   31,  118,   33,   87,  118,
 /*  1120 */    36,  118,  118,  118,   99,  100,  101,  118,  103,  118,
 /*  1130 */    99,  100,  101,  118,  103,   51,   52,   53,   54,   55,
 /*  1140 */   118,  118,   58,   59,  118,  118,  118,  118,   12,   13,
 /*  1150 */    14,  118,  118,   17,   18,  118,  118,   73,  118,   23,
 /*  1160 */   118,  118,  118,   27,  118,   29,  118,   31,  118,   33,
 /*  1170 */    84,   85,   36,  118,  118,  118,  118,  118,  118,  118,
 /*  1180 */    94,  118,  118,   97,   98,  118,  118,   51,   52,   53,
 /*  1190 */    54,   55,  118,  118,   58,   59,  118,  118,  112,  118,
 /*  1200 */    12,   13,   14,  118,  118,   17,   18,  118,   79,   73,
 /*  1210 */   118,   23,   83,  118,  118,   27,   87,   29,  118,   31,
 /*  1220 */   118,   33,  118,  118,   36,  118,  118,  118,   99,  100,
 /*  1230 */   101,  118,  103,  118,  118,  118,  118,  118,  118,   51,
 /*  1240 */    52,   53,   54,   55,  118,  118,   58,   59,  118,  118,
 /*  1250 */   118,  118,   12,   13,   14,  118,  118,   17,   18,  118,
 /*  1260 */   118,   73,  118,   23,  118,  118,  118,   27,  118,   29,
 /*  1270 */   118,   31,  118,   33,   84,   85,   36,  118,  118,  118,
 /*  1280 */   118,  118,  118,  118,   94,  118,  118,   97,   98,  118,
 /*  1290 */   118,   51,   52,   53,   54,   55,  118,    1,   58,    3,
 /*  1300 */   118,  118,  112,  118,   12,   13,   14,  118,  118,   17,
 /*  1310 */    18,  118,   16,   73,  118,   23,  118,  118,  118,   27,
 /*  1320 */    24,   29,  118,   31,  118,   33,   30,  118,   36,   33,
 /*  1330 */   118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
 /*  1340 */   118,  118,  118,   51,   52,   53,   54,   55,    3,  118,
 /*  1350 */    58,  118,   56,  118,  118,  118,  118,  118,   84,   85,
 /*  1360 */   118,  118,  118,  118,   19,   73,   21,   22,   94,   24,
 /*  1370 */    25,   97,   98,  118,  118,   30,  118,   32,   33,   34,
 /*  1380 */   118,  118,  118,  118,  118,  118,  112,  118,  118,  118,
 /*  1390 */   118,  118,  118,  118,   49,   79,  118,  118,  118,   83,
 /*  1400 */   118,   56,   86,   87,  118,   60,  118,  118,  118,  118,
 /*  1410 */   118,   95,   96,  118,  118,   99,  100,  101,  118,  103,
 /*  1420 */   118,  118,  118,  118,  118,   79,  118,  118,  118,   83,
 /*  1430 */   114,  115,   86,   87,  118,  118,  118,  118,  118,  118,
 /*  1440 */   118,   95,   96,  118,  118,   99,  100,  101,  118,  103,
 /*  1450 */    79,  118,  118,  118,   83,  118,  118,   86,   87,  118,
 /*  1460 */   118,  115,  118,  118,  118,  118,   95,   96,  118,  118,
 /*  1470 */    99,  100,  101,  118,  103,  118,  118,  118,  118,   79,
 /*  1480 */   118,  118,  111,   83,  118,  118,   86,   87,  118,  118,
 /*  1490 */   118,  118,  118,  118,  118,   95,   96,  118,  118,   99,
 /*  1500 */   100,  101,  118,  103,  118,   79,  118,  118,  118,   83,
 /*  1510 */   118,  111,   86,   87,  118,  118,  118,  118,  118,  118,
 /*  1520 */   118,   95,   96,  118,  118,   99,  100,  101,  118,  103,
 /*  1530 */   118,  118,  118,  118,   79,  118,  118,  111,   83,  118,
 /*  1540 */   118,   86,   87,   88,  118,  118,  118,  118,  118,  118,
 /*  1550 */    95,   96,  118,  118,   99,  100,  101,  118,  103,   79,
 /*  1560 */   118,  118,  118,   83,  118,  118,   86,   87,  118,  118,
 /*  1570 */   118,  118,  118,  118,  118,   95,   96,  118,  118,   99,
 /*  1580 */   100,  101,  118,  103,  118,   79,  118,  118,  118,   83,
 /*  1590 */   118,  118,   86,   87,  118,  118,  118,  118,  118,  118,
 /*  1600 */   118,   95,   96,  118,  118,   99,  100,  101,  118,  103,
 /*  1610 */   118,  118,  118,  118,   79,  118,  118,  118,   83,  118,
 /*  1620 */   118,   86,   87,  118,  118,  118,  118,  118,  118,  118,
 /*  1630 */    95,   96,  118,  118,   99,  100,  101,  118,  103,   79,
 /*  1640 */   118,  118,  118,   83,  118,  118,   86,   87,  118,  118,
 /*  1650 */   118,  118,  118,  118,  118,   95,   96,  118,  118,   99,
 /*  1660 */   100,  101,  118,  103,  118,   79,  118,  118,  118,   83,
 /*  1670 */   118,  118,   86,   87,  118,  118,  118,  118,  118,  118,
 /*  1680 */   118,   95,   96,  118,  118,   99,  100,  101,  118,  103,
 /*  1690 */   118,  118,  118,  118,   79,  118,  118,  118,   83,  118,
 /*  1700 */   118,   86,   87,  118,  118,  118,  118,  118,  118,  118,
 /*  1710 */    95,   96,  118,  118,   99,  100,  101,  118,  103,   79,
 /*  1720 */   118,  118,  118,   83,  118,  118,   86,   87,  118,  118,
 /*  1730 */   118,  118,  118,  118,  118,   95,   96,  118,  118,   99,
 /*  1740 */   100,  101,  118,  103,  118,   79,  118,  118,  118,   83,
 /*  1750 */   118,  118,   86,   87,  118,  118,  118,  118,  118,  118,
 /*  1760 */   118,   95,   96,  118,  118,   99,  100,  101,  118,  103,
 /*  1770 */   118,  118,  118,  118,   79,  118,  118,  118,   83,  118,
 /*  1780 */   118,   86,   87,  118,  118,  118,  118,  118,  118,  118,
 /*  1790 */    95,   96,  118,  118,   99,  100,  101,  118,  103,   79,
 /*  1800 */   118,  118,  118,   83,  118,  118,   86,   87,  118,  118,
 /*  1810 */   118,  118,  118,  118,  118,   95,   96,  118,  118,   99,
 /*  1820 */   100,  101,  118,  103,  118,   79,  118,  118,  118,   83,
 /*  1830 */   118,  118,   86,   87,  118,  118,  118,  118,  118,  118,
 /*  1840 */   118,   95,   96,  118,  118,   99,  100,  101,  118,  103,
 /*  1850 */   118,  118,  118,  118,   79,  118,  118,  118,   83,  118,
 /*  1860 */   118,   86,   87,  118,  118,  118,  118,  118,  118,  118,
 /*  1870 */    95,   96,  118,  118,   99,  100,  101,  118,  103,   79,
 /*  1880 */   118,  118,  118,   83,  118,  118,   86,   87,  118,  118,
 /*  1890 */   118,  118,  118,  118,  118,   95,   96,  118,  118,   99,
 /*  1900 */   100,  101,  118,  103,  118,   79,  118,  118,  118,   83,
 /*  1910 */   118,  118,   86,   87,  118,  118,  118,  118,  118,  118,
 /*  1920 */   118,   95,   96,  118,  118,   99,  100,  101,  118,  103,
 /*  1930 */   118,  118,  118,  118,   79,  118,  118,  118,   83,  118,
 /*  1940 */   118,   86,   87,  118,  118,  118,  118,  118,  118,  118,
 /*  1950 */    95,   96,  118,  118,   99,  100,  101,  118,  103,   79,
 /*  1960 */   118,  118,  118,   83,  118,  118,   86,   87,  118,  118,
 /*  1970 */   118,  118,  118,  118,  118,   95,   96,  118,  118,   99,
 /*  1980 */   100,  101,  118,  103,  118,   79,  118,  118,  118,   83,
 /*  1990 */   118,  118,   86,   87,  118,  118,  118,  118,  118,  118,
 /*  2000 */   118,   95,   96,  118,  118,   99,  100,  101,  118,  103,
 /*  2010 */   118,  118,  118,  118,   79,  118,  118,  118,   83,  118,
 /*  2020 */   118,   86,   87,  118,  118,  118,  118,  118,  118,  118,
 /*  2030 */    95,   96,  118,  118,   99,  100,  101,  118,  103,   79,
 /*  2040 */   118,  118,  118,   83,  118,  118,   86,   87,  118,  118,
 /*  2050 */   118,  118,  118,  118,  118,   95,   96,  118,  118,   99,
 /*  2060 */   100,  101,  118,  103,  118,   79,  118,  118,  118,   83,
 /*  2070 */   118,  118,   86,   87,  118,  118,  118,  118,  118,  118,
 /*  2080 */   118,   95,   96,  118,  118,   99,  100,  101,  118,  103,
 /*  2090 */   118,  118,  118,  118,   79,  118,  118,  118,   83,  118,
 /*  2100 */   118,   86,   87,  118,  118,  118,  118,  118,  118,  118,
 /*  2110 */    95,   96,  118,  118,   99,  100,  101,  118,  103,   79,
 /*  2120 */   118,  118,  118,   83,  118,  118,   86,   87,  118,  118,
 /*  2130 */   118,  118,  118,  118,  118,   95,   96,  118,  118,   99,
 /*  2140 */   100,  101,  118,  103,  118,   79,  118,  118,  118,   83,
 /*  2150 */   118,  118,   86,   87,  118,  118,  118,  118,  118,  118,
 /*  2160 */   118,   95,   96,  118,  118,   99,  100,  101,  118,  103,
 /*  2170 */   118,  118,  118,  118,   79,  118,  118,  118,   83,  118,
 /*  2180 */   118,   86,   87,  118,  118,  118,  118,  118,  118,  118,
 /*  2190 */    95,   96,  118,  118,   99,  100,  101,  118,  103,   79,
 /*  2200 */   118,  118,  118,   83,  118,  118,   86,   87,  118,  118,
 /*  2210 */   118,  118,  118,  118,  118,   95,   96,  118,  118,   99,
 /*  2220 */   100,  101,  118,  103,  118,   79,  118,  118,  118,   83,
 /*  2230 */   118,  118,   86,   87,  118,  118,  118,  118,  118,  118,
 /*  2240 */   118,   95,   96,  118,  118,   99,  100,  101,  118,  103,
 /*  2250 */   118,  118,  118,  118,   79,  118,  118,  118,   83,  118,
 /*  2260 */   118,   86,   87,  118,  118,  118,  118,  118,  118,  118,
 /*  2270 */    95,   96,  118,  118,   99,  100,  101,  118,  103,   79,
 /*  2280 */   118,  118,  118,   83,  118,  118,   86,   87,  118,  118,
 /*  2290 */   118,  118,  118,  118,  118,   95,   96,  118,  118,   99,
 /*  2300 */   100,  101,  118,  103,  118,   79,  118,  118,  118,   83,
 /*  2310 */   118,  118,   86,   87,  118,  118,  118,  118,  118,  118,
 /*  2320 */   118,   95,   96,  118,  118,   99,  100,  101,  118,  103,
 /*  2330 */   118,  118,  118,  118,   79,  118,  118,  118,   83,  118,
 /*  2340 */   118,   86,   87,  118,  118,  118,  118,  118,  118,  118,
 /*  2350 */    95,   96,  118,  118,   99,  100,  101,  118,  103,   79,
 /*  2360 */   118,  118,  118,   83,  118,  118,   86,   87,  118,  118,
 /*  2370 */   118,  118,  118,  118,  118,   95,   96,  118,  118,   99,
 /*  2380 */   100,  101,  118,  103,  118,   79,  118,  118,  118,   83,
 /*  2390 */   118,  118,   86,   87,  118,  118,  118,  118,  118,  118,
 /*  2400 */   118,   95,   96,  118,  118,   99,  100,  101,  118,  103,
 /*  2410 */   118,  118,  118,  118,   79,  118,  118,  118,   83,  118,
 /*  2420 */   118,   86,   87,  118,  118,  118,  118,  118,  118,  118,
 /*  2430 */    95,   96,  118,  118,   99,  100,  101,  118,  103,   79,
 /*  2440 */   118,  118,  118,   83,  118,  118,   86,   87,  118,  118,
 /*  2450 */   118,  118,  118,  118,  118,   95,   96,  118,  118,   99,
 /*  2460 */   100,  101,  118,  103,  118,   79,  118,  118,  118,   83,
 /*  2470 */   118,  118,   86,   87,  118,  118,  118,  118,  118,  118,
 /*  2480 */   118,   95,   96,  118,  118,   99,  100,  101,    5,  103,
 /*  2490 */   118,  118,  118,  118,  118,   12,  118,  118,  118,  118,
 /*  2500 */    17,   18,  118,  118,  118,  118,   23,  118,  118,  118,
 /*  2510 */    27,  118,   29,  118,  118,  118,  118,  118,  118,  118,
 /*  2520 */   118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
 /*  2530 */   118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
 /*  2540 */   118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
 /*  2550 */   118,  118,  118,  118,  118,  118,   73,   74,
);
    const YY_SHIFT_USE_DFLT = -33;
    const YY_SHIFT_MAX = 256;
    static public $yy_shift_ofst = array(
 /*     0 */     1,  980, 1188,  876,  876,  876,  980, 1188,  824,  772,
 /*    10 */   824,  876,  876,  876,  876,  876,  876,  876,  876, 1136,
 /*    20 */  1084,  876,  876,  876,  876,  876, 1032,  876,  876,  876,
 /*    30 */   876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
 /*    40 */   876, 1032,  876,  928,  928, 1240, 1292, 1292, 1292, 1292,
 /*    50 */  1292, 1292,   -1,   71,  120,  120,  120,  120,  120,  360,
 /*    60 */   456,  504,  576,  312,  168,  216,  264,  408,  624,  672,
 /*    70 */   672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
 /*    80 */   672,  672,  672,  672,  672,  672,  672,  672,  710,  710,
 /*    90 */  1296,   74,   35,  315,    1, 2483,  924,   62,  579,  219,
 /*   100 */   219,  579,  234,  315,  315,  437,  450,   73,   24,   96,
 /*   110 */   124,  160,   67,  127,   38,  244,  281,  212,  258,  187,
 /*   120 */   230,  140,  401,  230,  230,  140,  411,  515,  314,  230,
 /*   130 */   140,  496,  522,  641,  450,  230,  496,  230,  140,  230,
 /*   140 */   230,   70,  450,  314,  297,  140,   70,  230,  375,  140,
 /*   150 */   140,  678,  678,  678,  351,  351,  678,  678,  678,  678,
 /*   160 */   678,  678,  -33,  306,    8,  314,  314,  314,  314,  314,
 /*   170 */   314,  314,  314,  314,  314,  314,  236,  236,  314,  314,
 /*   180 */   314,  314,  314,  314,  314,  314,  309,  314,  678,  694,
 /*   190 */   678,  678,  678,  700,  553,  678,  700,  351,   81,  351,
 /*   200 */   351,   81,  -33,  -33,  -33,  -33,  -33, 1345,  575,  167,
 /*   210 */   139,  169,  308,  452,  751,  461,  405,  577,  310,  310,
 /*   220 */   359,  358,  354,  -19,  -32,  116,  617,  618,  620,  616,
 /*   230 */   603,  615,  553,  638,  640,  644,  661,  598,  652,  594,
 /*   240 */   633,  510,  568,  502,  506,  475,  453,  455,  482,  533,
 /*   250 */   546,  567,  527,  545,  447,  483,  555,
);
    const YY_REDUCE_USE_DFLT = -95;
    const YY_REDUCE_MAX = 206;
    static public $yy_reduce_ofst = array(
 /*     0 */   -21, 1316, 1455, 1426, 1371, 1400, 1346,  501, 1986, 1720,
 /*    10 */  1935, 2015, 1535, 1560, 1695, 1586, 1960, 2040, 2360, 2386,
 /*    20 */  2120, 2095, 2200, 2335, 1506, 1480, 1880, 1775, 2146, 1826,
 /*    30 */  1800, 1746, 1855, 1906, 1615, 1666, 1640, 2066, 2306, 2280,
 /*    40 */  2175, 2255, 2226,  719,  713,  921,  823,  817, 1025, 1129,
 /*    50 */  1031,  927,  982,  774, 1274,  982, 1086, 1190,  878,  -81,
 /*    60 */   -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,
 /*    70 */   -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,
 /*    80 */   -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,
 /*    90 */   374,  134,  -94,  182,   99,  643,  542,  500,  749,   37,
 /*   100 */   300,  754,  741,  348,  444,  -80,  235,  293,  207,  207,
 /*   110 */   207,  491,  378,  207,  378,  207,  262,  378,  262,  334,
 /*   120 */   380,  166,  327,  329,  327,  166,  468,  353,  469,  423,
 /*   130 */   166,  614,  697,  262,  445,  592,  327,  544,  166,  543,
 /*   140 */   519,  572,  424,  470,  207,  166,   91,   -4,  327,  166,
 /*   150 */   166,  207,  207,  207,  262,  256,  207,  257,  207,  207,
 /*   160 */   207,  207,  207,  591,  570,  582,  582,  582,  582,  582,
 /*   170 */   582,  582,  582,  582,  582,  582,  596,  574,  582,  582,
 /*   180 */   582,  582,  582,  582,  582,  582,  597,  582,  569,  642,
 /*   190 */   569,  569,  569,  593,  599,  569,  593,  331,  634,  331,
 /*   200 */   331,  151,  171,  164,  224,  -13,  324,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(4, 5, 6, 7, 8, 9, 12, 17, 18, 23, 27, 29, ),
        /* 1 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 2 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 3 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 4 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 5 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 6 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 7 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 8 */ array(12, 13, 14, 17, 18, 23, 27, 28, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 9 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 60, 73, ),
        /* 10 */ array(12, 13, 14, 17, 18, 23, 27, 28, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 11 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 12 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 13 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 14 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 15 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 16 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 17 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 18 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 19 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 20 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 21 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 22 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 23 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 24 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 25 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 26 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 27 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 28 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 29 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 30 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 31 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 32 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 33 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 34 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 35 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 36 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 37 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 38 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 39 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 40 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 41 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 42 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 43 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 44 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 59, 73, ),
        /* 45 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 73, ),
        /* 46 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 73, ),
        /* 47 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 73, ),
        /* 48 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 73, ),
        /* 49 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 73, ),
        /* 50 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 73, ),
        /* 51 */ array(12, 13, 14, 17, 18, 23, 27, 29, 31, 33, 36, 51, 52, 53, 54, 55, 58, 73, ),
        /* 52 */ array(1, 3, 24, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 53 */ array(1, 22, 24, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 54 */ array(1, 24, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 55 */ array(1, 24, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 56 */ array(1, 24, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 57 */ array(1, 24, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 58 */ array(1, 24, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 59 */ array(1, 2, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 60 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 61 */ array(1, 3, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 62 */ array(1, 19, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 63 */ array(1, 3, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 64 */ array(1, 3, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 65 */ array(1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 66 */ array(1, 25, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 67 */ array(1, 3, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 68 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 69 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 70 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 71 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 72 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 73 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 74 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 75 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 76 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 77 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 78 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 79 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 80 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 81 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 82 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 83 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 84 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 85 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 86 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 87 */ array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 88 */ array(35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 89 */ array(35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, ),
        /* 90 */ array(1, 3, 16, 24, 30, 33, 56, ),
        /* 91 */ array(1, 3, 24, 30, 49, ),
        /* 92 */ array(16, 54, 59, ),
        /* 93 */ array(1, 24, 30, ),
        /* 94 */ array(4, 5, 6, 7, 8, 9, 12, 17, 18, 23, 27, 29, ),
        /* 95 */ array(5, 12, 17, 18, 23, 27, 29, 73, 74, ),
        /* 96 */ array(12, 14, 24, 26, 30, ),
        /* 97 */ array(12, 14, 24, 26, 30, ),
        /* 98 */ array(12, 14, 24, 30, ),
        /* 99 */ array(1, 3, 24, 30, ),
        /* 100 */ array(1, 3, 24, 30, ),
        /* 101 */ array(12, 14, 24, 30, ),
        /* 102 */ array(13, 14, 58, ),
        /* 103 */ array(1, 24, 30, ),
        /* 104 */ array(1, 24, 30, ),
        /* 105 */ array(1, 2, ),
        /* 106 */ array(13, 33, ),
        /* 107 */ array(5, 12, 17, 18, 23, 27, 29, 73, 74, ),
        /* 108 */ array(1, 3, 24, 25, 30, 49, ),
        /* 109 */ array(1, 3, 24, 30, 49, ),
        /* 110 */ array(1, 3, 24, 30, 49, ),
        /* 111 */ array(12, 14, 15, 20, ),
        /* 112 */ array(12, 14, 15, 57, ),
        /* 113 */ array(1, 3, 49, ),
        /* 114 */ array(12, 14, 15, ),
        /* 115 */ array(1, 26, 49, ),
        /* 116 */ array(15, 16, 56, ),
        /* 117 */ array(12, 14, 57, ),
        /* 118 */ array(15, 16, 56, ),
        /* 119 */ array(9, 10, 11, ),
        /* 120 */ array(12, 14, ),
        /* 121 */ array(54, 59, ),
        /* 122 */ array(12, 14, ),
        /* 123 */ array(12, 14, ),
        /* 124 */ array(12, 14, ),
        /* 125 */ array(54, 59, ),
        /* 126 */ array(24, 30, ),
        /* 127 */ array(1, 16, ),
        /* 128 */ array(24, 30, ),
        /* 129 */ array(12, 14, ),
        /* 130 */ array(54, 59, ),
        /* 131 */ array(12, 14, ),
        /* 132 */ array(12, 14, ),
        /* 133 */ array(16, 56, ),
        /* 134 */ array(13, 33, ),
        /* 135 */ array(12, 14, ),
        /* 136 */ array(12, 14, ),
        /* 137 */ array(12, 14, ),
        /* 138 */ array(54, 59, ),
        /* 139 */ array(12, 14, ),
        /* 140 */ array(12, 14, ),
        /* 141 */ array(13, 14, ),
        /* 142 */ array(13, 33, ),
        /* 143 */ array(24, 30, ),
        /* 144 */ array(1, 49, ),
        /* 145 */ array(54, 59, ),
        /* 146 */ array(13, 14, ),
        /* 147 */ array(12, 14, ),
        /* 148 */ array(12, 14, ),
        /* 149 */ array(54, 59, ),
        /* 150 */ array(54, 59, ),
        /* 151 */ array(1, ),
        /* 152 */ array(1, ),
        /* 153 */ array(1, ),
        /* 154 */ array(16, ),
        /* 155 */ array(16, ),
        /* 156 */ array(1, ),
        /* 157 */ array(1, ),
        /* 158 */ array(1, ),
        /* 159 */ array(1, ),
        /* 160 */ array(1, ),
        /* 161 */ array(1, ),
        /* 162 */ array(),
        /* 163 */ array(12, 14, 57, ),
        /* 164 */ array(12, 13, 14, ),
        /* 165 */ array(24, 30, ),
        /* 166 */ array(24, 30, ),
        /* 167 */ array(24, 30, ),
        /* 168 */ array(24, 30, ),
        /* 169 */ array(24, 30, ),
        /* 170 */ array(24, 30, ),
        /* 171 */ array(24, 30, ),
        /* 172 */ array(24, 30, ),
        /* 173 */ array(24, 30, ),
        /* 174 */ array(24, 30, ),
        /* 175 */ array(24, 30, ),
        /* 176 */ array(54, 59, ),
        /* 177 */ array(54, 59, ),
        /* 178 */ array(24, 30, ),
        /* 179 */ array(24, 30, ),
        /* 180 */ array(24, 30, ),
        /* 181 */ array(24, 30, ),
        /* 182 */ array(24, 30, ),
        /* 183 */ array(24, 30, ),
        /* 184 */ array(24, 30, ),
        /* 185 */ array(24, 30, ),
        /* 186 */ array(12, 33, ),
        /* 187 */ array(24, 30, ),
        /* 188 */ array(1, ),
        /* 189 */ array(10, ),
        /* 190 */ array(1, ),
        /* 191 */ array(1, ),
        /* 192 */ array(1, ),
        /* 193 */ array(2, ),
        /* 194 */ array(33, ),
        /* 195 */ array(1, ),
        /* 196 */ array(2, ),
        /* 197 */ array(16, ),
        /* 198 */ array(24, ),
        /* 199 */ array(16, ),
        /* 200 */ array(16, ),
        /* 201 */ array(24, ),
        /* 202 */ array(),
        /* 203 */ array(),
        /* 204 */ array(),
        /* 205 */ array(),
        /* 206 */ array(),
        /* 207 */ array(3, 19, 21, 22, 24, 25, 30, 32, 33, 34, 49, 56, 60, ),
        /* 208 */ array(3, 15, 24, 30, 33, 56, ),
        /* 209 */ array(33, 54, 56, 60, ),
        /* 210 */ array(12, 13, 14, 31, ),
        /* 211 */ array(26, 33, 56, ),
        /* 212 */ array(32, 60, ),
        /* 213 */ array(15, 54, ),
        /* 214 */ array(19, 32, ),
        /* 215 */ array(3, 20, ),
        /* 216 */ array(14, 57, ),
        /* 217 */ array(2, 15, ),
        /* 218 */ array(33, 56, ),
        /* 219 */ array(33, 56, ),
        /* 220 */ array(32, 34, ),
        /* 221 */ array(32, 34, ),
        /* 222 */ array(32, 34, ),
        /* 223 */ array(20, ),
        /* 224 */ array(58, ),
        /* 225 */ array(13, ),
        /* 226 */ array(60, ),
        /* 227 */ array(14, ),
        /* 228 */ array(13, ),
        /* 229 */ array(14, ),
        /* 230 */ array(3, ),
        /* 231 */ array(14, ),
        /* 232 */ array(33, ),
        /* 233 */ array(14, ),
        /* 234 */ array(13, ),
        /* 235 */ array(14, ),
        /* 236 */ array(14, ),
        /* 237 */ array(58, ),
        /* 238 */ array(3, ),
        /* 239 */ array(34, ),
        /* 240 */ array(21, ),
        /* 241 */ array(50, ),
        /* 242 */ array(14, ),
        /* 243 */ array(13, ),
        /* 244 */ array(3, ),
        /* 245 */ array(14, ),
        /* 246 */ array(13, ),
        /* 247 */ array(33, ),
        /* 248 */ array(31, ),
        /* 249 */ array(2, ),
        /* 250 */ array(15, ),
        /* 251 */ array(14, ),
        /* 252 */ array(31, ),
        /* 253 */ array(14, ),
        /* 254 */ array(14, ),
        /* 255 */ array(54, ),
        /* 256 */ array(2, ),
        /* 257 */ array(),
        /* 258 */ array(),
        /* 259 */ array(),
        /* 260 */ array(),
        /* 261 */ array(),
        /* 262 */ array(),
        /* 263 */ array(),
        /* 264 */ array(),
        /* 265 */ array(),
        /* 266 */ array(),
        /* 267 */ array(),
        /* 268 */ array(),
        /* 269 */ array(),
        /* 270 */ array(),
        /* 271 */ array(),
        /* 272 */ array(),
        /* 273 */ array(),
        /* 274 */ array(),
        /* 275 */ array(),
        /* 276 */ array(),
        /* 277 */ array(),
        /* 278 */ array(),
        /* 279 */ array(),
        /* 280 */ array(),
        /* 281 */ array(),
        /* 282 */ array(),
        /* 283 */ array(),
        /* 284 */ array(),
        /* 285 */ array(),
        /* 286 */ array(),
        /* 287 */ array(),
        /* 288 */ array(),
        /* 289 */ array(),
        /* 290 */ array(),
        /* 291 */ array(),
        /* 292 */ array(),
        /* 293 */ array(),
        /* 294 */ array(),
        /* 295 */ array(),
        /* 296 */ array(),
        /* 297 */ array(),
        /* 298 */ array(),
        /* 299 */ array(),
        /* 300 */ array(),
        /* 301 */ array(),
        /* 302 */ array(),
        /* 303 */ array(),
        /* 304 */ array(),
        /* 305 */ array(),
        /* 306 */ array(),
        /* 307 */ array(),
        /* 308 */ array(),
        /* 309 */ array(),
        /* 310 */ array(),
        /* 311 */ array(),
        /* 312 */ array(),
        /* 313 */ array(),
        /* 314 */ array(),
        /* 315 */ array(),
        /* 316 */ array(),
        /* 317 */ array(),
        /* 318 */ array(),
        /* 319 */ array(),
        /* 320 */ array(),
        /* 321 */ array(),
        /* 322 */ array(),
        /* 323 */ array(),
        /* 324 */ array(),
        /* 325 */ array(),
        /* 326 */ array(),
        /* 327 */ array(),
        /* 328 */ array(),
        /* 329 */ array(),
        /* 330 */ array(),
        /* 331 */ array(),
        /* 332 */ array(),
        /* 333 */ array(),
        /* 334 */ array(),
        /* 335 */ array(),
        /* 336 */ array(),
        /* 337 */ array(),
        /* 338 */ array(),
        /* 339 */ array(),
        /* 340 */ array(),
        /* 341 */ array(),
        /* 342 */ array(),
        /* 343 */ array(),
        /* 344 */ array(),
        /* 345 */ array(),
        /* 346 */ array(),
        /* 347 */ array(),
);
    static public $yy_default = array(
 /*     0 */   351,  526,  541,  497,  497,  497,  541,  541,  541,  541,
 /*    10 */   541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
 /*    20 */   541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
 /*    30 */   541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
 /*    40 */   541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
 /*    50 */   541,  541,  541,  402,  402,  402,  402,  379,  371,  541,
 /*    60 */   541,  541,  541,  541,  541,  541,  407,  541,  541,  409,
 /*    70 */   413,  407,  404,  527,  432,  412,  423,  428,  529,  431,
 /*    80 */   528,  427,  436,  496,  426,  495,  435,  384,  440,  439,
 /*    90 */   451,  415,  509,  402,  348,  541,  402,  402,  402,  459,
 /*   100 */   422,  402,  541,  402,  402,  393,  541,  541,  415,  415,
 /*   110 */   415,  541,  470,  415,  470,  415,  460,  470,  460,  541,
 /*   120 */   470,  488,  541,  541,  541,  487,  402,  396,  402,  541,
 /*   130 */   490,  541,  541,  460,  541,  541,  541,  541,  467,  541,
 /*   140 */   541,  541,  541,  381,  415,  489,  541,  541,  541,  466,
 /*   150 */   464,  444,  443,  418,  460,  506,  419,  398,  420,  425,
 /*   160 */   442,  438,  504,  471,  541,  389,  369,  368,  388,  380,
 /*   170 */   392,  391,  386,  387,  367,  382,  465,  463,  374,  373,
 /*   180 */   376,  378,  366,  377,  372,  383,  470,  390,  399,  362,
 /*   190 */   397,  459,  394,  498,  470,  422,  499,  484,  540,  510,
 /*   200 */   507,  540,  470,  470,  503,  503,  503,  417,  451,  451,
 /*   210 */   541,  451,  541,  447,  541,  441,  541,  482,  451,  437,
 /*   220 */   541,  541,  541,  441,  541,  541,  541,  541,  541,  541,
 /*   230 */   541,  541,  482,  541,  541,  541,  541,  541,  541,  541,
 /*   240 */   410,  453,  541,  541,  541,  541,  541,  508,  541,  482,
 /*   250 */   541,  541,  449,  541,  541,  447,  482,  448,  493,  450,
 /*   260 */   349,  350,  480,  473,  363,  472,  505,  483,  352,  364,
 /*   270 */   469,  417,  361,  403,  359,  411,  360,  385,  461,  474,
 /*   280 */   358,  416,  355,  354,  353,  539,  468,  414,  357,  356,
 /*   290 */   456,  455,  401,  429,  430,  536,  433,  482,  446,  485,
 /*   300 */   395,  535,  462,  486,  502,  434,  481,  519,  518,  421,
 /*   310 */   522,  521,  517,  516,  512,  511,  513,  514,  515,  530,
 /*   320 */   458,  491,  452,  454,  520,  457,  478,  476,  453,  475,
 /*   330 */   445,  479,  477,  400,  494,  537,  538,  534,  532,  531,
 /*   340 */   533,  424,  500,  501,  524,  525,  523,  492,
);
    const YYNOCODE = 119;
    const YYSTACKDEPTH = 500;
    const YYNSTATE = 348;
    const YYNRULE = 193;
    const YYERRORSYMBOL = 75;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    public static $yyFallback = array(
    );
    public function Trace($TraceFILE, $zTracePrompt)
    {
        if (!$TraceFILE) {
            $zTracePrompt = 0;
        } elseif (!$zTracePrompt) {
            $TraceFILE = 0;
        }
        $this->yyTraceFILE = $TraceFILE;
        $this->yyTracePrompt = $zTracePrompt;
    }

    public function PrintTrace()
    {
        $this->yyTraceFILE = fopen('php://output', 'w');
        $this->yyTracePrompt = '<br>';
    }

    public $yyTraceFILE;
    public $yyTracePrompt;
    public $yyidx;                    /* Index of top element in stack */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    public $yystack = array();  /* The parser's stack */

    public $yyTokenName = array(
  '$',             'VERT',          'COLON',         'RDEL',        
  'COMMENT',       'TEXT',          'STRIPON',       'STRIPOFF',    
  'BLOCKSOURCE',   'LITERALSTART',  'LITERALEND',    'LITERAL',     
  'LDEL',          'DOLLAR',        'ID',            'EQUAL',       
  'PTR',           'LDELIF',        'LDELFOR',       'SEMICOLON',   
  'INCDEC',        'TO',            'STEP',          'LDELFOREACH', 
  'SPACE',         'AS',            'APTR',          'LDELSETFILTER',
  'SMARTYBLOCKCHILDPARENT',  'LDELSLASH',     'ATTR',          'INTEGER',     
  'COMMA',         'OPENP',         'CLOSEP',        'MATH',        
  'UNIMATH',       'ANDSYM',        'ISIN',          'ISDIVBY',     
  'ISNOTDIVBY',    'ISEVEN',        'ISNOTEVEN',     'ISEVENBY',    
  'ISNOTEVENBY',   'ISODD',         'ISNOTODD',      'ISODDBY',     
  'ISNOTODDBY',    'INSTANCEOF',    'QMARK',         'NOT',         
  'TYPECAST',      'HEX',           'DOT',           'SINGLEQUOTESTRING',
  'DOUBLECOLON',   'AT',            'HATCH',         'OPENB',       
  'CLOSEB',        'EQUALS',        'NOTEQUALS',     'GREATERTHAN', 
  'LESSTHAN',      'GREATEREQUAL',  'LESSEQUAL',     'IDENTITY',    
  'NONEIDENTITY',  'MOD',           'LAND',          'LOR',         
  'LXOR',          'QUOTE',         'DOLLARID',      'error',       
  'start',         'template',      'template_element',  'smartytag',   
  'literal',       'literal_elements',  'literal_element',  'value',       
  'modifierlist',  'attributes',    'expr',          'varindexed',  
  'statement',     'statements',    'optspace',      'varvar',      
  'foraction',     'modparameters',  'attribute',     'ternary',     
  'array',         'ifcond',        'lop',           'variable',    
  'function',      'doublequoted_with_quotes',  'static_class_access',  'object',      
  'arrayindex',    'indexdef',      'bracketassigndef',  'varvarele',   
  'objectchain',   'objectelement',  'method',        'params',      
  'modifier',      'modparameter',  'arrayelements',  'arrayelement',
  'doublequoted',  'doublequotedcontent',
    );

    public static $yyRuleName = array(
 /*   0 */ "start ::= template",
 /*   1 */ "template ::= template_element",
 /*   2 */ "template ::= template template_element",
 /*   3 */ "template ::=",
 /*   4 */ "template_element ::= smartytag RDEL",
 /*   5 */ "template_element ::= COMMENT",
 /*   6 */ "template_element ::= literal",
 /*   7 */ "template_element ::= TEXT",
 /*   8 */ "template_element ::= STRIPON",
 /*   9 */ "template_element ::= STRIPOFF",
 /*  10 */ "template_element ::= BLOCKSOURCE",
 /*  11 */ "literal ::= LITERALSTART LITERALEND",
 /*  12 */ "literal ::= LITERALSTART literal_elements LITERALEND",
 /*  13 */ "literal_elements ::= literal_elements literal_element",
 /*  14 */ "literal_elements ::=",
 /*  15 */ "literal_element ::= literal",
 /*  16 */ "literal_element ::= LITERAL",
 /*  17 */ "smartytag ::= LDEL value",
 /*  18 */ "smartytag ::= LDEL value modifierlist attributes",
 /*  19 */ "smartytag ::= LDEL value attributes",
 /*  20 */ "smartytag ::= LDEL expr modifierlist attributes",
 /*  21 */ "smartytag ::= LDEL expr attributes",
 /*  22 */ "smartytag ::= LDEL DOLLAR ID EQUAL value",
 /*  23 */ "smartytag ::= LDEL DOLLAR ID EQUAL expr",
 /*  24 */ "smartytag ::= LDEL DOLLAR ID EQUAL expr attributes",
 /*  25 */ "smartytag ::= LDEL varindexed EQUAL expr attributes",
 /*  26 */ "smartytag ::= LDEL ID attributes",
 /*  27 */ "smartytag ::= LDEL ID",
 /*  28 */ "smartytag ::= LDEL ID PTR ID attributes",
 /*  29 */ "smartytag ::= LDEL ID modifierlist attributes",
 /*  30 */ "smartytag ::= LDEL ID PTR ID modifierlist attributes",
 /*  31 */ "smartytag ::= LDELIF expr",
 /*  32 */ "smartytag ::= LDELIF expr attributes",
 /*  33 */ "smartytag ::= LDELIF statement",
 /*  34 */ "smartytag ::= LDELIF statement attributes",
 /*  35 */ "smartytag ::= LDELFOR statements SEMICOLON optspace expr SEMICOLON optspace DOLLAR varvar foraction attributes",
 /*  36 */ "foraction ::= EQUAL expr",
 /*  37 */ "foraction ::= INCDEC",
 /*  38 */ "smartytag ::= LDELFOR statement TO expr attributes",
 /*  39 */ "smartytag ::= LDELFOR statement TO expr STEP expr attributes",
 /*  40 */ "smartytag ::= LDELFOREACH attributes",
 /*  41 */ "smartytag ::= LDELFOREACH SPACE value AS DOLLAR varvar attributes",
 /*  42 */ "smartytag ::= LDELFOREACH SPACE value AS DOLLAR varvar APTR DOLLAR varvar attributes",
 /*  43 */ "smartytag ::= LDELFOREACH SPACE expr AS DOLLAR varvar attributes",
 /*  44 */ "smartytag ::= LDELFOREACH SPACE expr AS DOLLAR varvar APTR DOLLAR varvar attributes",
 /*  45 */ "smartytag ::= LDELSETFILTER ID modparameters",
 /*  46 */ "smartytag ::= LDELSETFILTER ID modparameters modifierlist",
 /*  47 */ "smartytag ::= LDEL SMARTYBLOCKCHILDPARENT",
 /*  48 */ "smartytag ::= LDELSLASH ID",
 /*  49 */ "smartytag ::= LDELSLASH ID modifierlist",
 /*  50 */ "smartytag ::= LDELSLASH ID PTR ID",
 /*  51 */ "smartytag ::= LDELSLASH ID PTR ID modifierlist",
 /*  52 */ "attributes ::= attributes attribute",
 /*  53 */ "attributes ::= attribute",
 /*  54 */ "attributes ::=",
 /*  55 */ "attribute ::= SPACE ID EQUAL ID",
 /*  56 */ "attribute ::= ATTR expr",
 /*  57 */ "attribute ::= ATTR value",
 /*  58 */ "attribute ::= SPACE ID",
 /*  59 */ "attribute ::= SPACE expr",
 /*  60 */ "attribute ::= SPACE value",
 /*  61 */ "attribute ::= SPACE INTEGER EQUAL expr",
 /*  62 */ "statements ::= statement",
 /*  63 */ "statements ::= statements COMMA statement",
 /*  64 */ "statement ::= DOLLAR varvar EQUAL expr",
 /*  65 */ "statement ::= varindexed EQUAL expr",
 /*  66 */ "statement ::= OPENP statement CLOSEP",
 /*  67 */ "expr ::= value",
 /*  68 */ "expr ::= ternary",
 /*  69 */ "expr ::= DOLLAR ID COLON ID",
 /*  70 */ "expr ::= expr MATH value",
 /*  71 */ "expr ::= expr UNIMATH value",
 /*  72 */ "expr ::= expr ANDSYM value",
 /*  73 */ "expr ::= array",
 /*  74 */ "expr ::= expr modifierlist",
 /*  75 */ "expr ::= expr ifcond expr",
 /*  76 */ "expr ::= expr ISIN array",
 /*  77 */ "expr ::= expr ISIN value",
 /*  78 */ "expr ::= expr lop expr",
 /*  79 */ "expr ::= expr ISDIVBY expr",
 /*  80 */ "expr ::= expr ISNOTDIVBY expr",
 /*  81 */ "expr ::= expr ISEVEN",
 /*  82 */ "expr ::= expr ISNOTEVEN",
 /*  83 */ "expr ::= expr ISEVENBY expr",
 /*  84 */ "expr ::= expr ISNOTEVENBY expr",
 /*  85 */ "expr ::= expr ISODD",
 /*  86 */ "expr ::= expr ISNOTODD",
 /*  87 */ "expr ::= expr ISODDBY expr",
 /*  88 */ "expr ::= expr ISNOTODDBY expr",
 /*  89 */ "expr ::= value INSTANCEOF ID",
 /*  90 */ "expr ::= value INSTANCEOF value",
 /*  91 */ "ternary ::= OPENP expr CLOSEP QMARK DOLLAR ID COLON expr",
 /*  92 */ "ternary ::= OPENP expr CLOSEP QMARK expr COLON expr",
 /*  93 */ "value ::= variable",
 /*  94 */ "value ::= UNIMATH value",
 /*  95 */ "value ::= NOT value",
 /*  96 */ "value ::= TYPECAST value",
 /*  97 */ "value ::= variable INCDEC",
 /*  98 */ "value ::= HEX",
 /*  99 */ "value ::= INTEGER",
 /* 100 */ "value ::= INTEGER DOT INTEGER",
 /* 101 */ "value ::= INTEGER DOT",
 /* 102 */ "value ::= DOT INTEGER",
 /* 103 */ "value ::= ID",
 /* 104 */ "value ::= function",
 /* 105 */ "value ::= OPENP expr CLOSEP",
 /* 106 */ "value ::= SINGLEQUOTESTRING",
 /* 107 */ "value ::= doublequoted_with_quotes",
 /* 108 */ "value ::= ID DOUBLECOLON static_class_access",
 /* 109 */ "value ::= varindexed DOUBLECOLON static_class_access",
 /* 110 */ "value ::= smartytag RDEL",
 /* 111 */ "value ::= value modifierlist",
 /* 112 */ "variable ::= varindexed",
 /* 113 */ "variable ::= DOLLAR varvar AT ID",
 /* 114 */ "variable ::= object",
 /* 115 */ "variable ::= HATCH ID HATCH",
 /* 116 */ "variable ::= HATCH ID HATCH arrayindex",
 /* 117 */ "variable ::= HATCH variable HATCH",
 /* 118 */ "variable ::= HATCH variable HATCH arrayindex",
 /* 119 */ "varindexed ::= DOLLAR varvar arrayindex",
 /* 120 */ "arrayindex ::= arrayindex indexdef",
 /* 121 */ "arrayindex ::= arrayindex bracketassigndef",
 /* 122 */ "arrayindex ::=",
 /* 123 */ "indexdef ::= DOT DOLLAR varvar",
 /* 124 */ "indexdef ::= DOT DOLLAR varvar AT ID",
 /* 125 */ "indexdef ::= DOT ID",
 /* 126 */ "indexdef ::= DOT INTEGER",
 /* 127 */ "indexdef ::= DOT LDEL expr RDEL",
 /* 128 */ "indexdef ::= OPENB ID CLOSEB",
 /* 129 */ "indexdef ::= OPENB ID DOT ID CLOSEB",
 /* 130 */ "indexdef ::= OPENB expr CLOSEB",
 /* 131 */ "bracketassigndef ::= OPENB CLOSEB",
 /* 132 */ "varvar ::= varvarele",
 /* 133 */ "varvar ::= varvar varvarele",
 /* 134 */ "varvarele ::= ID",
 /* 135 */ "varvarele ::= LDEL expr RDEL",
 /* 136 */ "object ::= varindexed objectchain",
 /* 137 */ "objectchain ::= objectelement",
 /* 138 */ "objectchain ::= objectchain objectelement",
 /* 139 */ "objectelement ::= PTR ID arrayindex",
 /* 140 */ "objectelement ::= PTR DOLLAR varvar arrayindex",
 /* 141 */ "objectelement ::= PTR LDEL expr RDEL arrayindex",
 /* 142 */ "objectelement ::= PTR ID LDEL expr RDEL arrayindex",
 /* 143 */ "objectelement ::= PTR method",
 /* 144 */ "function ::= ID OPENP params CLOSEP",
 /* 145 */ "method ::= ID OPENP params CLOSEP",
 /* 146 */ "method ::= DOLLAR ID OPENP params CLOSEP",
 /* 147 */ "params ::= params COMMA expr",
 /* 148 */ "params ::= expr",
 /* 149 */ "params ::=",
 /* 150 */ "modifierlist ::= modifierlist modifier modparameters",
 /* 151 */ "modifierlist ::= modifier modparameters",
 /* 152 */ "modifier ::= VERT AT ID",
 /* 153 */ "modifier ::= VERT ID",
 /* 154 */ "modparameters ::= modparameters modparameter",
 /* 155 */ "modparameters ::=",
 /* 156 */ "modparameter ::= COLON value",
 /* 157 */ "modparameter ::= COLON array",
 /* 158 */ "static_class_access ::= method",
 /* 159 */ "static_class_access ::= method objectchain",
 /* 160 */ "static_class_access ::= ID",
 /* 161 */ "static_class_access ::= DOLLAR ID arrayindex",
 /* 162 */ "static_class_access ::= DOLLAR ID arrayindex objectchain",
 /* 163 */ "ifcond ::= EQUALS",
 /* 164 */ "ifcond ::= NOTEQUALS",
 /* 165 */ "ifcond ::= GREATERTHAN",
 /* 166 */ "ifcond ::= LESSTHAN",
 /* 167 */ "ifcond ::= GREATEREQUAL",
 /* 168 */ "ifcond ::= LESSEQUAL",
 /* 169 */ "ifcond ::= IDENTITY",
 /* 170 */ "ifcond ::= NONEIDENTITY",
 /* 171 */ "ifcond ::= MOD",
 /* 172 */ "lop ::= LAND",
 /* 173 */ "lop ::= LOR",
 /* 174 */ "lop ::= LXOR",
 /* 175 */ "array ::= OPENB arrayelements CLOSEB",
 /* 176 */ "arrayelements ::= arrayelement",
 /* 177 */ "arrayelements ::= arrayelements COMMA arrayelement",
 /* 178 */ "arrayelements ::=",
 /* 179 */ "arrayelement ::= value APTR expr",
 /* 180 */ "arrayelement ::= ID APTR expr",
 /* 181 */ "arrayelement ::= expr",
 /* 182 */ "doublequoted_with_quotes ::= QUOTE QUOTE",
 /* 183 */ "doublequoted_with_quotes ::= QUOTE doublequoted QUOTE",
 /* 184 */ "doublequoted ::= doublequoted doublequotedcontent",
 /* 185 */ "doublequoted ::= doublequotedcontent",
 /* 186 */ "doublequotedcontent ::= DOLLARID",
 /* 187 */ "doublequotedcontent ::= LDEL variable RDEL",
 /* 188 */ "doublequotedcontent ::= LDEL expr RDEL",
 /* 189 */ "doublequotedcontent ::= smartytag RDEL",
 /* 190 */ "doublequotedcontent ::= TEXT",
 /* 191 */ "optspace ::= SPACE",
 /* 192 */ "optspace ::=",
    );

    public function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count($this->yyTokenName)) {
            return $this->yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    public static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    public function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        if ($this->yyTraceFILE && $this->yyidx >= 0) {
            fwrite($this->yyTraceFILE,
                $this->yyTracePrompt . 'Popping ' . $this->yyTokenName[$yytos->major] .
                    "\n");
        }
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;

        return $yymajor;
    }

    public function __destruct()
    {
        while ($this->yystack !== Array()) {
            $this->yy_pop_parser_stack();
        }
        if (is_resource($this->yyTraceFILE)) {
            fclose($this->yyTraceFILE);
        }
    }

    public function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                $expected = array_merge($expected, self::$yyExpectedTokens[$nextstate]);
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;

                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new TP_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
    $this->yyidx = $yyidx;
    $this->yystack = $stack;

        return array_unique($expected);
    }

    public function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;

                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new TP_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token) {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;

        return true;
    }

   public function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;

        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
                if ($this->yyTraceFILE) {
                    fwrite($this->yyTraceFILE, $this->yyTracePrompt . "FALLBACK " .
                        $this->yyTokenName[$iLookAhead] . " => " .
                        $this->yyTokenName[$iFallback] . "\n");
                }

                return $this->yy_find_shift_action($iFallback);
            }

            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    public function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    public function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            if ($this->yyTraceFILE) {
                fprintf($this->yyTraceFILE, "%sStack Overflow!\n", $this->yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
#line 78 "smarty_internal_templateparser.y"

    $this->internalError = true;
    $this->compiler->trigger_template_error("Stack overflow in template parser");
#line 1693 "smarty_internal_templateparser.php"

            return;
        }
        $yytos = new TP_yyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
        if ($this->yyTraceFILE && $this->yyidx > 0) {
            fprintf($this->yyTraceFILE, "%sShift %d\n", $this->yyTracePrompt,
                $yyNewState);
            fprintf($this->yyTraceFILE, "%sStack:", $this->yyTracePrompt);
            for ($i = 1; $i <= $this->yyidx; $i++) {
                fprintf($this->yyTraceFILE, " %s",
                    $this->yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite($this->yyTraceFILE,"\n");
        }
    }

    public static $yyRuleInfo = array(
  array( 'lhs' => 76, 'rhs' => 1 ),
  array( 'lhs' => 77, 'rhs' => 1 ),
  array( 'lhs' => 77, 'rhs' => 2 ),
  array( 'lhs' => 77, 'rhs' => 0 ),
  array( 'lhs' => 78, 'rhs' => 2 ),
  array( 'lhs' => 78, 'rhs' => 1 ),
  array( 'lhs' => 78, 'rhs' => 1 ),
  array( 'lhs' => 78, 'rhs' => 1 ),
  array( 'lhs' => 78, 'rhs' => 1 ),
  array( 'lhs' => 78, 'rhs' => 1 ),
  array( 'lhs' => 78, 'rhs' => 1 ),
  array( 'lhs' => 80, 'rhs' => 2 ),
  array( 'lhs' => 80, 'rhs' => 3 ),
  array( 'lhs' => 81, 'rhs' => 2 ),
  array( 'lhs' => 81, 'rhs' => 0 ),
  array( 'lhs' => 82, 'rhs' => 1 ),
  array( 'lhs' => 82, 'rhs' => 1 ),
  array( 'lhs' => 79, 'rhs' => 2 ),
  array( 'lhs' => 79, 'rhs' => 4 ),
  array( 'lhs' => 79, 'rhs' => 3 ),
  array( 'lhs' => 79, 'rhs' => 4 ),
  array( 'lhs' => 79, 'rhs' => 3 ),
  array( 'lhs' => 79, 'rhs' => 5 ),
  array( 'lhs' => 79, 'rhs' => 5 ),
  array( 'lhs' => 79, 'rhs' => 6 ),
  array( 'lhs' => 79, 'rhs' => 5 ),
  array( 'lhs' => 79, 'rhs' => 3 ),
  array( 'lhs' => 79, 'rhs' => 2 ),
  array( 'lhs' => 79, 'rhs' => 5 ),
  array( 'lhs' => 79, 'rhs' => 4 ),
  array( 'lhs' => 79, 'rhs' => 6 ),
  array( 'lhs' => 79, 'rhs' => 2 ),
  array( 'lhs' => 79, 'rhs' => 3 ),
  array( 'lhs' => 79, 'rhs' => 2 ),
  array( 'lhs' => 79, 'rhs' => 3 ),
  array( 'lhs' => 79, 'rhs' => 11 ),
  array( 'lhs' => 92, 'rhs' => 2 ),
  array( 'lhs' => 92, 'rhs' => 1 ),
  array( 'lhs' => 79, 'rhs' => 5 ),
  array( 'lhs' => 79, 'rhs' => 7 ),
  array( 'lhs' => 79, 'rhs' => 2 ),
  array( 'lhs' => 79, 'rhs' => 7 ),
  array( 'lhs' => 79, 'rhs' => 10 ),
  array( 'lhs' => 79, 'rhs' => 7 ),
  array( 'lhs' => 79, 'rhs' => 10 ),
  array( 'lhs' => 79, 'rhs' => 3 ),
  array( 'lhs' => 79, 'rhs' => 4 ),
  array( 'lhs' => 79, 'rhs' => 2 ),
  array( 'lhs' => 79, 'rhs' => 2 ),
  array( 'lhs' => 79, 'rhs' => 3 ),
  array( 'lhs' => 79, 'rhs' => 4 ),
  array( 'lhs' => 79, 'rhs' => 5 ),
  array( 'lhs' => 85, 'rhs' => 2 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 0 ),
  array( 'lhs' => 94, 'rhs' => 4 ),
  array( 'lhs' => 94, 'rhs' => 2 ),
  array( 'lhs' => 94, 'rhs' => 2 ),
  array( 'lhs' => 94, 'rhs' => 2 ),
  array( 'lhs' => 94, 'rhs' => 2 ),
  array( 'lhs' => 94, 'rhs' => 2 ),
  array( 'lhs' => 94, 'rhs' => 4 ),
  array( 'lhs' => 89, 'rhs' => 1 ),
  array( 'lhs' => 89, 'rhs' => 3 ),
  array( 'lhs' => 88, 'rhs' => 4 ),
  array( 'lhs' => 88, 'rhs' => 3 ),
  array( 'lhs' => 88, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 1 ),
  array( 'lhs' => 86, 'rhs' => 1 ),
  array( 'lhs' => 86, 'rhs' => 4 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 1 ),
  array( 'lhs' => 86, 'rhs' => 2 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 2 ),
  array( 'lhs' => 86, 'rhs' => 2 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 2 ),
  array( 'lhs' => 86, 'rhs' => 2 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 95, 'rhs' => 8 ),
  array( 'lhs' => 95, 'rhs' => 7 ),
  array( 'lhs' => 83, 'rhs' => 1 ),
  array( 'lhs' => 83, 'rhs' => 2 ),
  array( 'lhs' => 83, 'rhs' => 2 ),
  array( 'lhs' => 83, 'rhs' => 2 ),
  array( 'lhs' => 83, 'rhs' => 2 ),
  array( 'lhs' => 83, 'rhs' => 1 ),
  array( 'lhs' => 83, 'rhs' => 1 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 2 ),
  array( 'lhs' => 83, 'rhs' => 2 ),
  array( 'lhs' => 83, 'rhs' => 1 ),
  array( 'lhs' => 83, 'rhs' => 1 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 1 ),
  array( 'lhs' => 83, 'rhs' => 1 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 2 ),
  array( 'lhs' => 83, 'rhs' => 2 ),
  array( 'lhs' => 99, 'rhs' => 1 ),
  array( 'lhs' => 99, 'rhs' => 4 ),
  array( 'lhs' => 99, 'rhs' => 1 ),
  array( 'lhs' => 99, 'rhs' => 3 ),
  array( 'lhs' => 99, 'rhs' => 4 ),
  array( 'lhs' => 99, 'rhs' => 3 ),
  array( 'lhs' => 99, 'rhs' => 4 ),
  array( 'lhs' => 87, 'rhs' => 3 ),
  array( 'lhs' => 104, 'rhs' => 2 ),
  array( 'lhs' => 104, 'rhs' => 2 ),
  array( 'lhs' => 104, 'rhs' => 0 ),
  array( 'lhs' => 105, 'rhs' => 3 ),
  array( 'lhs' => 105, 'rhs' => 5 ),
  array( 'lhs' => 105, 'rhs' => 2 ),
  array( 'lhs' => 105, 'rhs' => 2 ),
  array( 'lhs' => 105, 'rhs' => 4 ),
  array( 'lhs' => 105, 'rhs' => 3 ),
  array( 'lhs' => 105, 'rhs' => 5 ),
  array( 'lhs' => 105, 'rhs' => 3 ),
  array( 'lhs' => 106, 'rhs' => 2 ),
  array( 'lhs' => 91, 'rhs' => 1 ),
  array( 'lhs' => 91, 'rhs' => 2 ),
  array( 'lhs' => 107, 'rhs' => 1 ),
  array( 'lhs' => 107, 'rhs' => 3 ),
  array( 'lhs' => 103, 'rhs' => 2 ),
  array( 'lhs' => 108, 'rhs' => 1 ),
  array( 'lhs' => 108, 'rhs' => 2 ),
  array( 'lhs' => 109, 'rhs' => 3 ),
  array( 'lhs' => 109, 'rhs' => 4 ),
  array( 'lhs' => 109, 'rhs' => 5 ),
  array( 'lhs' => 109, 'rhs' => 6 ),
  array( 'lhs' => 109, 'rhs' => 2 ),
  array( 'lhs' => 100, 'rhs' => 4 ),
  array( 'lhs' => 110, 'rhs' => 4 ),
  array( 'lhs' => 110, 'rhs' => 5 ),
  array( 'lhs' => 111, 'rhs' => 3 ),
  array( 'lhs' => 111, 'rhs' => 1 ),
  array( 'lhs' => 111, 'rhs' => 0 ),
  array( 'lhs' => 84, 'rhs' => 3 ),
  array( 'lhs' => 84, 'rhs' => 2 ),
  array( 'lhs' => 112, 'rhs' => 3 ),
  array( 'lhs' => 112, 'rhs' => 2 ),
  array( 'lhs' => 93, 'rhs' => 2 ),
  array( 'lhs' => 93, 'rhs' => 0 ),
  array( 'lhs' => 113, 'rhs' => 2 ),
  array( 'lhs' => 113, 'rhs' => 2 ),
  array( 'lhs' => 102, 'rhs' => 1 ),
  array( 'lhs' => 102, 'rhs' => 2 ),
  array( 'lhs' => 102, 'rhs' => 1 ),
  array( 'lhs' => 102, 'rhs' => 3 ),
  array( 'lhs' => 102, 'rhs' => 4 ),
  array( 'lhs' => 97, 'rhs' => 1 ),
  array( 'lhs' => 97, 'rhs' => 1 ),
  array( 'lhs' => 97, 'rhs' => 1 ),
  array( 'lhs' => 97, 'rhs' => 1 ),
  array( 'lhs' => 97, 'rhs' => 1 ),
  array( 'lhs' => 97, 'rhs' => 1 ),
  array( 'lhs' => 97, 'rhs' => 1 ),
  array( 'lhs' => 97, 'rhs' => 1 ),
  array( 'lhs' => 97, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 96, 'rhs' => 3 ),
  array( 'lhs' => 114, 'rhs' => 1 ),
  array( 'lhs' => 114, 'rhs' => 3 ),
  array( 'lhs' => 114, 'rhs' => 0 ),
  array( 'lhs' => 115, 'rhs' => 3 ),
  array( 'lhs' => 115, 'rhs' => 3 ),
  array( 'lhs' => 115, 'rhs' => 1 ),
  array( 'lhs' => 101, 'rhs' => 2 ),
  array( 'lhs' => 101, 'rhs' => 3 ),
  array( 'lhs' => 116, 'rhs' => 2 ),
  array( 'lhs' => 116, 'rhs' => 1 ),
  array( 'lhs' => 117, 'rhs' => 1 ),
  array( 'lhs' => 117, 'rhs' => 3 ),
  array( 'lhs' => 117, 'rhs' => 3 ),
  array( 'lhs' => 117, 'rhs' => 2 ),
  array( 'lhs' => 117, 'rhs' => 1 ),
  array( 'lhs' => 90, 'rhs' => 1 ),
  array( 'lhs' => 90, 'rhs' => 0 ),
    );

    public static $yyReduceMap = array(
        0 => 0,
        1 => 1,
        2 => 1,
        4 => 4,
        5 => 5,
        6 => 6,
        7 => 7,
        8 => 8,
        9 => 9,
        10 => 10,
        11 => 11,
        14 => 11,
        192 => 11,
        12 => 12,
        66 => 12,
        127 => 12,
        130 => 12,
        13 => 13,
        94 => 13,
        96 => 13,
        97 => 13,
        121 => 13,
        159 => 13,
        15 => 15,
        16 => 15,
        37 => 15,
        59 => 15,
        60 => 15,
        67 => 15,
        68 => 15,
        73 => 15,
        93 => 15,
        98 => 15,
        99 => 15,
        104 => 15,
        106 => 15,
        107 => 15,
        114 => 15,
        126 => 15,
        132 => 15,
        158 => 15,
        160 => 15,
        176 => 15,
        181 => 15,
        191 => 15,
        17 => 17,
        18 => 18,
        19 => 19,
        21 => 19,
        20 => 20,
        22 => 22,
        23 => 22,
        24 => 24,
        25 => 25,
        26 => 26,
        27 => 27,
        28 => 28,
        29 => 29,
        30 => 30,
        31 => 31,
        33 => 31,
        32 => 32,
        34 => 32,
        35 => 35,
        36 => 36,
        38 => 38,
        39 => 39,
        40 => 40,
        41 => 41,
        43 => 41,
        42 => 42,
        44 => 42,
        45 => 45,
        46 => 46,
        47 => 47,
        48 => 48,
        49 => 49,
        50 => 50,
        51 => 51,
        52 => 52,
        53 => 53,
        62 => 53,
        148 => 53,
        152 => 53,
        156 => 53,
        157 => 53,
        54 => 54,
        149 => 54,
        155 => 54,
        55 => 55,
        56 => 56,
        57 => 56,
        58 => 58,
        61 => 61,
        63 => 63,
        64 => 64,
        65 => 64,
        69 => 69,
        70 => 70,
        71 => 70,
        72 => 70,
        74 => 74,
        111 => 74,
        75 => 75,
        78 => 75,
        89 => 75,
        76 => 76,
        77 => 77,
        79 => 79,
        80 => 80,
        81 => 81,
        86 => 81,
        82 => 82,
        85 => 82,
        83 => 83,
        88 => 83,
        84 => 84,
        87 => 84,
        90 => 90,
        91 => 91,
        92 => 92,
        95 => 95,
        100 => 100,
        101 => 101,
        102 => 102,
        103 => 103,
        105 => 105,
        108 => 108,
        109 => 109,
        110 => 110,
        112 => 112,
        113 => 113,
        115 => 115,
        116 => 116,
        117 => 117,
        118 => 118,
        119 => 119,
        120 => 120,
        122 => 122,
        178 => 122,
        123 => 123,
        124 => 124,
        125 => 125,
        128 => 128,
        129 => 129,
        131 => 131,
        133 => 133,
        134 => 134,
        135 => 135,
        136 => 136,
        137 => 137,
        138 => 138,
        139 => 139,
        140 => 140,
        141 => 141,
        142 => 142,
        143 => 143,
        144 => 144,
        145 => 145,
        146 => 146,
        147 => 147,
        150 => 150,
        151 => 151,
        153 => 153,
        154 => 154,
        161 => 161,
        162 => 162,
        163 => 163,
        164 => 164,
        165 => 165,
        166 => 166,
        167 => 167,
        168 => 168,
        169 => 169,
        170 => 170,
        171 => 171,
        172 => 172,
        173 => 173,
        174 => 174,
        175 => 175,
        177 => 177,
        179 => 179,
        180 => 180,
        182 => 182,
        183 => 183,
        184 => 184,
        185 => 185,
        186 => 186,
        187 => 187,
        188 => 188,
        189 => 189,
        190 => 190,
    );
#line 89 "smarty_internal_templateparser.y"
    function yy_r0(){
    $this->_retvalue = $this->root_buffer->to_smarty_php();
    }
#line 2108 "smarty_internal_templateparser.php"
#line 97 "smarty_internal_templateparser.y"
    function yy_r1(){
    if ($this->yystack[$this->yyidx + 0]->minor != null) {
        $this->current_buffer->append_subtree($this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 2115 "smarty_internal_templateparser.php"
#line 117 "smarty_internal_templateparser.y"
    function yy_r4(){
    if ($this->compiler->has_code) {
        $tmp =''; foreach ($this->compiler->prefix_code as $code) {$tmp.=$code;} $this->compiler->prefix_code=array();
        $this->_retvalue = new _smarty_tag($this, $this->compiler->processNocacheCode($tmp.$this->yystack[$this->yyidx + -1]->minor,true));
    } else {
        $this->_retvalue = null;
    }
    $this->compiler->has_variable_string = false;
    $this->block_nesting_level = count($this->compiler->_tag_stack);
    }
#line 2127 "smarty_internal_templateparser.php"
#line 129 "smarty_internal_templateparser.y"
    function yy_r5(){
    $this->_retvalue = null;
    }
#line 2132 "smarty_internal_templateparser.php"
#line 134 "smarty_internal_templateparser.y"
    function yy_r6(){
    $this->_retvalue = new _smarty_text($this, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2137 "smarty_internal_templateparser.php"
#line 139 "smarty_internal_templateparser.y"
    function yy_r7(){
        if ($this->strip) {
            $this->_retvalue = new _smarty_text($this, preg_replace('![\t ]*[\r\n]+[\t ]*!', '', $this->yystack[$this->yyidx + 0]->minor));
        } else {
            $this->_retvalue = new _smarty_text($this, $this->yystack[$this->yyidx + 0]->minor);
        }
    }
#line 2146 "smarty_internal_templateparser.php"
#line 148 "smarty_internal_templateparser.y"
    function yy_r8(){
    $this->strip = true;
    }
#line 2151 "smarty_internal_templateparser.php"
#line 152 "smarty_internal_templateparser.y"
    function yy_r9(){
    $this->strip = false;
    }
#line 2156 "smarty_internal_templateparser.php"
#line 156 "smarty_internal_templateparser.y"
    function yy_r10(){
        if ($this->strip) {
            SMARTY_INTERNAL_COMPILE_BLOCK::blockSource($this->compiler, preg_replace('![\t ]*[\r\n]+[\t ]*!', '', $this->yystack[$this->yyidx + 0]->minor));
        } else {
            SMARTY_INTERNAL_COMPILE_BLOCK::blockSource($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
        }
    }
#line 2165 "smarty_internal_templateparser.php"
#line 165 "smarty_internal_templateparser.y"
    function yy_r11(){
    $this->_retvalue = '';
    }
#line 2170 "smarty_internal_templateparser.php"
#line 169 "smarty_internal_templateparser.y"
    function yy_r12(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 2175 "smarty_internal_templateparser.php"
#line 173 "smarty_internal_templateparser.y"
    function yy_r13(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2180 "smarty_internal_templateparser.php"
#line 181 "smarty_internal_templateparser.y"
    function yy_r15(){
    $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 2185 "smarty_internal_templateparser.php"
#line 195 "smarty_internal_templateparser.y"
    function yy_r17(){
    $this->_retvalue = $this->compiler->compileTag('private_print_expression',array(),array('value'=>$this->yystack[$this->yyidx + 0]->minor));
    }
#line 2190 "smarty_internal_templateparser.php"
#line 199 "smarty_internal_templateparser.y"
    function yy_r18(){
    $this->_retvalue = $this->compiler->compileTag('private_print_expression',$this->yystack[$this->yyidx + 0]->minor,array('value'=>$this->yystack[$this->yyidx + -2]->minor, 'modifierlist'=>$this->yystack[$this->yyidx + -1]->minor));
    }
#line 2195 "smarty_internal_templateparser.php"
#line 203 "smarty_internal_templateparser.y"
    function yy_r19(){
    $this->_retvalue = $this->compiler->compileTag('private_print_expression',$this->yystack[$this->yyidx + 0]->minor,array('value'=>$this->yystack[$this->yyidx + -1]->minor));
    }
#line 2200 "smarty_internal_templateparser.php"
#line 207 "smarty_internal_templateparser.y"
    function yy_r20(){
    $this->_retvalue = $this->compiler->compileTag('private_print_expression',$this->yystack[$this->yyidx + 0]->minor,array('value'=>$this->yystack[$this->yyidx + -2]->minor,'modifierlist'=>$this->yystack[$this->yyidx + -1]->minor));
    }
#line 2205 "smarty_internal_templateparser.php"
#line 220 "smarty_internal_templateparser.y"
    function yy_r22(){
    $this->_retvalue = $this->compiler->compileTag('assign',array(array('value'=>$this->yystack[$this->yyidx + 0]->minor),array('var'=>"'".$this->yystack[$this->yyidx + -2]->minor."'")));
    }
#line 2210 "smarty_internal_templateparser.php"
#line 228 "smarty_internal_templateparser.y"
    function yy_r24(){
    $this->_retvalue = $this->compiler->compileTag('assign',array_merge(array(array('value'=>$this->yystack[$this->yyidx + -1]->minor),array('var'=>"'".$this->yystack[$this->yyidx + -3]->minor."'")),$this->yystack[$this->yyidx + 0]->minor));
    }
#line 2215 "smarty_internal_templateparser.php"
#line 232 "smarty_internal_templateparser.y"
    function yy_r25(){
    $this->_retvalue = $this->compiler->compileTag('assign',array_merge(array(array('value'=>$this->yystack[$this->yyidx + -1]->minor),array('var'=>$this->yystack[$this->yyidx + -3]->minor['var'])),$this->yystack[$this->yyidx + 0]->minor),array('smarty_internal_index'=>$this->yystack[$this->yyidx + -3]->minor['smarty_internal_index']));
    }
#line 2220 "smarty_internal_templateparser.php"
#line 237 "smarty_internal_templateparser.y"
    function yy_r26(){
    $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2225 "smarty_internal_templateparser.php"
#line 241 "smarty_internal_templateparser.y"
    function yy_r27(){
    $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + 0]->minor,array());
    }
#line 2230 "smarty_internal_templateparser.php"
#line 246 "smarty_internal_templateparser.y"
    function yy_r28(){
    $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -3]->minor,$this->yystack[$this->yyidx + 0]->minor,array('object_methode'=>$this->yystack[$this->yyidx + -1]->minor));
    }
#line 2235 "smarty_internal_templateparser.php"
#line 251 "smarty_internal_templateparser.y"
    function yy_r29(){
    $this->_retvalue = "ob_start();\n".$this->compiler->compileTag($this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor).'echo ';
    $this->_retvalue .= $this->compiler->compileTag('private_modifier',array(),array('modifierlist'=>$this->yystack[$this->yyidx + -1]->minor,'value'=>'ob_get_clean()')) . ";\n";
    }
#line 2241 "smarty_internal_templateparser.php"
#line 257 "smarty_internal_templateparser.y"
    function yy_r30(){
    $this->_retvalue = "ob_start();\n".$this->compiler->compileTag($this->yystack[$this->yyidx + -4]->minor,$this->yystack[$this->yyidx + 0]->minor,array('object_methode'=>$this->yystack[$this->yyidx + -2]->minor)).'echo ';
    $this->_retvalue .= $this->compiler->compileTag('private_modifier',array(),array('modifierlist'=>$this->yystack[$this->yyidx + -1]->minor,'value'=>'ob_get_clean()')) . ";\n";
    }
#line 2247 "smarty_internal_templateparser.php"
#line 263 "smarty_internal_templateparser.y"
    function yy_r31(){
    $tag = trim(substr($this->yystack[$this->yyidx + -1]->minor,$this->lex->ldel_length));
    $this->_retvalue = $this->compiler->compileTag(($tag == 'else if')? 'elseif' : $tag,array(),array('if condition'=>$this->yystack[$this->yyidx + 0]->minor));
    }
#line 2253 "smarty_internal_templateparser.php"
#line 268 "smarty_internal_templateparser.y"
    function yy_r32(){
    $tag = trim(substr($this->yystack[$this->yyidx + -2]->minor,$this->lex->ldel_length));
    $this->_retvalue = $this->compiler->compileTag(($tag == 'else if')? 'elseif' : $tag,$this->yystack[$this->yyidx + 0]->minor,array('if condition'=>$this->yystack[$this->yyidx + -1]->minor));
    }
#line 2259 "smarty_internal_templateparser.php"
#line 284 "smarty_internal_templateparser.y"
    function yy_r35(){
    $this->_retvalue = $this->compiler->compileTag('for',array_merge($this->yystack[$this->yyidx + 0]->minor,array(array('start'=>$this->yystack[$this->yyidx + -9]->minor),array('ifexp'=>$this->yystack[$this->yyidx + -6]->minor),array('var'=>$this->yystack[$this->yyidx + -2]->minor),array('step'=>$this->yystack[$this->yyidx + -1]->minor))),1);
    }
#line 2264 "smarty_internal_templateparser.php"
#line 288 "smarty_internal_templateparser.y"
    function yy_r36(){
    $this->_retvalue = '='.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2269 "smarty_internal_templateparser.php"
#line 296 "smarty_internal_templateparser.y"
    function yy_r38(){
    $this->_retvalue = $this->compiler->compileTag('for',array_merge($this->yystack[$this->yyidx + 0]->minor,array(array('start'=>$this->yystack[$this->yyidx + -3]->minor),array('to'=>$this->yystack[$this->yyidx + -1]->minor))),0);
    }
#line 2274 "smarty_internal_templateparser.php"
#line 300 "smarty_internal_templateparser.y"
    function yy_r39(){
    $this->_retvalue = $this->compiler->compileTag('for',array_merge($this->yystack[$this->yyidx + 0]->minor,array(array('start'=>$this->yystack[$this->yyidx + -5]->minor),array('to'=>$this->yystack[$this->yyidx + -3]->minor),array('step'=>$this->yystack[$this->yyidx + -1]->minor))),0);
    }
#line 2279 "smarty_internal_templateparser.php"
#line 305 "smarty_internal_templateparser.y"
    function yy_r40(){
    $this->_retvalue = $this->compiler->compileTag('foreach',$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2284 "smarty_internal_templateparser.php"
#line 310 "smarty_internal_templateparser.y"
    function yy_r41(){
    $this->_retvalue = $this->compiler->compileTag('foreach',array_merge($this->yystack[$this->yyidx + 0]->minor,array(array('from'=>$this->yystack[$this->yyidx + -4]->minor),array('item'=>$this->yystack[$this->yyidx + -1]->minor))));
    }
#line 2289 "smarty_internal_templateparser.php"
#line 314 "smarty_internal_templateparser.y"
    function yy_r42(){
    $this->_retvalue = $this->compiler->compileTag('foreach',array_merge($this->yystack[$this->yyidx + 0]->minor,array(array('from'=>$this->yystack[$this->yyidx + -7]->minor),array('item'=>$this->yystack[$this->yyidx + -1]->minor),array('key'=>$this->yystack[$this->yyidx + -4]->minor))));
    }
#line 2294 "smarty_internal_templateparser.php"
#line 327 "smarty_internal_templateparser.y"
    function yy_r45(){
    $this->_retvalue = $this->compiler->compileTag('setfilter',array(),array('modifier_list'=>array(array_merge(array($this->yystack[$this->yyidx + -1]->minor),$this->yystack[$this->yyidx + 0]->minor))));
    }
#line 2299 "smarty_internal_templateparser.php"
#line 331 "smarty_internal_templateparser.y"
    function yy_r46(){
    $this->_retvalue = $this->compiler->compileTag('setfilter',array(),array('modifier_list'=>array_merge(array(array_merge(array($this->yystack[$this->yyidx + -2]->minor),$this->yystack[$this->yyidx + -1]->minor)),$this->yystack[$this->yyidx + 0]->minor)));
    }
#line 2304 "smarty_internal_templateparser.php"
#line 336 "smarty_internal_templateparser.y"
    function yy_r47(){
    $j = strrpos($this->yystack[$this->yyidx + 0]->minor,'.');
    if ($this->yystack[$this->yyidx + 0]->minor[$j+1] == 'c') {
        // {$smarty.block.child}
        $this->_retvalue = SMARTY_INTERNAL_COMPILE_BLOCK::compileChildBlock($this->compiler);
    } else {
        // {$smarty.block.parent}
        $this->_retvalue = SMARTY_INTERNAL_COMPILE_BLOCK::compileParentBlock($this->compiler);
    }
    }
#line 2316 "smarty_internal_templateparser.php"
#line 349 "smarty_internal_templateparser.y"
    function yy_r48(){
    $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + 0]->minor.'close',array());
    }
#line 2321 "smarty_internal_templateparser.php"
#line 353 "smarty_internal_templateparser.y"
    function yy_r49(){
    $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -1]->minor.'close',array(),array('modifier_list'=>$this->yystack[$this->yyidx + 0]->minor));
    }
#line 2326 "smarty_internal_templateparser.php"
#line 358 "smarty_internal_templateparser.y"
    function yy_r50(){
    $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -2]->minor.'close',array(),array('object_methode'=>$this->yystack[$this->yyidx + 0]->minor));
    }
#line 2331 "smarty_internal_templateparser.php"
#line 362 "smarty_internal_templateparser.y"
    function yy_r51(){
    $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -3]->minor.'close',array(),array('object_methode'=>$this->yystack[$this->yyidx + -1]->minor, 'modifier_list'=>$this->yystack[$this->yyidx + 0]->minor));
    }
#line 2336 "smarty_internal_templateparser.php"
#line 370 "smarty_internal_templateparser.y"
    function yy_r52(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    $this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 2342 "smarty_internal_templateparser.php"
#line 376 "smarty_internal_templateparser.y"
    function yy_r53(){
    $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2347 "smarty_internal_templateparser.php"
#line 381 "smarty_internal_templateparser.y"
    function yy_r54(){
    $this->_retvalue = array();
    }
#line 2352 "smarty_internal_templateparser.php"
#line 386 "smarty_internal_templateparser.y"
    function yy_r55(){
    if (preg_match('~^true$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>'true');
    } elseif (preg_match('~^false$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>'false');
    } elseif (preg_match('~^null$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>'null');
    } else {
        $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>"'".$this->yystack[$this->yyidx + 0]->minor."'");
    }
    }
#line 2365 "smarty_internal_templateparser.php"
#line 398 "smarty_internal_templateparser.y"
    function yy_r56(){
    $this->_retvalue = array(trim($this->yystack[$this->yyidx + -1]->minor," =\n\r\t")=>$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2370 "smarty_internal_templateparser.php"
#line 406 "smarty_internal_templateparser.y"
    function yy_r58(){
    $this->_retvalue = "'".$this->yystack[$this->yyidx + 0]->minor."'";
    }
#line 2375 "smarty_internal_templateparser.php"
#line 418 "smarty_internal_templateparser.y"
    function yy_r61(){
    $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2380 "smarty_internal_templateparser.php"
#line 431 "smarty_internal_templateparser.y"
    function yy_r63(){
    $this->yystack[$this->yyidx + -2]->minor[]=$this->yystack[$this->yyidx + 0]->minor;
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor;
    }
#line 2386 "smarty_internal_templateparser.php"
#line 436 "smarty_internal_templateparser.y"
    function yy_r64(){
    $this->_retvalue = array('var' => $this->yystack[$this->yyidx + -2]->minor, 'value'=>$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2391 "smarty_internal_templateparser.php"
#line 464 "smarty_internal_templateparser.y"
    function yy_r69(){
    $this->_retvalue = '$_smarty_tpl->getStreamVariable(\''. $this->yystack[$this->yyidx + -2]->minor .'://'. $this->yystack[$this->yyidx + 0]->minor . '\')';
    }
#line 2396 "smarty_internal_templateparser.php"
#line 469 "smarty_internal_templateparser.y"
    function yy_r70(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor . trim($this->yystack[$this->yyidx + -1]->minor) . $this->yystack[$this->yyidx + 0]->minor;
    }
#line 2401 "smarty_internal_templateparser.php"
#line 488 "smarty_internal_templateparser.y"
    function yy_r74(){
    $this->_retvalue = $this->compiler->compileTag('private_modifier',array(),array('value'=>$this->yystack[$this->yyidx + -1]->minor,'modifierlist'=>$this->yystack[$this->yyidx + 0]->minor));
    }
#line 2406 "smarty_internal_templateparser.php"
#line 494 "smarty_internal_templateparser.y"
    function yy_r75(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2411 "smarty_internal_templateparser.php"
#line 498 "smarty_internal_templateparser.y"
    function yy_r76(){
    $this->_retvalue = 'in_array('.$this->yystack[$this->yyidx + -2]->minor.','.$this->yystack[$this->yyidx + 0]->minor.')';
    }
#line 2416 "smarty_internal_templateparser.php"
#line 502 "smarty_internal_templateparser.y"
    function yy_r77(){
    $this->_retvalue = 'in_array('.$this->yystack[$this->yyidx + -2]->minor.',(array)'.$this->yystack[$this->yyidx + 0]->minor.')';
    }
#line 2421 "smarty_internal_templateparser.php"
#line 510 "smarty_internal_templateparser.y"
    function yy_r79(){
    $this->_retvalue = '!('.$this->yystack[$this->yyidx + -2]->minor.' % '.$this->yystack[$this->yyidx + 0]->minor.')';
    }
#line 2426 "smarty_internal_templateparser.php"
#line 514 "smarty_internal_templateparser.y"
    function yy_r80(){
    $this->_retvalue = '('.$this->yystack[$this->yyidx + -2]->minor.' % '.$this->yystack[$this->yyidx + 0]->minor.')';
    }
#line 2431 "smarty_internal_templateparser.php"
#line 518 "smarty_internal_templateparser.y"
    function yy_r81(){
    $this->_retvalue = '!(1 & '.$this->yystack[$this->yyidx + -1]->minor.')';
    }
#line 2436 "smarty_internal_templateparser.php"
#line 522 "smarty_internal_templateparser.y"
    function yy_r82(){
    $this->_retvalue = '(1 & '.$this->yystack[$this->yyidx + -1]->minor.')';
    }
#line 2441 "smarty_internal_templateparser.php"
#line 526 "smarty_internal_templateparser.y"
    function yy_r83(){
    $this->_retvalue = '!(1 & '.$this->yystack[$this->yyidx + -2]->minor.' / '.$this->yystack[$this->yyidx + 0]->minor.')';
    }
#line 2446 "smarty_internal_templateparser.php"
#line 530 "smarty_internal_templateparser.y"
    function yy_r84(){
    $this->_retvalue = '(1 & '.$this->yystack[$this->yyidx + -2]->minor.' / '.$this->yystack[$this->yyidx + 0]->minor.')';
    }
#line 2451 "smarty_internal_templateparser.php"
#line 554 "smarty_internal_templateparser.y"
    function yy_r90(){
    self::$prefix_number++;
    $this->compiler->prefix_code[] = '$_tmp'.self::$prefix_number.'='.$this->yystack[$this->yyidx + 0]->minor.";\n";
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.'$_tmp'.self::$prefix_number;
    }
#line 2458 "smarty_internal_templateparser.php"
#line 563 "smarty_internal_templateparser.y"
    function yy_r91(){
    $this->_retvalue = $this->yystack[$this->yyidx + -6]->minor.' ? '. $this->compileVariable("'".$this->yystack[$this->yyidx + -2]->minor."'") . ' : '.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2463 "smarty_internal_templateparser.php"
#line 567 "smarty_internal_templateparser.y"
    function yy_r92(){
    $this->_retvalue = $this->yystack[$this->yyidx + -5]->minor.' ? '.$this->yystack[$this->yyidx + -2]->minor.' : '.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2468 "smarty_internal_templateparser.php"
#line 582 "smarty_internal_templateparser.y"
    function yy_r95(){
    $this->_retvalue = '!'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2473 "smarty_internal_templateparser.php"
#line 603 "smarty_internal_templateparser.y"
    function yy_r100(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'.'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2478 "smarty_internal_templateparser.php"
#line 607 "smarty_internal_templateparser.y"
    function yy_r101(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.'.';
    }
#line 2483 "smarty_internal_templateparser.php"
#line 611 "smarty_internal_templateparser.y"
    function yy_r102(){
    $this->_retvalue = '.'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2488 "smarty_internal_templateparser.php"
#line 616 "smarty_internal_templateparser.y"
    function yy_r103(){
    if (preg_match('~^true$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = 'true';
    } elseif (preg_match('~^false$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = 'false';
    } elseif (preg_match('~^null$~i', $this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = 'null';
    } else {
        $this->_retvalue = "'".$this->yystack[$this->yyidx + 0]->minor."'";
    }
    }
#line 2501 "smarty_internal_templateparser.php"
#line 634 "smarty_internal_templateparser.y"
    function yy_r105(){
    $this->_retvalue = "(". $this->yystack[$this->yyidx + -1]->minor .")";
    }
#line 2506 "smarty_internal_templateparser.php"
#line 649 "smarty_internal_templateparser.y"
    function yy_r108(){
    if (!$this->security || isset($this->smarty->registered_classes[$this->yystack[$this->yyidx + -2]->minor]) || $this->smarty->security_policy->isTrustedStaticClass($this->yystack[$this->yyidx + -2]->minor, $this->compiler)) {
        if (isset($this->smarty->registered_classes[$this->yystack[$this->yyidx + -2]->minor])) {
            $this->_retvalue = $this->smarty->registered_classes[$this->yystack[$this->yyidx + -2]->minor].'::'.$this->yystack[$this->yyidx + 0]->minor;
        } else {
            $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'::'.$this->yystack[$this->yyidx + 0]->minor;
        }
    } else {
        $this->compiler->trigger_template_error ("static class '".$this->yystack[$this->yyidx + -2]->minor."' is undefined or not allowed by security setting");
    }
    }
#line 2519 "smarty_internal_templateparser.php"
#line 661 "smarty_internal_templateparser.y"
    function yy_r109(){
    if ($this->yystack[$this->yyidx + -2]->minor['var'] == '\'smarty\'') {
        $this->_retvalue =  $this->compiler->compileTag('private_special_variable',array(),$this->yystack[$this->yyidx + -2]->minor['smarty_internal_index']).'::'.$this->yystack[$this->yyidx + 0]->minor;
    } else {
        $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + -2]->minor['var']).$this->yystack[$this->yyidx + -2]->minor['smarty_internal_index'].'::'.$this->yystack[$this->yyidx + 0]->minor;
    }
    }
#line 2528 "smarty_internal_templateparser.php"
#line 670 "smarty_internal_templateparser.y"
    function yy_r110(){
    self::$prefix_number++;
    $this->compiler->prefix_code[] = 'ob_start();'.$this->yystack[$this->yyidx + -1]->minor.'$_tmp'.self::$prefix_number.'=ob_get_clean();';
    $this->_retvalue = '$_tmp'.self::$prefix_number;
    }
#line 2535 "smarty_internal_templateparser.php"
#line 685 "smarty_internal_templateparser.y"
    function yy_r112(){
    if ($this->yystack[$this->yyidx + 0]->minor['var'] == '\'smarty\'') {
        $smarty_var = $this->compiler->compileTag('private_special_variable',array(),$this->yystack[$this->yyidx + 0]->minor['smarty_internal_index']);
        $this->_retvalue = $smarty_var;
    } else {
        // used for array reset,next,prev,end,current
        $this->last_variable = $this->yystack[$this->yyidx + 0]->minor['var'];
        $this->last_index = $this->yystack[$this->yyidx + 0]->minor['smarty_internal_index'];
        $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + 0]->minor['var']).$this->yystack[$this->yyidx + 0]->minor['smarty_internal_index'];
    }
    }
#line 2548 "smarty_internal_templateparser.php"
#line 698 "smarty_internal_templateparser.y"
    function yy_r113(){
    $this->_retvalue = '$_smarty_tpl->tpl_vars['. $this->yystack[$this->yyidx + -2]->minor .']->'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2553 "smarty_internal_templateparser.php"
#line 708 "smarty_internal_templateparser.y"
    function yy_r115(){
    $this->_retvalue = '$_smarty_tpl->getConfigVariable(\''. $this->yystack[$this->yyidx + -1]->minor .'\')';
    }
#line 2558 "smarty_internal_templateparser.php"
#line 712 "smarty_internal_templateparser.y"
    function yy_r116(){
    $this->_retvalue = '(is_array($tmp = $_smarty_tpl->getConfigVariable(\''. $this->yystack[$this->yyidx + -2]->minor .'\')) ? $tmp'.$this->yystack[$this->yyidx + 0]->minor.' :null)';
    }
#line 2563 "smarty_internal_templateparser.php"
#line 716 "smarty_internal_templateparser.y"
    function yy_r117(){
    $this->_retvalue = '$_smarty_tpl->getConfigVariable('. $this->yystack[$this->yyidx + -1]->minor .')';
    }
#line 2568 "smarty_internal_templateparser.php"
#line 720 "smarty_internal_templateparser.y"
    function yy_r118(){
    $this->_retvalue = '(is_array($tmp = $_smarty_tpl->getConfigVariable('. $this->yystack[$this->yyidx + -2]->minor .')) ? $tmp'.$this->yystack[$this->yyidx + 0]->minor.' : null)';
    }
#line 2573 "smarty_internal_templateparser.php"
#line 724 "smarty_internal_templateparser.y"
    function yy_r119(){
    $this->_retvalue = array('var'=>$this->yystack[$this->yyidx + -1]->minor, 'smarty_internal_index'=>$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2578 "smarty_internal_templateparser.php"
#line 732 "smarty_internal_templateparser.y"
    function yy_r120(){
    $this->_retvalue = $this->compileSafeLookupWithBase($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2583 "smarty_internal_templateparser.php"
#line 741 "smarty_internal_templateparser.y"
    function yy_r122(){
    return;
    }
#line 2588 "smarty_internal_templateparser.php"
#line 747 "smarty_internal_templateparser.y"
    function yy_r123(){
    $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2593 "smarty_internal_templateparser.php"
#line 751 "smarty_internal_templateparser.y"
    function yy_r124(){
    $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + -2]->minor).'->'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2598 "smarty_internal_templateparser.php"
#line 755 "smarty_internal_templateparser.y"
    function yy_r125(){
    $this->_retvalue = "'". $this->yystack[$this->yyidx + 0]->minor ."'";
    }
#line 2603 "smarty_internal_templateparser.php"
#line 768 "smarty_internal_templateparser.y"
    function yy_r128(){
    $this->_retvalue = $this->compiler->compileTag('private_special_variable',array(),'[\'section\'][\''.$this->yystack[$this->yyidx + -1]->minor.'\'][\'index\']');
    }
#line 2608 "smarty_internal_templateparser.php"
#line 772 "smarty_internal_templateparser.y"
    function yy_r129(){
    $this->_retvalue = $this->compiler->compileTag('private_special_variable',array(),'[\'section\'][\''.$this->yystack[$this->yyidx + -3]->minor.'\'][\''.$this->yystack[$this->yyidx + -1]->minor.'\']');
    }
#line 2613 "smarty_internal_templateparser.php"
#line 782 "smarty_internal_templateparser.y"
    function yy_r131(){
    $this->_retvalue = '[]';
    }
#line 2618 "smarty_internal_templateparser.php"
#line 794 "smarty_internal_templateparser.y"
    function yy_r133(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.'.'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2623 "smarty_internal_templateparser.php"
#line 799 "smarty_internal_templateparser.y"
    function yy_r134(){
    $this->_retvalue = '\''.$this->yystack[$this->yyidx + 0]->minor.'\'';
    }
#line 2628 "smarty_internal_templateparser.php"
#line 804 "smarty_internal_templateparser.y"
    function yy_r135(){
    $this->_retvalue = '('.$this->yystack[$this->yyidx + -1]->minor.')';
    }
#line 2633 "smarty_internal_templateparser.php"
#line 811 "smarty_internal_templateparser.y"
    function yy_r136(){
    if ($this->yystack[$this->yyidx + -1]->minor['var'] == '\'smarty\'') {
        $this->_retvalue =  $this->compiler->compileTag('private_special_variable',array(),$this->yystack[$this->yyidx + -1]->minor['smarty_internal_index']).$this->yystack[$this->yyidx + 0]->minor;
    } else {
        $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + -1]->minor['var']).$this->yystack[$this->yyidx + -1]->minor['smarty_internal_index'].$this->yystack[$this->yyidx + 0]->minor;
    }
    }
#line 2642 "smarty_internal_templateparser.php"
#line 820 "smarty_internal_templateparser.y"
    function yy_r137(){
    $this->_retvalue  = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 2647 "smarty_internal_templateparser.php"
#line 825 "smarty_internal_templateparser.y"
    function yy_r138(){
    $this->_retvalue  = $this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2652 "smarty_internal_templateparser.php"
#line 830 "smarty_internal_templateparser.y"
    function yy_r139(){
    if ($this->security && substr($this->yystack[$this->yyidx + -1]->minor,0,1) == '_') {
        $this->compiler->trigger_template_error (self::Err1);
    }
    $this->_retvalue = '->'.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2660 "smarty_internal_templateparser.php"
#line 837 "smarty_internal_templateparser.y"
    function yy_r140(){
    if ($this->security) {
        $this->compiler->trigger_template_error (self::Err2);
    }
    $this->_retvalue = '->{'.$this->compileVariable($this->yystack[$this->yyidx + -1]->minor).$this->yystack[$this->yyidx + 0]->minor.'}';
    }
#line 2668 "smarty_internal_templateparser.php"
#line 844 "smarty_internal_templateparser.y"
    function yy_r141(){
    if ($this->security) {
        $this->compiler->trigger_template_error (self::Err2);
    }
    $this->_retvalue = '->{'.$this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + 0]->minor.'}';
    }
#line 2676 "smarty_internal_templateparser.php"
#line 851 "smarty_internal_templateparser.y"
    function yy_r142(){
    if ($this->security) {
        $this->compiler->trigger_template_error (self::Err2);
    }
    $this->_retvalue = '->{\''.$this->yystack[$this->yyidx + -4]->minor.'\'.'.$this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + 0]->minor.'}';
    }
#line 2684 "smarty_internal_templateparser.php"
#line 859 "smarty_internal_templateparser.y"
    function yy_r143(){
    $this->_retvalue = '->'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2689 "smarty_internal_templateparser.php"
#line 867 "smarty_internal_templateparser.y"
    function yy_r144(){
    if (!$this->security || $this->smarty->security_policy->isTrustedPhpFunction($this->yystack[$this->yyidx + -3]->minor, $this->compiler)) {
        if (strcasecmp($this->yystack[$this->yyidx + -3]->minor,'isset') === 0 || strcasecmp($this->yystack[$this->yyidx + -3]->minor,'empty') === 0 || strcasecmp($this->yystack[$this->yyidx + -3]->minor,'array') === 0 || is_callable($this->yystack[$this->yyidx + -3]->minor)) {
            $func_name = strtolower($this->yystack[$this->yyidx + -3]->minor);
            if ($func_name == 'isset') {
                if (count($this->yystack[$this->yyidx + -1]->minor) == 0) {
                    $this->compiler->trigger_template_error ('Illegal number of paramer in "isset()"');
                }
                $par = implode(',',$this->yystack[$this->yyidx + -1]->minor);
                if (strncasecmp($par,'$_smarty_tpl->getConfigVariable',strlen('$_smarty_tpl->getConfigVariable')) === 0) {
                    self::$prefix_number++;
                    $this->compiler->prefix_code[] = '$_tmp'.self::$prefix_number.'='.str_replace(')',', false)',$par).";\n";
                    $isset_par = '$_tmp'.self::$prefix_number;
                } else {
                    $isset_par=str_replace("')->value","',null,true,false)->value",$par);
                }
                $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". $isset_par .")";
            } elseif (in_array($func_name,array('empty','reset','current','end','prev','next'))){
                if (count($this->yystack[$this->yyidx + -1]->minor) != 1) {
                    $this->compiler->trigger_template_error ('Illegal number of paramer in "empty()"');
                }
                if ($func_name == 'empty') {
                    $this->_retvalue = $func_name.'('.str_replace("')->value","',null,true,false)->value",$this->yystack[$this->yyidx + -1]->minor[0]).')';
                } else {
                    $this->_retvalue = $func_name.'('.$this->yystack[$this->yyidx + -1]->minor[0].')';
                }
            } else {
                $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". implode(',',$this->yystack[$this->yyidx + -1]->minor) .")";
            }
        } else {
            $this->compiler->trigger_template_error ("unknown function \"" . $this->yystack[$this->yyidx + -3]->minor . "\"");
        }
    }
    }
#line 2725 "smarty_internal_templateparser.php"
#line 905 "smarty_internal_templateparser.y"
    function yy_r145(){
    if ($this->security && substr($this->yystack[$this->yyidx + -3]->minor,0,1) == '_') {
        $this->compiler->trigger_template_error (self::Err1);
    }
    $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". implode(',',$this->yystack[$this->yyidx + -1]->minor) .")";
    }
#line 2733 "smarty_internal_templateparser.php"
#line 912 "smarty_internal_templateparser.y"
    function yy_r146(){
    if ($this->security) {
        $this->compiler->trigger_template_error (self::Err2);
    }
    self::$prefix_number++;
    $this->compiler->prefix_code[] = '$_tmp'.self::$prefix_number.'='.$this->compileVariable("'".$this->yystack[$this->yyidx + -3]->minor."'").';';
    $this->_retvalue = '$_tmp'.self::$prefix_number.'('. implode(',',$this->yystack[$this->yyidx + -1]->minor) .')';
    }
#line 2743 "smarty_internal_templateparser.php"
#line 923 "smarty_internal_templateparser.y"
    function yy_r147(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -2]->minor,array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 2748 "smarty_internal_templateparser.php"
#line 940 "smarty_internal_templateparser.y"
    function yy_r150(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -2]->minor,array(array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor)));
    }
#line 2753 "smarty_internal_templateparser.php"
#line 944 "smarty_internal_templateparser.y"
    function yy_r151(){
    $this->_retvalue = array(array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor));
    }
#line 2758 "smarty_internal_templateparser.php"
#line 952 "smarty_internal_templateparser.y"
    function yy_r153(){
    $this->_retvalue =  array($this->yystack[$this->yyidx + 0]->minor);
    }
#line 2763 "smarty_internal_templateparser.php"
#line 960 "smarty_internal_templateparser.y"
    function yy_r154(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 2768 "smarty_internal_templateparser.php"
#line 994 "smarty_internal_templateparser.y"
    function yy_r161(){
    $this->_retvalue = '$'.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2773 "smarty_internal_templateparser.php"
#line 999 "smarty_internal_templateparser.y"
    function yy_r162(){
    $this->_retvalue = '$'.$this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2778 "smarty_internal_templateparser.php"
#line 1005 "smarty_internal_templateparser.y"
    function yy_r163(){
    $this->_retvalue = '==';
    }
#line 2783 "smarty_internal_templateparser.php"
#line 1009 "smarty_internal_templateparser.y"
    function yy_r164(){
    $this->_retvalue = '!=';
    }
#line 2788 "smarty_internal_templateparser.php"
#line 1013 "smarty_internal_templateparser.y"
    function yy_r165(){
    $this->_retvalue = '>';
    }
#line 2793 "smarty_internal_templateparser.php"
#line 1017 "smarty_internal_templateparser.y"
    function yy_r166(){
    $this->_retvalue = '<';
    }
#line 2798 "smarty_internal_templateparser.php"
#line 1021 "smarty_internal_templateparser.y"
    function yy_r167(){
    $this->_retvalue = '>=';
    }
#line 2803 "smarty_internal_templateparser.php"
#line 1025 "smarty_internal_templateparser.y"
    function yy_r168(){
    $this->_retvalue = '<=';
    }
#line 2808 "smarty_internal_templateparser.php"
#line 1029 "smarty_internal_templateparser.y"
    function yy_r169(){
    $this->_retvalue = '===';
    }
#line 2813 "smarty_internal_templateparser.php"
#line 1033 "smarty_internal_templateparser.y"
    function yy_r170(){
    $this->_retvalue = '!==';
    }
#line 2818 "smarty_internal_templateparser.php"
#line 1037 "smarty_internal_templateparser.y"
    function yy_r171(){
    $this->_retvalue = '%';
    }
#line 2823 "smarty_internal_templateparser.php"
#line 1041 "smarty_internal_templateparser.y"
    function yy_r172(){
    $this->_retvalue = '&&';
    }
#line 2828 "smarty_internal_templateparser.php"
#line 1045 "smarty_internal_templateparser.y"
    function yy_r173(){
    $this->_retvalue = '||';
    }
#line 2833 "smarty_internal_templateparser.php"
#line 1049 "smarty_internal_templateparser.y"
    function yy_r174(){
    $this->_retvalue = ' XOR ';
    }
#line 2838 "smarty_internal_templateparser.php"
#line 1056 "smarty_internal_templateparser.y"
    function yy_r175(){
    $this->_retvalue = 'array('.$this->yystack[$this->yyidx + -1]->minor.')';
    }
#line 2843 "smarty_internal_templateparser.php"
#line 1064 "smarty_internal_templateparser.y"
    function yy_r177(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.','.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2848 "smarty_internal_templateparser.php"
#line 1072 "smarty_internal_templateparser.y"
    function yy_r179(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'=>'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2853 "smarty_internal_templateparser.php"
#line 1076 "smarty_internal_templateparser.y"
    function yy_r180(){
    $this->_retvalue = '\''.$this->yystack[$this->yyidx + -2]->minor.'\'=>'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 2858 "smarty_internal_templateparser.php"
#line 1088 "smarty_internal_templateparser.y"
    function yy_r182(){
    $this->_retvalue = "''";
    }
#line 2863 "smarty_internal_templateparser.php"
#line 1092 "smarty_internal_templateparser.y"
    function yy_r183(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor->to_smarty_php();
    }
#line 2868 "smarty_internal_templateparser.php"
#line 1097 "smarty_internal_templateparser.y"
    function yy_r184(){
    $this->yystack[$this->yyidx + -1]->minor->append_subtree($this->yystack[$this->yyidx + 0]->minor);
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 2874 "smarty_internal_templateparser.php"
#line 1102 "smarty_internal_templateparser.y"
    function yy_r185(){
    $this->_retvalue = new _smarty_doublequoted($this, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2879 "smarty_internal_templateparser.php"
#line 1106 "smarty_internal_templateparser.y"
    function yy_r186(){
    $this->_retvalue = new _smarty_code($this, '(string)smarty_array_lookup($_smarty_tpl->tpl_vars, \''. substr($this->yystack[$this->yyidx + 0]->minor,1) .'\')->value');
    }
#line 2884 "smarty_internal_templateparser.php"
#line 1110 "smarty_internal_templateparser.y"
    function yy_r187(){
    $this->_retvalue = new _smarty_code($this, '(string)'.$this->yystack[$this->yyidx + -1]->minor);
    }
#line 2889 "smarty_internal_templateparser.php"
#line 1114 "smarty_internal_templateparser.y"
    function yy_r188(){
    $this->_retvalue = new _smarty_code($this, '(string)('.$this->yystack[$this->yyidx + -1]->minor.')');
    }
#line 2894 "smarty_internal_templateparser.php"
#line 1118 "smarty_internal_templateparser.y"
    function yy_r189(){
    $this->_retvalue = new _smarty_tag($this, $this->yystack[$this->yyidx + -1]->minor);
    }
#line 2899 "smarty_internal_templateparser.php"
#line 1122 "smarty_internal_templateparser.y"
    function yy_r190(){
    $this->_retvalue = new _smarty_dq_content($this, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 2904 "smarty_internal_templateparser.php"

    private $_retvalue;

    public function yy_reduce($yyruleno)
    {
        $yymsp = $this->yystack[$this->yyidx];
        if ($this->yyTraceFILE && $yyruleno >= 0
              && $yyruleno < count(self::$yyRuleName)) {
            fprintf($this->yyTraceFILE, "%sReduce (%d) [%s].\n",
                $this->yyTracePrompt, $yyruleno,
                self::$yyRuleName[$yyruleno]);
        }

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for ($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            if (!$this->yyTraceFILE && $yysize) {
                $this->yyidx++;
                $x = new TP_yyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    public function yy_parse_failed()
    {
        if ($this->yyTraceFILE) {
            fprintf($this->yyTraceFILE, "%sFail!\n", $this->yyTracePrompt);
        } while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
    }

    public function yy_syntax_error($yymajor, $TOKEN)
    {
#line 71 "smarty_internal_templateparser.y"

    $this->internalError = true;
    $this->yymajor = $yymajor;
    $this->compiler->trigger_template_error();
#line 2966 "smarty_internal_templateparser.php"
    }

    public function yy_accept()
    {
        if ($this->yyTraceFILE) {
            fprintf($this->yyTraceFILE, "%sAccept!\n", $this->yyTracePrompt);
        } while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
#line 63 "smarty_internal_templateparser.y"

    $this->successful = !$this->internalError;
    $this->internalError = false;
    $this->retvalue = $this->_retvalue;
    //echo $this->retvalue."\n\n";
#line 2983 "smarty_internal_templateparser.php"
    }

    public function doParse($yymajor, $yytokenvalue)
    {
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */

        if ($this->yyidx === null || $this->yyidx < 0) {
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new TP_yyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);

        if ($this->yyTraceFILE) {
            fprintf($this->yyTraceFILE, "%sInput %s\n",
                $this->yyTracePrompt, $this->yyTokenName[$yymajor]);
        }

        do {
            $yyact = $this->yy_find_shift_action($yymajor);
            if ($yymajor < self::YYERRORSYMBOL &&
                  !$this->yy_is_expected_token($yymajor)) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if ($this->yyTraceFILE) {
                    fprintf($this->yyTraceFILE, "%sSyntax Error!\n",
                        $this->yyTracePrompt);
                }
                if (self::YYERRORSYMBOL) {
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit) {
                        if ($this->yyTraceFILE) {
                            fprintf($this->yyTraceFILE, "%sDiscard input token %s\n",
                                $this->yyTracePrompt, $this->yyTokenName[$yymajor]);
                        }
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0 &&
                                 $yymx != self::YYERRORSYMBOL &&
        ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                              ){
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}
